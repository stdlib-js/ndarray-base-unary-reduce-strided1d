{
  "version": 3,
  "sources": ["../lib/initialize_array_views.js", "../lib/reshape_strategy.js", "../lib/increment_offsets.js", "../lib/set_view_offsets.js", "../lib/offsets.js", "../lib/2d_blocked_accessors.js", "../lib/3d_blocked_accessors.js", "../lib/4d_blocked_accessors.js", "../lib/5d_blocked_accessors.js", "../lib/6d_blocked_accessors.js", "../lib/7d_blocked_accessors.js", "../lib/8d_blocked_accessors.js", "../lib/9d_blocked_accessors.js", "../lib/10d_blocked_accessors.js", "../lib/2d_blocked.js", "../lib/3d_blocked.js", "../lib/4d_blocked.js", "../lib/5d_blocked.js", "../lib/6d_blocked.js", "../lib/7d_blocked.js", "../lib/8d_blocked.js", "../lib/9d_blocked.js", "../lib/10d_blocked.js", "../lib/0d_accessors.js", "../lib/1d_accessors.js", "../lib/2d_accessors.js", "../lib/3d_accessors.js", "../lib/4d_accessors.js", "../lib/5d_accessors.js", "../lib/6d_accessors.js", "../lib/7d_accessors.js", "../lib/8d_accessors.js", "../lib/9d_accessors.js", "../lib/10d_accessors.js", "../lib/nd_accessors.js", "../lib/0d.js", "../lib/1d.js", "../lib/2d.js", "../lib/3d.js", "../lib/4d.js", "../lib/5d.js", "../lib/6d.js", "../lib/7d.js", "../lib/8d.js", "../lib/9d.js", "../lib/10d.js", "../lib/nd.js", "../lib/main.js", "../lib/factory.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Initialize ndarray-like objects for representing zero-dimensional sub-array views of ancillary ndarray arguments.\n*\n* ## Notes\n*\n* -   This function ignores the first two ndarray-like objects, which are assumed to be the input and output ndarray, respectively.\n* -   This function mutates the provided output array.\n*\n* @private\n* @param {ArrayLikeObject<Object>} arrays - list of ndarray-like objects\n* @param {Array<Object>} out - output array\n* @returns {Array<Object>} output array\n*/\nfunction initializeViews( arrays, out ) {\n\tvar v;\n\tvar i;\n\n\tfor ( i = 2; i < arrays.length; i++ ) {\n\t\tv = arrays[ i ];\n\t\tout.push({\n\t\t\t'dtype': v.dtype,\n\t\t\t'data': v.data,\n\t\t\t'shape': [],\n\t\t\t'strides': [ 0 ],\n\t\t\t'offset': v.offset,\n\t\t\t'order': v.order\n\t\t});\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = initializeViews;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar iterationOrder = require( '@stdlib/ndarray-base-iteration-order' );\nvar minmaxViewBufferIndex = require( '@stdlib/ndarray-base-minmax-view-buffer-index' ).assign;\nvar ndarraylike2object = require( '@stdlib/ndarray-base-ndarraylike2object' );\nvar assign = require( '@stdlib/ndarray-base-assign' );\nvar ndarraylike2ndarray = require( '@stdlib/ndarray-base-ndarraylike2ndarray' );\nvar emptyLike = require( '@stdlib/ndarray-base-empty-like' );\n\n\n// FUNCTIONS //\n\n/**\n* Returns an input ndarray.\n*\n* @private\n* @param {ndarrayLike} x - input ndarray\n* @returns {ndarrayLike} input ndarray\n*/\nfunction identity( x ) {\n\treturn x;\n}\n\n/**\n* Broadcasts a zero-dimensional ndarray to a one-dimensional ndarray view containing a single element.\n*\n* @private\n* @param {ndarrayLike} x - input ndarray\n* @returns {ndarrayLike} broadcasted ndarray view\n*/\nfunction broadcast( x ) {\n\t// NOTE: the following properties must be set in the exact same order as in `x` in order to ensure that the returned object has the same hidden shape as the input ndarray-like object...\n\treturn {\n\t\t'dtype': x.dtype,\n\t\t'data': x.data,\n\t\t'shape': [ 1 ],\n\t\t'strides': [ 0 ],\n\t\t'offset': x.offset,\n\t\t'order': x.order\n\t};\n}\n\n/**\n* Returns a function which returns an ndarray view in which the singleton dimensions are removed from an input ndarray having only a single non-singleton dimension.\n*\n* @private\n* @param {NonNegativeInteger} index - index of the non-singleton dimension\n* @returns {Function} function for returning an ndarray view\n*/\nfunction squeeze( index ) {\n\treturn reshape;\n\n\t/**\n\t* Returns an ndarray view in which the singleton dimensions are removed from an input ndarray having only a single non-singleton dimension.\n\t*\n\t* @private\n\t* @param {ndarrayLike} x - input ndarray\n\t* @returns {ndarrayLike} a squeezed ndarray view\n\t*/\n\tfunction reshape( x ) {\n\t\t// NOTE: the following properties must be set in the exact same order as in `x` in order to ensure that the returned object has the same hidden shape as the input ndarray-like object...\n\t\treturn {\n\t\t\t'dtype': x.dtype,\n\t\t\t'data': x.data,\n\t\t\t'shape': [ x.shape[ index ] ],\n\t\t\t'strides': [ x.strides[ index ] ],\n\t\t\t'offset': x.offset,\n\t\t\t'order': x.order\n\t\t};\n\t}\n}\n\n/**\n* Returns a function which returns a one-dimensional ndarray view of a contiguous input ndarray having more than one dimension.\n*\n* @private\n* @param {NonNegativeInteger} len - number of elements in an ndarray\n* @param {integer} iox - iteration order\n* @returns {Function} function for returning a one-dimensional ndarray view\n*/\nfunction contiguous( len, iox ) {\n\tvar xmmv;\n\tvar ind;\n\tvar sh;\n\tvar sx;\n\n\t// Resolve the index of the min/max view buffer element which is the first indexed element...\n\tif ( iox === 1 ) {\n\t\tind = 0;\n\t} else {\n\t\tind = 1;\n\t}\n\t// Initialize an array for storing the min/max view buffer elements:\n\txmmv = [ 0, 0 ]; // [ min, max ]\n\n\t// Initialize the output one-dimensional view's shape and strides:\n\tsh = [ len ];\n\tsx = [ iox ];\n\n\treturn reshape;\n\n\t/**\n\t* Returns a one-dimensional ndarray view of a contiguous input ndarray having more than one dimension.\n\t*\n\t* @private\n\t* @param {ndarrayLike} x - input ndarray\n\t* @returns {ndarrayLike} a one-dimensional ndarray view\n\t*/\n\tfunction reshape( x ) {\n\t\t// Resolve the minimum and maximum linear indices in the underlying data buffer which are accessible to the input ndarray view:\n\t\tminmaxViewBufferIndex( x.shape, x.strides, x.offset, xmmv );\n\n\t\t// NOTE: the following properties must be set in the exact same order as in `x` in order to ensure that the returned object has the same hidden shape as the input ndarray-like object...\n\t\treturn {\n\t\t\t'dtype': x.dtype,\n\t\t\t'data': x.data,\n\t\t\t'shape': sh,\n\t\t\t'strides': sx,\n\t\t\t'offset': xmmv[ ind ], // the index of the first indexed element\n\t\t\t'order': x.order\n\t\t};\n\t}\n}\n\n/**\n* Returns a function which copies an input ndarray to a contiguous ndarray workspace.\n*\n* @private\n* @param {NonNegativeInteger} len - number of elements in an ndarray\n* @param {ndarrayLike} workspace - ndarray workspace\n* @returns {Function} function which copies an input ndarray to a contiguous ndarray workspace\n*/\nfunction copy( len, workspace ) {\n\t// NOTE: the following properties must be set in the exact same order as in the input ndarray-like object in order to ensure that the returned object has the same hidden shape...\n\tvar view = {\n\t\t'dtype': workspace.dtype,\n\t\t'data': workspace.data,\n\t\t'shape': [ len ],\n\t\t'strides': [ 1 ],\n\t\t'offset': workspace.offset,\n\t\t'order': workspace.order\n\t};\n\treturn reshape;\n\n\t/**\n\t* Copies an input ndarray to a contiguous ndarray workspace and returns a one-dimensional workspace view.\n\t*\n\t* @private\n\t* @param {ndarrayLike} x - input ndarray\n\t* @returns {ndarrayLike} one-dimensional workspace view\n\t*/\n\tfunction reshape( x ) {\n\t\tassign( [ x, workspace ] );\n\t\treturn view;\n\t}\n}\n\n\n// MAIN //\n\n/**\n* Returns a function for reshaping input ndarrays which have the same data type, shape, and strides as a provided ndarray.\n*\n* @private\n* @param {ndarrayLike} x - input ndarray\n* @param {string} x.dtype - input ndarray data type\n* @param {Collection} x.data - input ndarray data buffer\n* @param {NonNegativeIntegerArray} x.shape - input ndarray shape\n* @param {IntegerArray} x.strides - input ndarray strides\n* @param {NonNegativeInteger} x.offset - input ndarray index offset\n* @param {string} x.order - input ndarray memory layout\n* @returns {Function} function implementing a reshape strategy\n*/\nfunction strategy( x ) {\n\tvar ndims;\n\tvar xmmv;\n\tvar len;\n\tvar iox;\n\tvar sh;\n\tvar ns;\n\tvar i;\n\n\t// Resolve the number of array dimensions:\n\tsh = x.shape;\n\tndims = sh.length;\n\n\t// Check whether the ndarray is zero-dimensional...\n\tif ( ndims === 0 ) {\n\t\treturn broadcast;\n\t}\n\t// Check whether the ndarray is already one-dimensional...\n\tif ( ndims === 1 ) {\n\t\treturn identity;\n\t}\n\t// Determine the number of singleton dimensions...\n\tlen = 1; // number of elements\n\tns = 0;  // number of singleton dimensions\n\tfor ( i = 0; i < ndims; i++ ) {\n\t\t// Check whether the current dimension is a singleton dimension...\n\t\tif ( sh[ i ] === 1 ) {\n\t\t\tns += 1;\n\t\t}\n\t\tlen *= sh[ i ];\n\t}\n\t// Determine whether the ndarray has only **one** non-singleton dimension (e.g., ndims=4, shape=[10,1,1,1]) so that we can simply create an ndarray view without the singleton dimensions...\n\tif ( ns === ndims-1 ) {\n\t\t// Get the index of the non-singleton dimension...\n\t\tfor ( i = 0; i < ndims; i++ ) {\n\t\t\tif ( sh[ i ] !== 1 ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn squeeze( i );\n\t}\n\tiox = iterationOrder( x.strides ); // +/-1\n\n\t// Determine whether we can avoid copying data...\n\tif ( iox !== 0 ) {\n\t\t// Determine the minimum and maximum linear indices which are accessible by the ndarray view:\n\t\txmmv = minmaxViewBufferIndex( sh, x.strides, x.offset, [ 0, 0 ] );\n\n\t\t// Determine whether we can ignore shape (and strides) and create a new one-dimensional ndarray view...\n\t\tif ( len === ( xmmv[1]-xmmv[0]+1 ) ) {\n\t\t\treturn contiguous( len, iox );\n\t\t}\n\t\t// The ndarray is non-contiguous, so we cannot directly interpret as a one-dimensional ndarray...\n\n\t\t// Fall-through to copying to a workspace ndarray...\n\t}\n\t// At this point, we're dealing with a non-contiguous multi-dimensional ndarray, so we need to copy to a contiguous workspace:\n\treturn copy( len, ndarraylike2object( emptyLike( ndarraylike2ndarray( x ) ) ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = strategy;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Increments index offsets according to a list of increments.\n*\n* ## Notes\n*\n* -   This function mutates the list of index offsets.\n*\n* @private\n* @param {NonNegativeIntegerArray} offsets - list of index offsets\n* @param {NonNegativeIntegerArray} inc - list of increments\n* @returns {NonNegativeIntegerArray} updated offsets\n*/\nfunction incrementOffsets( offsets, inc ) {\n\tvar i;\n\tfor ( i = 0; i < offsets.length; i++ ) {\n\t\toffsets[ i ] += inc[ i ];\n\t}\n\treturn offsets;\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrementOffsets;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Sets view offsets according to a list of index offsets.\n*\n* ## Notes\n*\n* -   This function skips the second element in the list of index offsets, as that is assumed to correspond to the output ndarray which does not have a corresponding view. Meaning, the list of views is expected to have `N` elements, and the list of index offsets is expected to have `N+1` elements.\n* -   This function mutates the provides view objects.\n*\n* @private\n* @param {Array<Object>} views - list of ndarray-like objects representing ndarray views\n* @param {NonNegativeIntegerArray} offsets - list of index offsets\n* @returns {Array<Object>} updated views\n*/\nfunction setViewOffsets( views, offsets ) {\n\tvar i;\n\tvar j;\n\tfor ( i = 0, j = 0; i < offsets.length; i++ ) {\n\t\tif ( i === 1 ) { // note: expected to correspond to the output ndarray which does not have a corresponding view\n\t\t\tcontinue;\n\t\t}\n\t\tviews[ j ].offset = offsets[ i ];\n\t\tj += 1;\n\t}\n\treturn views;\n}\n\n\n// EXPORTS //\n\nmodule.exports = setViewOffsets;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Resolves index offsets from a list of ndarray-like objects.\n*\n* @private\n* @param {ArrayLikeObject<Object>} arrays - list of ndarray-like objects\n* @returns {NonNegativeIntegerArray} list of offsets\n*/\nfunction offsets( arrays ) {\n\tvar out = [];\n\tvar i;\n\tfor ( i = 0; i < arrays.length; i++ ) {\n\t\tout.push( arrays[ i ].offset );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = offsets;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-unary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-unary-tiling-block-size' );\nvar takeIndexed = require( '@stdlib/array-base-take-indexed' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var accessors = require( '@stdlib/array-base-accessors' );\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var getStride = require( '@stdlib/ndarray-base-stride' );\n* var getOffset = require( '@stdlib/ndarray-base-offset' );\n* var getData = require( '@stdlib/ndarray-base-data-buffer' );\n* var numelDimension = require( '@stdlib/ndarray-base-numel-dimension' );\n* var gsum = require( '@stdlib/blas-ext-base-gsum' ).ndarray;\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( new Float64Array( [ 0.0, 0.0, 0.0 ] ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 3, 2, 2 ];\n* var ysh = [ 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* blockedunary2d( wrapper, [ x, y ], views, [ 12, 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ 10.0, 26.0, 42.0 ] ]\n*/\nfunction blockedunary2d( fcn, arrays, views, strides, strategy, opts ) {\n\tvar bsize;\n\tvar ybuf;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar ov1;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar j0;\n\tvar j1;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[1];\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tdv1 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\tif ( j1 < bsize ) {\n\t\t\ts1 = j1;\n\t\t\tj1 = 0;\n\t\t} else {\n\t\t\ts1 = bsize;\n\t\t\tj1 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov1[ k ] = ov[k] + ( j1*sv[k][1] );\n\t\t}\n\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\tif ( j0 < bsize ) {\n\t\t\t\ts0 = j0;\n\t\t\t\tj0 = 0;\n\t\t\t} else {\n\t\t\t\ts0 = bsize;\n\t\t\t\tj0 -= bsize;\n\t\t\t}\n\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t}\n\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\tviews[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\tset( ybuf, iv[1], fcn( views, opts ) );\n\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedunary2d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-unary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-unary-tiling-block-size' );\nvar takeIndexed = require( '@stdlib/array-base-take-indexed' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var accessors = require( '@stdlib/array-base-accessors' );\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var getStride = require( '@stdlib/ndarray-base-stride' );\n* var getOffset = require( '@stdlib/ndarray-base-offset' );\n* var getData = require( '@stdlib/ndarray-base-data-buffer' );\n* var numelDimension = require( '@stdlib/ndarray-base-numel-dimension' );\n* var gsum = require( '@stdlib/blas-ext-base-gsum' ).ndarray;\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( new Float64Array( [ 0.0, 0.0, 0.0 ] ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* blockedunary3d( wrapper, [ x, y ], views, [ 12, 12, 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ 10.0, 26.0, 42.0 ] ] ]\n*/\nfunction blockedunary3d( fcn, arrays, views, strides, strategy, opts ) {\n\tvar bsize;\n\tvar ybuf;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar ov1;\n\tvar ov2;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[1];\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\tif ( j2 < bsize ) {\n\t\t\ts2 = j2;\n\t\t\tj2 = 0;\n\t\t} else {\n\t\t\ts2 = bsize;\n\t\t\tj2 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov2[ k ] = ov[k] + ( j2*sv[k][2] );\n\t\t}\n\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\tif ( j1 < bsize ) {\n\t\t\t\ts1 = j1;\n\t\t\t\tj1 = 0;\n\t\t\t} else {\n\t\t\t\ts1 = bsize;\n\t\t\t\tj1 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t}\n\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\ts0 = j0;\n\t\t\t\t\tj0 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts0 = bsize;\n\t\t\t\t\tj0 -= bsize;\n\t\t\t\t}\n\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t}\n\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\tviews[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\tset( ybuf, iv[1], fcn( views, opts ) );\n\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedunary3d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-unary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-unary-tiling-block-size' );\nvar takeIndexed = require( '@stdlib/array-base-take-indexed' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var accessors = require( '@stdlib/array-base-accessors' );\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var getStride = require( '@stdlib/ndarray-base-stride' );\n* var getOffset = require( '@stdlib/ndarray-base-offset' );\n* var getData = require( '@stdlib/ndarray-base-data-buffer' );\n* var numelDimension = require( '@stdlib/ndarray-base-numel-dimension' );\n* var gsum = require( '@stdlib/blas-ext-base-gsum' ).ndarray;\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( new Float64Array( [ 0.0, 0.0, 0.0 ] ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* blockedunary4d( wrapper, [ x, y ], views, [ 12, 12, 12, 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ 10.0, 26.0, 42.0 ] ] ] ]\n*/\nfunction blockedunary4d( fcn, arrays, views, strides, strategy, opts ) {\n\tvar bsize;\n\tvar ybuf;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[1];\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\tif ( j3 < bsize ) {\n\t\t\ts3 = j3;\n\t\t\tj3 = 0;\n\t\t} else {\n\t\t\ts3 = bsize;\n\t\t\tj3 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov3[ k ] = ov[k] + ( j3*sv[k][3] );\n\t\t}\n\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\tif ( j2 < bsize ) {\n\t\t\t\ts2 = j2;\n\t\t\t\tj2 = 0;\n\t\t\t} else {\n\t\t\t\ts2 = bsize;\n\t\t\t\tj2 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t}\n\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\ts1 = j1;\n\t\t\t\t\tj1 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts1 = bsize;\n\t\t\t\t\tj1 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t}\n\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t}\n\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\tviews[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\t\t\tset( ybuf, iv[1], fcn( views, opts ) );\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedunary4d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-unary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-unary-tiling-block-size' );\nvar takeIndexed = require( '@stdlib/array-base-take-indexed' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var accessors = require( '@stdlib/array-base-accessors' );\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var getStride = require( '@stdlib/ndarray-base-stride' );\n* var getOffset = require( '@stdlib/ndarray-base-offset' );\n* var getData = require( '@stdlib/ndarray-base-data-buffer' );\n* var numelDimension = require( '@stdlib/ndarray-base-numel-dimension' );\n* var gsum = require( '@stdlib/blas-ext-base-gsum' ).ndarray;\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( new Float64Array( [ 0.0, 0.0, 0.0 ] ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* blockedunary5d( wrapper, [ x, y ], views, [ 12, 12, 12, 12, 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ 10.0, 26.0, 42.0 ] ] ] ] ]\n*/\nfunction blockedunary5d( fcn, arrays, views, strides, strategy, opts ) { // eslint-disable-line max-statements\n\tvar bsize;\n\tvar ybuf;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar ov4;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[1];\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tov4 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tdv4 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\tif ( j4 < bsize ) {\n\t\t\ts4 = j4;\n\t\t\tj4 = 0;\n\t\t} else {\n\t\t\ts4 = bsize;\n\t\t\tj4 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov4[ k ] = ov[k] + ( j4*sv[k][4] );\n\t\t}\n\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\tif ( j3 < bsize ) {\n\t\t\t\ts3 = j3;\n\t\t\t\tj3 = 0;\n\t\t\t} else {\n\t\t\t\ts3 = bsize;\n\t\t\t\tj3 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tdv4[ k ] = sv[k][4] - ( s3*sv[k][3] );\n\t\t\t\tov3[ k ] = ov4[k] + ( j3*sv[k][3] );\n\t\t\t}\n\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\ts2 = j2;\n\t\t\t\t\tj2 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts2 = bsize;\n\t\t\t\t\tj2 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\t}\n\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\tviews[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\t\t\t\t\tset( ybuf, iv[1], fcn( views, opts ) );\n\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedunary5d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-unary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-unary-tiling-block-size' );\nvar takeIndexed = require( '@stdlib/array-base-take-indexed' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var accessors = require( '@stdlib/array-base-accessors' );\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var getStride = require( '@stdlib/ndarray-base-stride' );\n* var getOffset = require( '@stdlib/ndarray-base-offset' );\n* var getData = require( '@stdlib/ndarray-base-data-buffer' );\n* var numelDimension = require( '@stdlib/ndarray-base-numel-dimension' );\n* var gsum = require( '@stdlib/blas-ext-base-gsum' ).ndarray;\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( new Float64Array( [ 0.0, 0.0, 0.0 ] ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* blockedunary6d( wrapper, [ x, y ], views, [ 12, 12, 12, 12, 12, 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ 10.0, 26.0, 42.0 ] ] ] ] ] ]\n*/\nfunction blockedunary6d( fcn, arrays, views, strides, strategy, opts ) { // eslint-disable-line max-statements\n\tvar bsize;\n\tvar ybuf;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar ov4;\n\tvar ov5;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[1];\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tov4 = zeros( N );\n\tov5 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tdv4 = zeros( N );\n\tdv5 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\tif ( j5 < bsize ) {\n\t\t\ts5 = j5;\n\t\t\tj5 = 0;\n\t\t} else {\n\t\t\ts5 = bsize;\n\t\t\tj5 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov5[ k ] = ov[k] + ( j5*sv[k][5] );\n\t\t}\n\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\tif ( j4 < bsize ) {\n\t\t\t\ts4 = j4;\n\t\t\t\tj4 = 0;\n\t\t\t} else {\n\t\t\t\ts4 = bsize;\n\t\t\t\tj4 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tdv5 = sv[k][5] - ( s4*sv[k][4] );\n\t\t\t\tov4[ k ] = ov5[k] + ( j4*sv[k][4] );\n\t\t\t}\n\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\ts3 = j3;\n\t\t\t\t\tj3 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts3 = bsize;\n\t\t\t\t\tj3 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tdv4[ k ] = sv[k][4] - ( s3*sv[k][3] );\n\t\t\t\t\tov3[ k ] = ov4[k] + ( j3*sv[k][3] );\n\t\t\t\t}\n\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\t\t\tviews[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\t\t\t\t\t\t\tset( ybuf, iv[1], fcn( views, opts ) );\n\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedunary6d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-unary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-unary-tiling-block-size' );\nvar takeIndexed = require( '@stdlib/array-base-take-indexed' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var accessors = require( '@stdlib/array-base-accessors' );\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var getStride = require( '@stdlib/ndarray-base-stride' );\n* var getOffset = require( '@stdlib/ndarray-base-offset' );\n* var getData = require( '@stdlib/ndarray-base-data-buffer' );\n* var numelDimension = require( '@stdlib/ndarray-base-numel-dimension' );\n* var gsum = require( '@stdlib/blas-ext-base-gsum' ).ndarray;\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( new Float64Array( [ 0.0, 0.0, 0.0 ] ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* blockedunary7d( wrapper, [ x, y ], views, [ 12, 12, 12, 12, 12, 12, 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ 10.0, 26.0, 42.0 ] ] ] ] ] ] ]\n*/\nfunction blockedunary7d( fcn, arrays, views, strides, strategy, opts ) { // eslint-disable-line max-statements\n\tvar bsize;\n\tvar ybuf;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar ov4;\n\tvar ov5;\n\tvar ov6;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tov4 = zeros( N );\n\tov5 = zeros( N );\n\tov6 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tdv4 = zeros( N );\n\tdv5 = zeros( N );\n\tdv6 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\tif ( j6 < bsize ) {\n\t\t\ts6 = j6;\n\t\t\tj6 = 0;\n\t\t} else {\n\t\t\ts6 = bsize;\n\t\t\tj6 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov6[ k ] = ov[k] + ( j6*sv[k][6] );\n\t\t}\n\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\tif ( j5 < bsize ) {\n\t\t\t\ts5 = j5;\n\t\t\t\tj5 = 0;\n\t\t\t} else {\n\t\t\t\ts5 = bsize;\n\t\t\t\tj5 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tdv6 = sv[k][6] - ( s5*sv[k][5] );\n\t\t\t\tov5[ k ] = ov6[k] + ( j5*sv[k][5] );\n\t\t\t}\n\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\ts4 = j4;\n\t\t\t\t\tj4 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts4 = bsize;\n\t\t\t\t\tj4 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tdv5 = sv[k][5] - ( s4*sv[k][4] );\n\t\t\t\t\tov4[ k ] = ov5[k] + ( j4*sv[k][4] );\n\t\t\t\t}\n\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tdv4[ k ] = sv[k][4] - ( s3*sv[k][3] );\n\t\t\t\t\t\tov3[ k ] = ov4[k] + ( j3*sv[k][3] );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tviews[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tset( ybuf, iv[ 1 ], fcn( views, opts ) );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv6 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedunary7d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-unary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-unary-tiling-block-size' );\nvar takeIndexed = require( '@stdlib/array-base-take-indexed' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var accessors = require( '@stdlib/array-base-accessors' );\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var getStride = require( '@stdlib/ndarray-base-stride' );\n* var getOffset = require( '@stdlib/ndarray-base-offset' );\n* var getData = require( '@stdlib/ndarray-base-data-buffer' );\n* var numelDimension = require( '@stdlib/ndarray-base-numel-dimension' );\n* var gsum = require( '@stdlib/blas-ext-base-gsum' ).ndarray;\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( new Float64Array( [ 0.0, 0.0, 0.0 ] ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* blockedunary8d( wrapper, [ x, y ], views, [ 12, 12, 12, 12, 12, 12, 12, 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ 10.0, 26.0, 42.0 ] ] ] ] ] ] ] ]\n*/\nfunction blockedunary8d( fcn, arrays, views, strides, strategy, opts ) { // eslint-disable-line max-statements, max-lines-per-function\n\tvar bsize;\n\tvar ybuf;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar dv7;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar ov4;\n\tvar ov5;\n\tvar ov6;\n\tvar ov7;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tov4 = zeros( N );\n\tov5 = zeros( N );\n\tov6 = zeros( N );\n\tov7 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tdv4 = zeros( N );\n\tdv5 = zeros( N );\n\tdv6 = zeros( N );\n\tdv7 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\tif ( j7 < bsize ) {\n\t\t\ts7 = j7;\n\t\t\tj7 = 0;\n\t\t} else {\n\t\t\ts7 = bsize;\n\t\t\tj7 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov7[ k ] = ov[k] + ( j7*sv[k][7] );\n\t\t}\n\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\tif ( j6 < bsize ) {\n\t\t\t\ts6 = j6;\n\t\t\t\tj6 = 0;\n\t\t\t} else {\n\t\t\t\ts6 = bsize;\n\t\t\t\tj6 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tdv7 = sv[k][7] - ( s6*sv[k][6] );\n\t\t\t\tov6[ k ] = ov7[k] + ( j6*sv[k][6] );\n\t\t\t}\n\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\ts5 = j5;\n\t\t\t\t\tj5 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts5 = bsize;\n\t\t\t\t\tj5 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tdv6 = sv[k][6] - ( s5*sv[k][5] );\n\t\t\t\t\tov5[ k ] = ov6[k] + ( j5*sv[k][5] );\n\t\t\t\t}\n\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tdv5 = sv[k][5] - ( s4*sv[k][4] );\n\t\t\t\t\t\tov4[ k ] = ov5[k] + ( j4*sv[k][4] );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\tdv4[ k ] = sv[k][4] - ( s3*sv[k][3] );\n\t\t\t\t\t\t\tov3[ k ] = ov4[k] + ( j3*sv[k][3] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t\t\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tviews[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tset( ybuf, iv[ 1 ], fcn( views, opts ) );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv6 );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv7 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedunary8d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-unary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-unary-tiling-block-size' );\nvar takeIndexed = require( '@stdlib/array-base-take-indexed' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var accessors = require( '@stdlib/array-base-accessors' );\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var getStride = require( '@stdlib/ndarray-base-stride' );\n* var getOffset = require( '@stdlib/ndarray-base-offset' );\n* var getData = require( '@stdlib/ndarray-base-data-buffer' );\n* var numelDimension = require( '@stdlib/ndarray-base-numel-dimension' );\n* var gsum = require( '@stdlib/blas-ext-base-gsum' ).ndarray;\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( new Float64Array( [ 0.0, 0.0, 0.0 ] ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* blockedunary9d( wrapper, [ x, y ], views, [ 12, 12, 12, 12, 12, 12, 12, 12, 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ [ 10.0, 26.0, 42.0 ] ] ] ] ] ] ] ] ]\n*/\nfunction blockedunary9d( fcn, arrays, views, strides, strategy, opts ) { // eslint-disable-line max-statements, max-lines-per-function\n\tvar bsize;\n\tvar ybuf;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar dv7;\n\tvar dv8;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar ov4;\n\tvar ov5;\n\tvar ov6;\n\tvar ov7;\n\tvar ov8;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar s8;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar j8;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tov4 = zeros( N );\n\tov5 = zeros( N );\n\tov6 = zeros( N );\n\tov7 = zeros( N );\n\tov8 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tdv4 = zeros( N );\n\tdv5 = zeros( N );\n\tdv6 = zeros( N );\n\tdv7 = zeros( N );\n\tdv8 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j8 = sh[8]; j8 > 0; ) {\n\t\tif ( j8 < bsize ) {\n\t\t\ts8 = j8;\n\t\t\tj8 = 0;\n\t\t} else {\n\t\t\ts8 = bsize;\n\t\t\tj8 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov8[ k ] = ov[k] + ( j8*sv[k][8] );\n\t\t}\n\t\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\t\tif ( j7 < bsize ) {\n\t\t\t\ts7 = j7;\n\t\t\t\tj7 = 0;\n\t\t\t} else {\n\t\t\t\ts7 = bsize;\n\t\t\t\tj7 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tdv8 = sv[k][8] - ( s7*sv[k][7] );\n\t\t\t\tov7[ k ] = ov8[k] + ( j7*sv[k][7] );\n\t\t\t}\n\t\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\t\tif ( j6 < bsize ) {\n\t\t\t\t\ts6 = j6;\n\t\t\t\t\tj6 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts6 = bsize;\n\t\t\t\t\tj6 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tdv7 = sv[k][7] - ( s6*sv[k][6] );\n\t\t\t\t\tov6[ k ] = ov7[k] + ( j6*sv[k][6] );\n\t\t\t\t}\n\t\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\t\ts5 = j5;\n\t\t\t\t\t\tj5 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts5 = bsize;\n\t\t\t\t\t\tj5 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tdv6 = sv[k][6] - ( s5*sv[k][5] );\n\t\t\t\t\t\tov5[ k ] = ov6[k] + ( j5*sv[k][5] );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\tdv5 = sv[k][5] - ( s4*sv[k][4] );\n\t\t\t\t\t\t\tov4[ k ] = ov5[k] + ( j4*sv[k][4] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\tdv4[ k ] = sv[k][4] - ( s3*sv[k][3] );\n\t\t\t\t\t\t\t\tov3[ k ] = ov4[k] + ( j3*sv[k][3] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t\t\t\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t\t\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\t\t\t\t\t\tfor ( i8 = 0; i8 < s8; i8++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tviews[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tset( ybuf, iv[ 1 ], fcn( views, opts ) );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv6 );\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv7 );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv8 );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedunary9d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-unary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-unary-tiling-block-size' );\nvar takeIndexed = require( '@stdlib/array-base-take-indexed' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var accessors = require( '@stdlib/array-base-accessors' );\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var getStride = require( '@stdlib/ndarray-base-stride' );\n* var getOffset = require( '@stdlib/ndarray-base-offset' );\n* var getData = require( '@stdlib/ndarray-base-data-buffer' );\n* var numelDimension = require( '@stdlib/ndarray-base-numel-dimension' );\n* var gsum = require( '@stdlib/blas-ext-base-gsum' ).ndarray;\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( new Float64Array( [ 0.0, 0.0, 0.0 ] ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* blockedunary10d( wrapper, [ x, y ], views, [ 12, 12, 12, 12, 12, 12, 12, 12, 12, 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ [ [ 10.0, 26.0, 42.0 ] ] ] ] ] ] ] ] ] ]\n*/\nfunction blockedunary10d( fcn, arrays, views, strides, strategy, opts ) { // eslint-disable-line max-statements, max-lines-per-function\n\tvar bsize;\n\tvar ybuf;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar dv7;\n\tvar dv8;\n\tvar dv9;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar ov4;\n\tvar ov5;\n\tvar ov6;\n\tvar ov7;\n\tvar ov8;\n\tvar ov9;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar s8;\n\tvar s9;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar i9;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar j8;\n\tvar j9;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tov4 = zeros( N );\n\tov5 = zeros( N );\n\tov6 = zeros( N );\n\tov7 = zeros( N );\n\tov8 = zeros( N );\n\tov9 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tdv4 = zeros( N );\n\tdv5 = zeros( N );\n\tdv6 = zeros( N );\n\tdv7 = zeros( N );\n\tdv8 = zeros( N );\n\tdv9 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j9 = sh[9]; j9 > 0; ) {\n\t\tif ( j9 < bsize ) {\n\t\t\ts9 = j9;\n\t\t\tj9 = 0;\n\t\t} else {\n\t\t\ts9 = bsize;\n\t\t\tj9 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov9[ k ] = ov[k] + ( j9*sv[k][9] );\n\t\t}\n\t\tfor ( j8 = sh[8]; j8 > 0; ) {\n\t\t\tif ( j8 < bsize ) {\n\t\t\t\ts8 = j8;\n\t\t\t\tj8 = 0;\n\t\t\t} else {\n\t\t\t\ts8 = bsize;\n\t\t\t\tj8 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tdv9 = sv[k][9] - ( s8*sv[k][8] );\n\t\t\t\tov8[ k ] = ov9[k] + ( j8*sv[k][8] );\n\t\t\t}\n\t\t\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\t\t\tif ( j7 < bsize ) {\n\t\t\t\t\ts7 = j7;\n\t\t\t\t\tj7 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts7 = bsize;\n\t\t\t\t\tj7 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tdv8 = sv[k][8] - ( s7*sv[k][7] );\n\t\t\t\t\tov7[ k ] = ov8[k] + ( j7*sv[k][7] );\n\t\t\t\t}\n\t\t\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\t\t\tif ( j6 < bsize ) {\n\t\t\t\t\t\ts6 = j6;\n\t\t\t\t\t\tj6 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts6 = bsize;\n\t\t\t\t\t\tj6 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tdv7 = sv[k][7] - ( s6*sv[k][6] );\n\t\t\t\t\t\tov6[ k ] = ov7[k] + ( j6*sv[k][6] );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\t\t\ts5 = j5;\n\t\t\t\t\t\t\tj5 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts5 = bsize;\n\t\t\t\t\t\t\tj5 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\tdv6 = sv[k][6] - ( s5*sv[k][5] );\n\t\t\t\t\t\t\tov5[ k ] = ov6[k] + ( j5*sv[k][5] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\tdv5 = sv[k][5] - ( s4*sv[k][4] );\n\t\t\t\t\t\t\t\tov4[ k ] = ov5[k] + ( j4*sv[k][4] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\tdv4[ k ] = sv[k][4] - ( s3*sv[k][3] );\n\t\t\t\t\t\t\t\t\tov3[ k ] = ov4[k] + ( j3*sv[k][3] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t\t\t\t\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t\t\t\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\t\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\t\t\t\t\t\t\tfor ( i9 = 0; i9 < s9; i9++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i8 = 0; i8 < s8; i8++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tviews[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tset( ybuf, iv[ 1 ], fcn( views, opts ) );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv6 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv7 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv8 );\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv9 );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedunary10d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-unary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-unary-tiling-block-size' );\nvar takeIndexed = require( '@stdlib/array-base-take-indexed' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var getStride = require( '@stdlib/ndarray-base-stride' );\n* var getOffset = require( '@stdlib/ndarray-base-offset' );\n* var getData = require( '@stdlib/ndarray-base-data-buffer' );\n* var numelDimension = require( '@stdlib/ndarray-base-numel-dimension' );\n* var gsum = require( '@stdlib/blas-ext-base-gsum' ).ndarray;\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 3, 2, 2 ];\n* var ysh = [ 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* blockedunary2d( wrapper, [ x, y ], views, [ 12, 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ 10.0, 26.0, 42.0 ] ]\n*/\nfunction blockedunary2d( fcn, arrays, views, strides, strategy, opts ) {\n\tvar bsize;\n\tvar ybuf;\n\tvar dv0;\n\tvar dv1;\n\tvar ov1;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar j0;\n\tvar j1;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tdv1 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\tif ( j1 < bsize ) {\n\t\t\ts1 = j1;\n\t\t\tj1 = 0;\n\t\t} else {\n\t\t\ts1 = bsize;\n\t\t\tj1 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov1[ k ] = ov[k] + ( j1*sv[k][1] );\n\t\t}\n\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\tif ( j0 < bsize ) {\n\t\t\t\ts0 = j0;\n\t\t\t\tj0 = 0;\n\t\t\t} else {\n\t\t\t\ts0 = bsize;\n\t\t\t\tj0 -= bsize;\n\t\t\t}\n\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t}\n\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\tviews[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\tybuf[ iv[1] ] = fcn( views, opts );\n\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedunary2d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-unary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-unary-tiling-block-size' );\nvar takeIndexed = require( '@stdlib/array-base-take-indexed' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var getStride = require( '@stdlib/ndarray-base-stride' );\n* var getOffset = require( '@stdlib/ndarray-base-offset' );\n* var getData = require( '@stdlib/ndarray-base-data-buffer' );\n* var numelDimension = require( '@stdlib/ndarray-base-numel-dimension' );\n* var gsum = require( '@stdlib/blas-ext-base-gsum' ).ndarray;\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* blockedunary3d( wrapper, [ x, y ], views, [ 12, 12, 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ 10.0, 26.0, 42.0 ] ] ]\n*/\nfunction blockedunary3d( fcn, arrays, views, strides, strategy, opts ) {\n\tvar bsize;\n\tvar ybuf;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar ov1;\n\tvar ov2;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\tif ( j2 < bsize ) {\n\t\t\ts2 = j2;\n\t\t\tj2 = 0;\n\t\t} else {\n\t\t\ts2 = bsize;\n\t\t\tj2 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov2[ k ] = ov[k] + ( j2*sv[k][2] );\n\t\t}\n\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\tif ( j1 < bsize ) {\n\t\t\t\ts1 = j1;\n\t\t\t\tj1 = 0;\n\t\t\t} else {\n\t\t\t\ts1 = bsize;\n\t\t\t\tj1 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t}\n\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\ts0 = j0;\n\t\t\t\t\tj0 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts0 = bsize;\n\t\t\t\t\tj0 -= bsize;\n\t\t\t\t}\n\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t}\n\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\tviews[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\tybuf[ iv[1] ] = fcn( views, opts );\n\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedunary3d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-unary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-unary-tiling-block-size' );\nvar takeIndexed = require( '@stdlib/array-base-take-indexed' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var getStride = require( '@stdlib/ndarray-base-stride' );\n* var getOffset = require( '@stdlib/ndarray-base-offset' );\n* var getData = require( '@stdlib/ndarray-base-data-buffer' );\n* var numelDimension = require( '@stdlib/ndarray-base-numel-dimension' );\n* var gsum = require( '@stdlib/blas-ext-base-gsum' ).ndarray;\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* blockedunary4d( wrapper, [ x, y ], views, [ 12, 12, 12, 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ 10.0, 26.0, 42.0 ] ] ] ]\n*/\nfunction blockedunary4d( fcn, arrays, views, strides, strategy, opts ) {\n\tvar bsize;\n\tvar ybuf;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\tif ( j3 < bsize ) {\n\t\t\ts3 = j3;\n\t\t\tj3 = 0;\n\t\t} else {\n\t\t\ts3 = bsize;\n\t\t\tj3 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov3[ k ] = ov[k] + ( j3*sv[k][3] );\n\t\t}\n\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\tif ( j2 < bsize ) {\n\t\t\t\ts2 = j2;\n\t\t\t\tj2 = 0;\n\t\t\t} else {\n\t\t\t\ts2 = bsize;\n\t\t\t\tj2 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t}\n\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\ts1 = j1;\n\t\t\t\t\tj1 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts1 = bsize;\n\t\t\t\t\tj1 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t}\n\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t}\n\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\tviews[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\t\t\tybuf[ iv[1] ] = fcn( views, opts );\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedunary4d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-unary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-unary-tiling-block-size' );\nvar takeIndexed = require( '@stdlib/array-base-take-indexed' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var getStride = require( '@stdlib/ndarray-base-stride' );\n* var getOffset = require( '@stdlib/ndarray-base-offset' );\n* var getData = require( '@stdlib/ndarray-base-data-buffer' );\n* var numelDimension = require( '@stdlib/ndarray-base-numel-dimension' );\n* var gsum = require( '@stdlib/blas-ext-base-gsum' ).ndarray;\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* blockedunary5d( wrapper, [ x, y ], views, [ 12, 12, 12, 12, 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ 10.0, 26.0, 42.0 ] ] ] ] ]\n*/\nfunction blockedunary5d( fcn, arrays, views, strides, strategy, opts ) { // eslint-disable-line max-statements\n\tvar bsize;\n\tvar ybuf;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar ov4;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tov4 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tdv4 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\tif ( j4 < bsize ) {\n\t\t\ts4 = j4;\n\t\t\tj4 = 0;\n\t\t} else {\n\t\t\ts4 = bsize;\n\t\t\tj4 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov4[ k ] = ov[k] + ( j4*sv[k][4] );\n\t\t}\n\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\tif ( j3 < bsize ) {\n\t\t\t\ts3 = j3;\n\t\t\t\tj3 = 0;\n\t\t\t} else {\n\t\t\t\ts3 = bsize;\n\t\t\t\tj3 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tdv4[ k ] = sv[k][4] - ( s3*sv[k][3] );\n\t\t\t\tov3[ k ] = ov4[k] + ( j3*sv[k][3] );\n\t\t\t}\n\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\ts2 = j2;\n\t\t\t\t\tj2 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts2 = bsize;\n\t\t\t\t\tj2 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\t}\n\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\tviews[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\t\t\t\t\tybuf[ iv[1] ] = fcn( views, opts );\n\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedunary5d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-unary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-unary-tiling-block-size' );\nvar takeIndexed = require( '@stdlib/array-base-take-indexed' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var getStride = require( '@stdlib/ndarray-base-stride' );\n* var getOffset = require( '@stdlib/ndarray-base-offset' );\n* var getData = require( '@stdlib/ndarray-base-data-buffer' );\n* var numelDimension = require( '@stdlib/ndarray-base-numel-dimension' );\n* var gsum = require( '@stdlib/blas-ext-base-gsum' ).ndarray;\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* blockedunary6d( wrapper, [ x, y ], views, [ 12, 12, 12, 12, 12, 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ 10.0, 26.0, 42.0 ] ] ] ] ] ]\n*/\nfunction blockedunary6d( fcn, arrays, views, strides, strategy, opts ) { // eslint-disable-line max-statements\n\tvar bsize;\n\tvar ybuf;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar ov4;\n\tvar ov5;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tov4 = zeros( N );\n\tov5 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tdv4 = zeros( N );\n\tdv5 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\tif ( j5 < bsize ) {\n\t\t\ts5 = j5;\n\t\t\tj5 = 0;\n\t\t} else {\n\t\t\ts5 = bsize;\n\t\t\tj5 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov5[ k ] = ov[k] + ( j5*sv[k][5] );\n\t\t}\n\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\tif ( j4 < bsize ) {\n\t\t\t\ts4 = j4;\n\t\t\t\tj4 = 0;\n\t\t\t} else {\n\t\t\t\ts4 = bsize;\n\t\t\t\tj4 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tdv5 = sv[k][5] - ( s4*sv[k][4] );\n\t\t\t\tov4[ k ] = ov5[k] + ( j4*sv[k][4] );\n\t\t\t}\n\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\ts3 = j3;\n\t\t\t\t\tj3 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts3 = bsize;\n\t\t\t\t\tj3 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tdv4[ k ] = sv[k][4] - ( s3*sv[k][3] );\n\t\t\t\t\tov3[ k ] = ov4[k] + ( j3*sv[k][3] );\n\t\t\t\t}\n\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\t\t\tviews[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\t\t\t\t\t\t\tybuf[ iv[1] ] = fcn( views, opts );\n\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedunary6d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-unary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-unary-tiling-block-size' );\nvar takeIndexed = require( '@stdlib/array-base-take-indexed' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var getStride = require( '@stdlib/ndarray-base-stride' );\n* var getOffset = require( '@stdlib/ndarray-base-offset' );\n* var getData = require( '@stdlib/ndarray-base-data-buffer' );\n* var numelDimension = require( '@stdlib/ndarray-base-numel-dimension' );\n* var gsum = require( '@stdlib/blas-ext-base-gsum' ).ndarray;\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* blockedunary7d( wrapper, [ x, y ], views, [ 12, 12, 12, 12, 12, 12, 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ 10.0, 26.0, 42.0 ] ] ] ] ] ] ]\n*/\nfunction blockedunary7d( fcn, arrays, views, strides, strategy, opts ) { // eslint-disable-line max-statements\n\tvar bsize;\n\tvar ybuf;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar ov4;\n\tvar ov5;\n\tvar ov6;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tov4 = zeros( N );\n\tov5 = zeros( N );\n\tov6 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tdv4 = zeros( N );\n\tdv5 = zeros( N );\n\tdv6 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\tif ( j6 < bsize ) {\n\t\t\ts6 = j6;\n\t\t\tj6 = 0;\n\t\t} else {\n\t\t\ts6 = bsize;\n\t\t\tj6 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov6[ k ] = ov[k] + ( j6*sv[k][6] );\n\t\t}\n\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\tif ( j5 < bsize ) {\n\t\t\t\ts5 = j5;\n\t\t\t\tj5 = 0;\n\t\t\t} else {\n\t\t\t\ts5 = bsize;\n\t\t\t\tj5 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tdv6 = sv[k][6] - ( s5*sv[k][5] );\n\t\t\t\tov5[ k ] = ov6[k] + ( j5*sv[k][5] );\n\t\t\t}\n\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\ts4 = j4;\n\t\t\t\t\tj4 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts4 = bsize;\n\t\t\t\t\tj4 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tdv5 = sv[k][5] - ( s4*sv[k][4] );\n\t\t\t\t\tov4[ k ] = ov5[k] + ( j4*sv[k][4] );\n\t\t\t\t}\n\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tdv4[ k ] = sv[k][4] - ( s3*sv[k][3] );\n\t\t\t\t\t\tov3[ k ] = ov4[k] + ( j3*sv[k][3] );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tviews[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tybuf[ iv[1] ] = fcn( views, opts );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv6 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedunary7d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-unary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-unary-tiling-block-size' );\nvar takeIndexed = require( '@stdlib/array-base-take-indexed' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var getStride = require( '@stdlib/ndarray-base-stride' );\n* var getOffset = require( '@stdlib/ndarray-base-offset' );\n* var getData = require( '@stdlib/ndarray-base-data-buffer' );\n* var numelDimension = require( '@stdlib/ndarray-base-numel-dimension' );\n* var gsum = require( '@stdlib/blas-ext-base-gsum' ).ndarray;\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* blockedunary8d( wrapper, [ x, y ], views, [ 12, 12, 12, 12, 12, 12, 12, 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ 10.0, 26.0, 42.0 ] ] ] ] ] ] ] ]\n*/\nfunction blockedunary8d( fcn, arrays, views, strides, strategy, opts ) { // eslint-disable-line max-statements, max-lines-per-function\n\tvar bsize;\n\tvar ybuf;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar dv7;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar ov4;\n\tvar ov5;\n\tvar ov6;\n\tvar ov7;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tov4 = zeros( N );\n\tov5 = zeros( N );\n\tov6 = zeros( N );\n\tov7 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tdv4 = zeros( N );\n\tdv5 = zeros( N );\n\tdv6 = zeros( N );\n\tdv7 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\tif ( j7 < bsize ) {\n\t\t\ts7 = j7;\n\t\t\tj7 = 0;\n\t\t} else {\n\t\t\ts7 = bsize;\n\t\t\tj7 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov7[ k ] = ov[k] + ( j7*sv[k][7] );\n\t\t}\n\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\tif ( j6 < bsize ) {\n\t\t\t\ts6 = j6;\n\t\t\t\tj6 = 0;\n\t\t\t} else {\n\t\t\t\ts6 = bsize;\n\t\t\t\tj6 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tdv7 = sv[k][7] - ( s6*sv[k][6] );\n\t\t\t\tov6[ k ] = ov7[k] + ( j6*sv[k][6] );\n\t\t\t}\n\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\ts5 = j5;\n\t\t\t\t\tj5 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts5 = bsize;\n\t\t\t\t\tj5 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tdv6 = sv[k][6] - ( s5*sv[k][5] );\n\t\t\t\t\tov5[ k ] = ov6[k] + ( j5*sv[k][5] );\n\t\t\t\t}\n\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tdv5 = sv[k][5] - ( s4*sv[k][4] );\n\t\t\t\t\t\tov4[ k ] = ov5[k] + ( j4*sv[k][4] );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\tdv4[ k ] = sv[k][4] - ( s3*sv[k][3] );\n\t\t\t\t\t\t\tov3[ k ] = ov4[k] + ( j3*sv[k][3] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t\t\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tviews[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tybuf[ iv[1] ] = fcn( views, opts );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv6 );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv7 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedunary8d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-unary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-unary-tiling-block-size' );\nvar takeIndexed = require( '@stdlib/array-base-take-indexed' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var getStride = require( '@stdlib/ndarray-base-stride' );\n* var getOffset = require( '@stdlib/ndarray-base-offset' );\n* var getData = require( '@stdlib/ndarray-base-data-buffer' );\n* var numelDimension = require( '@stdlib/ndarray-base-numel-dimension' );\n* var gsum = require( '@stdlib/blas-ext-base-gsum' ).ndarray;\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* blockedunary9d( wrapper, [ x, y ], views, [ 12, 12, 12, 12, 12, 12, 12, 12, 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ [ 10.0, 26.0, 42.0 ] ] ] ] ] ] ] ] ]\n*/\nfunction blockedunary9d( fcn, arrays, views, strides, strategy, opts ) { // eslint-disable-line max-statements, max-lines-per-function\n\tvar bsize;\n\tvar ybuf;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar dv7;\n\tvar dv8;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar ov4;\n\tvar ov5;\n\tvar ov6;\n\tvar ov7;\n\tvar ov8;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar s8;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar j8;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tov4 = zeros( N );\n\tov5 = zeros( N );\n\tov6 = zeros( N );\n\tov7 = zeros( N );\n\tov8 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tdv4 = zeros( N );\n\tdv5 = zeros( N );\n\tdv6 = zeros( N );\n\tdv7 = zeros( N );\n\tdv8 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j8 = sh[8]; j8 > 0; ) {\n\t\tif ( j8 < bsize ) {\n\t\t\ts8 = j8;\n\t\t\tj8 = 0;\n\t\t} else {\n\t\t\ts8 = bsize;\n\t\t\tj8 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov8[ k ] = ov[k] + ( j8*sv[k][8] );\n\t\t}\n\t\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\t\tif ( j7 < bsize ) {\n\t\t\t\ts7 = j7;\n\t\t\t\tj7 = 0;\n\t\t\t} else {\n\t\t\t\ts7 = bsize;\n\t\t\t\tj7 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tdv8 = sv[k][8] - ( s7*sv[k][7] );\n\t\t\t\tov7[ k ] = ov8[k] + ( j7*sv[k][7] );\n\t\t\t}\n\t\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\t\tif ( j6 < bsize ) {\n\t\t\t\t\ts6 = j6;\n\t\t\t\t\tj6 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts6 = bsize;\n\t\t\t\t\tj6 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tdv7 = sv[k][7] - ( s6*sv[k][6] );\n\t\t\t\t\tov6[ k ] = ov7[k] + ( j6*sv[k][6] );\n\t\t\t\t}\n\t\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\t\ts5 = j5;\n\t\t\t\t\t\tj5 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts5 = bsize;\n\t\t\t\t\t\tj5 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tdv6 = sv[k][6] - ( s5*sv[k][5] );\n\t\t\t\t\t\tov5[ k ] = ov6[k] + ( j5*sv[k][5] );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\tdv5 = sv[k][5] - ( s4*sv[k][4] );\n\t\t\t\t\t\t\tov4[ k ] = ov5[k] + ( j4*sv[k][4] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\tdv4[ k ] = sv[k][4] - ( s3*sv[k][3] );\n\t\t\t\t\t\t\t\tov3[ k ] = ov4[k] + ( j3*sv[k][3] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t\t\t\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t\t\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\t\t\t\t\t\tfor ( i8 = 0; i8 < s8; i8++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tviews[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tybuf[ iv[1] ] = fcn( views, opts );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv6 );\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv7 );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv8 );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedunary9d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-unary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-unary-tiling-block-size' );\nvar takeIndexed = require( '@stdlib/array-base-take-indexed' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var getStride = require( '@stdlib/ndarray-base-stride' );\n* var getOffset = require( '@stdlib/ndarray-base-offset' );\n* var getData = require( '@stdlib/ndarray-base-data-buffer' );\n* var numelDimension = require( '@stdlib/ndarray-base-numel-dimension' );\n* var gsum = require( '@stdlib/blas-ext-base-gsum' ).ndarray;\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* blockedunary10d( wrapper, [ x, y ], views, [ 12, 12, 12, 12, 12, 12, 12, 12, 12, 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ [ [ 10.0, 26.0, 42.0 ] ] ] ] ] ] ] ] ] ]\n*/\nfunction blockedunary10d( fcn, arrays, views, strides, strategy, opts ) { // eslint-disable-line max-statements, max-lines-per-function\n\tvar bsize;\n\tvar ybuf;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar dv7;\n\tvar dv8;\n\tvar dv9;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar ov4;\n\tvar ov5;\n\tvar ov6;\n\tvar ov7;\n\tvar ov8;\n\tvar ov9;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar s8;\n\tvar s9;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar i9;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar j8;\n\tvar j9;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tov4 = zeros( N );\n\tov5 = zeros( N );\n\tov6 = zeros( N );\n\tov7 = zeros( N );\n\tov8 = zeros( N );\n\tov9 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tdv4 = zeros( N );\n\tdv5 = zeros( N );\n\tdv6 = zeros( N );\n\tdv7 = zeros( N );\n\tdv8 = zeros( N );\n\tdv9 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j9 = sh[9]; j9 > 0; ) {\n\t\tif ( j9 < bsize ) {\n\t\t\ts9 = j9;\n\t\t\tj9 = 0;\n\t\t} else {\n\t\t\ts9 = bsize;\n\t\t\tj9 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov9[ k ] = ov[k] + ( j9*sv[k][9] );\n\t\t}\n\t\tfor ( j8 = sh[8]; j8 > 0; ) {\n\t\t\tif ( j8 < bsize ) {\n\t\t\t\ts8 = j8;\n\t\t\t\tj8 = 0;\n\t\t\t} else {\n\t\t\t\ts8 = bsize;\n\t\t\t\tj8 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tdv9 = sv[k][9] - ( s8*sv[k][8] );\n\t\t\t\tov8[ k ] = ov9[k] + ( j8*sv[k][8] );\n\t\t\t}\n\t\t\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\t\t\tif ( j7 < bsize ) {\n\t\t\t\t\ts7 = j7;\n\t\t\t\t\tj7 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts7 = bsize;\n\t\t\t\t\tj7 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tdv8 = sv[k][8] - ( s7*sv[k][7] );\n\t\t\t\t\tov7[ k ] = ov8[k] + ( j7*sv[k][7] );\n\t\t\t\t}\n\t\t\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\t\t\tif ( j6 < bsize ) {\n\t\t\t\t\t\ts6 = j6;\n\t\t\t\t\t\tj6 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts6 = bsize;\n\t\t\t\t\t\tj6 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tdv7 = sv[k][7] - ( s6*sv[k][6] );\n\t\t\t\t\t\tov6[ k ] = ov7[k] + ( j6*sv[k][6] );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\t\t\ts5 = j5;\n\t\t\t\t\t\t\tj5 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts5 = bsize;\n\t\t\t\t\t\t\tj5 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\tdv6 = sv[k][6] - ( s5*sv[k][5] );\n\t\t\t\t\t\t\tov5[ k ] = ov6[k] + ( j5*sv[k][5] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\tdv5 = sv[k][5] - ( s4*sv[k][4] );\n\t\t\t\t\t\t\t\tov4[ k ] = ov5[k] + ( j4*sv[k][4] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\tdv4[ k ] = sv[k][4] - ( s3*sv[k][3] );\n\t\t\t\t\t\t\t\t\tov3[ k ] = ov4[k] + ( j3*sv[k][3] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t\t\t\t\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t\t\t\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\t\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\t\t\t\t\t\t\tfor ( i9 = 0; i9 < s9; i9++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i8 = 0; i8 < s8; i8++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tviews[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tybuf[ iv[1] ] = fcn( views, opts );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv6 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv7 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv8 );\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv9 );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedunary10d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar without = require( '@stdlib/array-base-without' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over a list of specified dimensions in an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var accessors = require( '@stdlib/array-base-accessors' );\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var getStride = require( '@stdlib/ndarray-base-stride' );\n* var getOffset = require( '@stdlib/ndarray-base-offset' );\n* var getData = require( '@stdlib/ndarray-base-data-buffer' );\n* var numelDimension = require( '@stdlib/ndarray-base-numel-dimension' );\n* var gsum = require( '@stdlib/blas-ext-base-gsum' ).ndarray;\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] ) );\n* var ybuf = toAccessorArray( new Float64Array( [ 0.0 ] ) );\n*\n* // Define the array shapes:\n* var xsh = [ 2, 2 ];\n* var ysh = [];\n*\n* // Define the array strides:\n* var sx = [ 2, 1 ];\n* var sy = [ 0 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* unary0d( wrapper, [ x, y ], strategy, {} );\n*\n* var v = y.data.get( 0 );\n* // returns 10.0\n*/\nfunction unary0d( fcn, arrays, strategy, opts ) {\n\tvar y = arrays[ 1 ];\n\tarrays[ 0 ] = strategy( arrays[ 0 ] );\n\ty.accessors[ 1 ]( y.data, y.offset, fcn( without( arrays, 1 ), opts ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary0d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var accessors = require( '@stdlib/array-base-accessors' );\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var getStride = require( '@stdlib/ndarray-base-stride' );\n* var getOffset = require( '@stdlib/ndarray-base-offset' );\n* var getData = require( '@stdlib/ndarray-base-data-buffer' );\n* var numelDimension = require( '@stdlib/ndarray-base-numel-dimension' );\n* var gsum = require( '@stdlib/blas-ext-base-gsum' ).ndarray;\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( new Float64Array( [ 0.0, 0.0, 0.0 ] ) );\n*\n* // Define the array shapes:\n* var xsh = [ 3, 2, 2 ];\n* var ysh = [ 3 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 2, 1 ];\n* var sy = [ 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* unary1d( wrapper, [ x, y ], views, [ 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ 10.0, 26.0, 42.0 ]\n*/\nfunction unary1d( fcn, arrays, views, strides, strategy, opts ) {\n\tvar ybuf;\n\tvar set;\n\tvar dv0;\n\tvar sh;\n\tvar S0;\n\tvar iv;\n\tvar i0;\n\tvar y;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Extract loop variables: dimensions and loop offset (pointer) increments...\n\tS0 = sh[ 0 ];\n\tdv0 = [ strides[0] ];\n\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\tdv0.push( arrays[i].strides[0] );\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\tsetViewOffsets( views, iv );\n\t\tviews[ 0 ] = strategy( views[ 0 ] );\n\t\tset( ybuf, iv[1], fcn( views, opts ) );\n\t\tincrementOffsets( iv, dv0 );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary1d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isRowMajor = require( '@stdlib/ndarray-base-assert-is-row-major-string' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var accessors = require( '@stdlib/array-base-accessors' );\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var getStride = require( '@stdlib/ndarray-base-stride' );\n* var getOffset = require( '@stdlib/ndarray-base-offset' );\n* var getData = require( '@stdlib/ndarray-base-data-buffer' );\n* var numelDimension = require( '@stdlib/ndarray-base-numel-dimension' );\n* var gsum = require( '@stdlib/blas-ext-base-gsum' ).ndarray;\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( new Float64Array( [ 0.0, 0.0, 0.0 ] ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 3, 2, 2 ];\n* var ysh = [ 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* unary2d( wrapper, [ x, y ], views, [ 12, 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ 10.0, 26.0, 42.0 ] ]\n*/\nfunction unary2d( fcn, arrays, views, strides, strategy, opts ) {\n\tvar ybuf;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar y;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor( y.order ) ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 1 ];\n\t\tS1 = sh[ 0 ];\n\t\tdv0 = [ strides[1] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[0] - ( S0*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[1] );\n\t\t\tdv1.push( sv[0] - ( S0*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\tsetViewOffsets( views, iv );\n\t\t\tviews[ 0 ] = strategy( views[ 0 ] );\n\t\t\tset( ybuf, iv[1], fcn( views, opts ) );\n\t\t\tincrementOffsets( iv, dv0 );\n\t\t}\n\t\tincrementOffsets( iv, dv1 );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary2d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isRowMajor = require( '@stdlib/ndarray-base-assert-is-row-major-string' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var accessors = require( '@stdlib/array-base-accessors' );\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var getStride = require( '@stdlib/ndarray-base-stride' );\n* var getOffset = require( '@stdlib/ndarray-base-offset' );\n* var getData = require( '@stdlib/ndarray-base-data-buffer' );\n* var numelDimension = require( '@stdlib/ndarray-base-numel-dimension' );\n* var gsum = require( '@stdlib/blas-ext-base-gsum' ).ndarray;\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( new Float64Array( [ 0.0, 0.0, 0.0 ] ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* unary3d( wrapper, [ x, y ], views, [ 12, 12, 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ 10.0, 26.0, 42.0 ] ] ]\n*/\nfunction unary3d( fcn, arrays, views, strides, strategy, opts ) {\n\tvar ybuf;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar y;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor( y.order ) ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 2 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 0 ];\n\t\tdv0 = [ strides[2] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[2] ) ];\n\t\tdv2 = [ strides[0] - ( S1*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[2] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[2] ) );\n\t\t\tdv2.push( sv[0] - ( S1*sv[1] ) );\n\t\t}\n\t} else {\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\tviews[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\tset( ybuf, iv[ 1 ], fcn( views, opts ) );\n\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv1 );\n\t\t}\n\t\tincrementOffsets( iv, dv2 );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary3d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isRowMajor = require( '@stdlib/ndarray-base-assert-is-row-major-string' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var accessors = require( '@stdlib/array-base-accessors' );\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var getStride = require( '@stdlib/ndarray-base-stride' );\n* var getOffset = require( '@stdlib/ndarray-base-offset' );\n* var getData = require( '@stdlib/ndarray-base-data-buffer' );\n* var numelDimension = require( '@stdlib/ndarray-base-numel-dimension' );\n* var gsum = require( '@stdlib/blas-ext-base-gsum' ).ndarray;\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( new Float64Array( [ 0.0, 0.0, 0.0 ] ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* unary4d( wrapper, [ x, y ], views, [ 12, 12, 12, 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ 10.0, 26.0, 42.0 ] ] ] ]\n*/\nfunction unary4d( fcn, arrays, views, strides, strategy, opts ) {\n\tvar ybuf;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar y;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor( y.order ) ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 3 ];\n\t\tS1 = sh[ 2 ];\n\t\tS2 = sh[ 1 ];\n\t\tS3 = sh[ 0 ];\n\t\tdv0 = [ strides[3] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[2] - ( S0*strides[3] ) ];\n\t\tdv2 = [ strides[1] - ( S1*strides[2] ) ];\n\t\tdv3 = [ strides[0] - ( S2*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[3] );\n\t\t\tdv1.push( sv[2] - ( S0*sv[3] ) );\n\t\t\tdv2.push( sv[1] - ( S1*sv[2] ) );\n\t\t\tdv3.push( sv[0] - ( S2*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2]) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\tviews[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\tset( ybuf, iv[ 1 ], fcn( views, opts ) );\n\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv2 );\n\t\t}\n\t\tincrementOffsets( iv, dv3 );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary4d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isRowMajor = require( '@stdlib/ndarray-base-assert-is-row-major-string' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var accessors = require( '@stdlib/array-base-accessors' );\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var getStride = require( '@stdlib/ndarray-base-stride' );\n* var getOffset = require( '@stdlib/ndarray-base-offset' );\n* var getData = require( '@stdlib/ndarray-base-data-buffer' );\n* var numelDimension = require( '@stdlib/ndarray-base-numel-dimension' );\n* var gsum = require( '@stdlib/blas-ext-base-gsum' ).ndarray;\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( new Float64Array( [ 0.0, 0.0, 0.0 ] ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* unary5d( wrapper, [ x, y ], views, [ 12, 12, 12, 12, 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ 10.0, 26.0, 42.0 ] ] ] ] ]\n*/\nfunction unary5d( fcn, arrays, views, strides, strategy, opts ) {\n\tvar ybuf;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar y;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor( y.order ) ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 4 ];\n\t\tS1 = sh[ 3 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 1 ];\n\t\tS4 = sh[ 0 ];\n\t\tdv0 = [ strides[4] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[3] - ( S0*strides[4] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[3] ) ];\n\t\tdv3 = [ strides[1] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[0] - ( S3*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[4] );\n\t\t\tdv1.push( sv[3] - ( S0*sv[4] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[3] ) );\n\t\t\tdv3.push( sv[1] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[0] - ( S3*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[3] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[3] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\tviews[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\tset( ybuf, iv[ 1 ], fcn( views, opts ) );\n\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv3 );\n\t\t}\n\t\tincrementOffsets( iv, dv4 );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary5d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nvar isRowMajor = require( '@stdlib/ndarray-base-assert-is-row-major-string' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var accessors = require( '@stdlib/array-base-accessors' );\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var getStride = require( '@stdlib/ndarray-base-stride' );\n* var getOffset = require( '@stdlib/ndarray-base-offset' );\n* var getData = require( '@stdlib/ndarray-base-data-buffer' );\n* var numelDimension = require( '@stdlib/ndarray-base-numel-dimension' );\n* var gsum = require( '@stdlib/blas-ext-base-gsum' ).ndarray;\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( new Float64Array( [ 0.0, 0.0, 0.0 ] ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* unary6d( wrapper, [ x, y ], views, [ 12, 12, 12, 12, 12, 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ 10.0, 26.0, 42.0 ] ] ] ] ] ]\n*/\nfunction unary6d( fcn, arrays, views, strides, strategy, opts ) {\n\tvar ybuf;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar y;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor( y.order ) ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 5 ];\n\t\tS1 = sh[ 4 ];\n\t\tS2 = sh[ 3 ];\n\t\tS3 = sh[ 2 ];\n\t\tS4 = sh[ 1 ];\n\t\tS5 = sh[ 0 ];\n\t\tdv0 = [ strides[5] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[4] - ( S0*strides[5] ) ];\n\t\tdv2 = [ strides[3] - ( S1*strides[4] ) ];\n\t\tdv3 = [ strides[2] - ( S2*strides[3] ) ];\n\t\tdv4 = [ strides[1] - ( S3*strides[2] ) ];\n\t\tdv5 = [ strides[0] - ( S4*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[5] );\n\t\t\tdv1.push( sv[4] - ( S0*sv[5] ) );\n\t\t\tdv2.push( sv[3] - ( S1*sv[4] ) );\n\t\t\tdv3.push( sv[2] - ( S2*sv[3] ) );\n\t\t\tdv4.push( sv[1] - ( S3*sv[2] ) );\n\t\t\tdv5.push( sv[0] - ( S4*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[3] ) ];\n\t\tdv5 = [ strides[5] - ( S4*strides[4] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[3] ) );\n\t\t\tdv5.push( sv[5] - ( S4*sv[4] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\tviews[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\tset( ybuf, iv[ 1 ], fcn( views, opts ) );\n\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv4 );\n\t\t}\n\t\tincrementOffsets( iv, dv5 );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary6d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nvar isRowMajor = require( '@stdlib/ndarray-base-assert-is-row-major-string' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var accessors = require( '@stdlib/array-base-accessors' );\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var getStride = require( '@stdlib/ndarray-base-stride' );\n* var getOffset = require( '@stdlib/ndarray-base-offset' );\n* var getData = require( '@stdlib/ndarray-base-data-buffer' );\n* var numelDimension = require( '@stdlib/ndarray-base-numel-dimension' );\n* var gsum = require( '@stdlib/blas-ext-base-gsum' ).ndarray;\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( new Float64Array( [ 0.0, 0.0, 0.0 ] ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* unary7d( wrapper, [ x, y ], views, [ 12, 12, 12, 12, 12, 12, 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ 10.0, 26.0, 42.0 ] ] ] ] ] ] ]\n*/\nfunction unary7d( fcn, arrays, views, strides, strategy, opts ) {\n\tvar ybuf;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar y;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor( y.order ) ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 6 ];\n\t\tS1 = sh[ 5 ];\n\t\tS2 = sh[ 4 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 2 ];\n\t\tS5 = sh[ 1 ];\n\t\tS6 = sh[ 0 ];\n\t\tdv0 = [ strides[6] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[5] - ( S0*strides[6] ) ];\n\t\tdv2 = [ strides[4] - ( S1*strides[5] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[4] ) ];\n\t\tdv4 = [ strides[2] - ( S3*strides[3] ) ];\n\t\tdv5 = [ strides[1] - ( S4*strides[2] ) ];\n\t\tdv6 = [ strides[0] - ( S5*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[6] );\n\t\t\tdv1.push( sv[5] - ( S0*sv[6] ) );\n\t\t\tdv2.push( sv[4] - ( S1*sv[5] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[4] ) );\n\t\t\tdv4.push( sv[2] - ( S3*sv[3] ) );\n\t\t\tdv5.push( sv[1] - ( S4*sv[2] ) );\n\t\t\tdv6.push( sv[0] - ( S5*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[3] ) ];\n\t\tdv5 = [ strides[5] - ( S4*strides[4] ) ];\n\t\tdv6 = [ strides[6] - ( S5*strides[5] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[3] ) );\n\t\t\tdv5.push( sv[5] - ( S4*sv[4] ) );\n\t\t\tdv6.push( sv[6] - ( S5*sv[5] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\tviews[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\t\tset( ybuf, iv[ 1 ], fcn( views, opts ) );\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv5 );\n\t\t}\n\t\tincrementOffsets( iv, dv6 );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary7d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nvar isRowMajor = require( '@stdlib/ndarray-base-assert-is-row-major-string' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var accessors = require( '@stdlib/array-base-accessors' );\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var getStride = require( '@stdlib/ndarray-base-stride' );\n* var getOffset = require( '@stdlib/ndarray-base-offset' );\n* var getData = require( '@stdlib/ndarray-base-data-buffer' );\n* var numelDimension = require( '@stdlib/ndarray-base-numel-dimension' );\n* var gsum = require( '@stdlib/blas-ext-base-gsum' ).ndarray;\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( new Float64Array( [ 0.0, 0.0, 0.0 ] ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* unary8d( wrapper, [ x, y ], views, [ 12, 12, 12, 12, 12, 12, 12, 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ 10.0, 26.0, 42.0 ] ] ] ] ] ] ] ]\n*/\nfunction unary8d( fcn, arrays, views, strides, strategy, opts ) { // eslint-disable-line max-statements\n\tvar ybuf;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar dv7;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar y;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor( y.order ) ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 7 ];\n\t\tS1 = sh[ 6 ];\n\t\tS2 = sh[ 5 ];\n\t\tS3 = sh[ 4 ];\n\t\tS4 = sh[ 3 ];\n\t\tS5 = sh[ 2 ];\n\t\tS6 = sh[ 1 ];\n\t\tS7 = sh[ 0 ];\n\t\tdv0 = [ strides[7] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[6] - ( S0*strides[7] ) ];\n\t\tdv2 = [ strides[5] - ( S1*strides[6] ) ];\n\t\tdv3 = [ strides[4] - ( S2*strides[5] ) ];\n\t\tdv4 = [ strides[3] - ( S3*strides[4] ) ];\n\t\tdv5 = [ strides[2] - ( S4*strides[3] ) ];\n\t\tdv6 = [ strides[1] - ( S5*strides[2] ) ];\n\t\tdv7 = [ strides[0] - ( S6*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[7] );\n\t\t\tdv1.push( sv[6] - ( S0*sv[7] ) );\n\t\t\tdv2.push( sv[5] - ( S1*sv[6] ) );\n\t\t\tdv3.push( sv[4] - ( S2*sv[5] ) );\n\t\t\tdv4.push( sv[3] - ( S3*sv[4] ) );\n\t\t\tdv5.push( sv[2] - ( S4*sv[3] ) );\n\t\t\tdv6.push( sv[1] - ( S5*sv[2] ) );\n\t\t\tdv7.push( sv[0] - ( S6*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[3] ) ];\n\t\tdv5 = [ strides[5] - ( S4*strides[4] ) ];\n\t\tdv6 = [ strides[6] - ( S5*strides[5] ) ];\n\t\tdv7 = [ strides[7] - ( S6*strides[6] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[3] ) );\n\t\t\tdv5.push( sv[5] - ( S4*sv[4] ) );\n\t\t\tdv6.push( sv[6] - ( S5*sv[5] ) );\n\t\t\tdv7.push( sv[7] - ( S6*sv[6] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\tviews[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\t\t\tset( ybuf, iv[ 1 ], fcn( views, opts ) );\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv6 );\n\t\t}\n\t\tincrementOffsets( iv, dv7 );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary8d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nvar isRowMajor = require( '@stdlib/ndarray-base-assert-is-row-major-string' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var accessors = require( '@stdlib/array-base-accessors' );\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var getStride = require( '@stdlib/ndarray-base-stride' );\n* var getOffset = require( '@stdlib/ndarray-base-offset' );\n* var getData = require( '@stdlib/ndarray-base-data-buffer' );\n* var numelDimension = require( '@stdlib/ndarray-base-numel-dimension' );\n* var gsum = require( '@stdlib/blas-ext-base-gsum' ).ndarray;\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( new Float64Array( [ 0.0, 0.0, 0.0 ] ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* unary9d( wrapper, [ x, y ], views, [ 12, 12, 12, 12, 12, 12, 12, 12, 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ [ 10.0, 26.0, 42.0 ] ] ] ] ] ] ] ] ]\n*/\nfunction unary9d( fcn, arrays, views, strides, strategy, opts ) { // eslint-disable-line max-statements\n\tvar ybuf;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar dv7;\n\tvar dv8;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar S8;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar y;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor( y.order ) ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 8 ];\n\t\tS1 = sh[ 7 ];\n\t\tS2 = sh[ 6 ];\n\t\tS3 = sh[ 5 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 3 ];\n\t\tS6 = sh[ 2 ];\n\t\tS7 = sh[ 1 ];\n\t\tS8 = sh[ 0 ];\n\t\tdv0 = [ strides[8] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[7] - ( S0*strides[8] ) ];\n\t\tdv2 = [ strides[6] - ( S1*strides[7] ) ];\n\t\tdv3 = [ strides[5] - ( S2*strides[6] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[5] ) ];\n\t\tdv5 = [ strides[3] - ( S4*strides[4] ) ];\n\t\tdv6 = [ strides[2] - ( S5*strides[3] ) ];\n\t\tdv7 = [ strides[1] - ( S6*strides[2] ) ];\n\t\tdv8 = [ strides[0] - ( S7*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[8] );\n\t\t\tdv1.push( sv[7] - ( S0*sv[8] ) );\n\t\t\tdv2.push( sv[6] - ( S1*sv[7] ) );\n\t\t\tdv3.push( sv[5] - ( S2*sv[6] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[5] ) );\n\t\t\tdv5.push( sv[3] - ( S4*sv[4] ) );\n\t\t\tdv6.push( sv[2] - ( S5*sv[3] ) );\n\t\t\tdv7.push( sv[1] - ( S6*sv[2] ) );\n\t\t\tdv8.push( sv[0] - ( S7*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tS8 = sh[ 8 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[3] ) ];\n\t\tdv5 = [ strides[5] - ( S4*strides[4] ) ];\n\t\tdv6 = [ strides[6] - ( S5*strides[5] ) ];\n\t\tdv7 = [ strides[7] - ( S6*strides[6] ) ];\n\t\tdv8 = [ strides[8] - ( S7*strides[7] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[3] ) );\n\t\t\tdv5.push( sv[5] - ( S4*sv[4] ) );\n\t\t\tdv6.push( sv[6] - ( S5*sv[5] ) );\n\t\t\tdv7.push( sv[7] - ( S6*sv[6] ) );\n\t\t\tdv8.push( sv[8] - ( S7*sv[7] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i8 = 0; i8 < S8; i8++ ) {\n\t\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\tviews[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\t\t\t\tset( ybuf, iv[ 1 ], fcn( views, opts ) );\n\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv6 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv7 );\n\t\t}\n\t\tincrementOffsets( iv, dv8 );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary9d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nvar isRowMajor = require( '@stdlib/ndarray-base-assert-is-row-major-string' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var accessors = require( '@stdlib/array-base-accessors' );\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var getStride = require( '@stdlib/ndarray-base-stride' );\n* var getOffset = require( '@stdlib/ndarray-base-offset' );\n* var getData = require( '@stdlib/ndarray-base-data-buffer' );\n* var numelDimension = require( '@stdlib/ndarray-base-numel-dimension' );\n* var gsum = require( '@stdlib/blas-ext-base-gsum' ).ndarray;\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( new Float64Array( [ 0.0, 0.0, 0.0 ] ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* unary10d( wrapper, [ x, y ], views, [ 12, 12, 12, 12, 12, 12, 12, 12, 12, 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ [ [ 10.0, 26.0, 42.0 ] ] ] ] ] ] ] ] ] ]\n*/\nfunction unary10d( fcn, arrays, views, strides, strategy, opts ) { // eslint-disable-line max-statements\n\tvar ybuf;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar dv7;\n\tvar dv8;\n\tvar dv9;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar S8;\n\tvar S9;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar i9;\n\tvar y;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor( y.order ) ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 9 ];\n\t\tS1 = sh[ 8 ];\n\t\tS2 = sh[ 7 ];\n\t\tS3 = sh[ 6 ];\n\t\tS4 = sh[ 5 ];\n\t\tS5 = sh[ 4 ];\n\t\tS6 = sh[ 3 ];\n\t\tS7 = sh[ 2 ];\n\t\tS8 = sh[ 1 ];\n\t\tS9 = sh[ 0 ];\n\t\tdv0 = [ strides[9] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[8] - ( S0*strides[9] ) ];\n\t\tdv2 = [ strides[7] - ( S1*strides[8] ) ];\n\t\tdv3 = [ strides[6] - ( S2*strides[7] ) ];\n\t\tdv4 = [ strides[5] - ( S3*strides[6] ) ];\n\t\tdv5 = [ strides[4] - ( S4*strides[5] ) ];\n\t\tdv6 = [ strides[3] - ( S5*strides[4] ) ];\n\t\tdv7 = [ strides[2] - ( S6*strides[3] ) ];\n\t\tdv8 = [ strides[1] - ( S7*strides[2] ) ];\n\t\tdv9 = [ strides[0] - ( S8*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[9] );\n\t\t\tdv1.push( sv[8] - ( S0*sv[9] ) );\n\t\t\tdv2.push( sv[7] - ( S1*sv[8] ) );\n\t\t\tdv3.push( sv[6] - ( S2*sv[7] ) );\n\t\t\tdv4.push( sv[5] - ( S3*sv[6] ) );\n\t\t\tdv5.push( sv[4] - ( S4*sv[5] ) );\n\t\t\tdv6.push( sv[3] - ( S5*sv[4] ) );\n\t\t\tdv7.push( sv[2] - ( S6*sv[3] ) );\n\t\t\tdv8.push( sv[1] - ( S7*sv[2] ) );\n\t\t\tdv9.push( sv[0] - ( S8*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tS8 = sh[ 8 ];\n\t\tS9 = sh[ 9 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[3] ) ];\n\t\tdv5 = [ strides[5] - ( S4*strides[4] ) ];\n\t\tdv6 = [ strides[6] - ( S5*strides[5] ) ];\n\t\tdv7 = [ strides[7] - ( S6*strides[6] ) ];\n\t\tdv8 = [ strides[8] - ( S7*strides[7] ) ];\n\t\tdv9 = [ strides[9] - ( S8*strides[8] ) ];  // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[3] ) );\n\t\t\tdv5.push( sv[5] - ( S4*sv[4] ) );\n\t\t\tdv6.push( sv[6] - ( S5*sv[5] ) );\n\t\t\tdv7.push( sv[7] - ( S6*sv[6] ) );\n\t\t\tdv8.push( sv[8] - ( S7*sv[7] ) );\n\t\t\tdv8.push( sv[8] - ( S8*sv[8] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i9 = 0; i9 < S9; i9++ ) {\n\t\tfor ( i8 = 0; i8 < S8; i8++ ) {\n\t\t\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\t\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\tviews[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\t\t\t\t\tset( ybuf, iv[ 1 ], fcn( views, opts ) );\n\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv6 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv7 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv8 );\n\t\t}\n\t\tincrementOffsets( iv, dv9 );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary10d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar numel = require( '@stdlib/ndarray-base-numel' );\nvar vind2bind = require( '@stdlib/ndarray-base-vind2bind' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\n\n\n// VARIABLES //\n\nvar MODE = 'throw';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var accessors = require( '@stdlib/array-base-accessors' );\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var getStride = require( '@stdlib/ndarray-base-stride' );\n* var getOffset = require( '@stdlib/ndarray-base-offset' );\n* var getData = require( '@stdlib/ndarray-base-data-buffer' );\n* var numelDimension = require( '@stdlib/ndarray-base-numel-dimension' );\n* var gsum = require( '@stdlib/blas-ext-base-gsum' ).ndarray;\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( new Float64Array( [ 0.0, 0.0, 0.0 ] ) );\n*\n* // Define the array shapes:\n* var xsh = [ 3, 2, 2 ];\n* var ysh = [ 3 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 2, 1 ];\n* var sy = [ 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* unarynd( wrapper, [ x, y ], views, [ 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ 10.0, 26.0, 42.0 ]\n*/\nfunction unarynd( fcn, arrays, views, strides, strategy, opts ) {\n\tvar ybuf;\n\tvar len;\n\tvar set;\n\tvar sh;\n\tvar iv;\n\tvar io;\n\tvar N;\n\tvar v;\n\tvar y;\n\tvar i;\n\tvar j;\n\n\tN = arrays.length;\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Compute the total number of elements over which to iterate:\n\tlen = numel( sh );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Iterate based on the linear **view** index, regardless as to how the data is stored in memory...\n\tio = zeros( N );\n\tfor ( i = 0; i < len; i++ ) {\n\t\tfor ( j = 0; j < N; j++ ) {\n\t\t\tv = arrays[ j ];\n\t\t\tio[ j ] = vind2bind( sh, v.strides, iv[ j ], v.order, i, MODE );\n\t\t}\n\t\tsetViewOffsets( views, io );\n\t\tviews[ 0 ] = strategy( views[ 0 ] );\n\t\tset( ybuf, io[1], fcn( views, opts ) );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unarynd;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar without = require( '@stdlib/array-base-without' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over a list of specified dimensions in an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var getStride = require( '@stdlib/ndarray-base-stride' );\n* var getOffset = require( '@stdlib/ndarray-base-offset' );\n* var getData = require( '@stdlib/ndarray-base-data-buffer' );\n* var numelDimension = require( '@stdlib/ndarray-base-numel-dimension' );\n* var gsum = require( '@stdlib/blas-ext-base-gsum' ).ndarray;\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var ybuf = new Float64Array( [ 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 2, 2 ];\n* var ysh = [];\n*\n* // Define the array strides:\n* var sx = [ 2, 1 ];\n* var sy = [ 0 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* unary0d( wrapper, [ x, y ], strategy, {} );\n*\n* var v = y.data;\n* // returns <Float64Array>[ 10.0 ]\n*/\nfunction unary0d( fcn, arrays, strategy, opts ) {\n\tarrays[ 0 ] = strategy( arrays[ 0 ] );\n\tarrays[ 1 ].data[ arrays[ 1 ].offset ] = fcn( without( arrays, 1 ), opts );\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary0d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var getStride = require( '@stdlib/ndarray-base-stride' );\n* var getOffset = require( '@stdlib/ndarray-base-offset' );\n* var getData = require( '@stdlib/ndarray-base-data-buffer' );\n* var numelDimension = require( '@stdlib/ndarray-base-numel-dimension' );\n* var gsum = require( '@stdlib/blas-ext-base-gsum' ).ndarray;\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 3, 2, 2 ];\n* var ysh = [ 3 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 2, 1 ];\n* var sy = [ 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* unary1d( wrapper, [ x, y ], views, [ 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ 10.0, 26.0, 42.0 ]\n*/\nfunction unary1d( fcn, arrays, views, strides, strategy, opts ) {\n\tvar ybuf;\n\tvar dv0;\n\tvar sh;\n\tvar S0;\n\tvar iv;\n\tvar i0;\n\tvar y;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tS0 = sh[ 0 ];\n\tdv0 = [ strides[0] ];\n\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\tdv0.push( arrays[i].strides[0] );\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\tsetViewOffsets( views, iv );\n\t\tviews[ 0 ] = strategy( views[ 0 ] );\n\t\tybuf[ iv[1] ] = fcn( views, opts );\n\t\tincrementOffsets( iv, dv0 );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary1d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isRowMajor = require( '@stdlib/ndarray-base-assert-is-row-major-string' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var getStride = require( '@stdlib/ndarray-base-stride' );\n* var getOffset = require( '@stdlib/ndarray-base-offset' );\n* var getData = require( '@stdlib/ndarray-base-data-buffer' );\n* var numelDimension = require( '@stdlib/ndarray-base-numel-dimension' );\n* var gsum = require( '@stdlib/blas-ext-base-gsum' ).ndarray;\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 3, 2, 2 ];\n* var ysh = [ 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* unary2d( wrapper, [ x, y ], views, [ 12, 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ 10.0, 26.0, 42.0 ] ]\n*/\nfunction unary2d( fcn, arrays, views, strides, strategy, opts ) {\n\tvar ybuf;\n\tvar dv0;\n\tvar dv1;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar y;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor( y.order ) ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 1 ];\n\t\tS1 = sh[ 0 ];\n\t\tdv0 = [ strides[1] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[0] - ( S0*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[1] );\n\t\t\tdv1.push( sv[0] - ( S0*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\tsetViewOffsets( views, iv );\n\t\t\tviews[ 0 ] = strategy( views[ 0 ] );\n\t\t\tybuf[ iv[1] ] = fcn( views, opts );\n\t\t\tincrementOffsets( iv, dv0 );\n\t\t}\n\t\tincrementOffsets( iv, dv1 );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary2d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isRowMajor = require( '@stdlib/ndarray-base-assert-is-row-major-string' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var getStride = require( '@stdlib/ndarray-base-stride' );\n* var getOffset = require( '@stdlib/ndarray-base-offset' );\n* var getData = require( '@stdlib/ndarray-base-data-buffer' );\n* var numelDimension = require( '@stdlib/ndarray-base-numel-dimension' );\n* var gsum = require( '@stdlib/blas-ext-base-gsum' ).ndarray;\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* unary3d( wrapper, [ x, y ], views, [ 12, 12, 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ 10.0, 26.0, 42.0 ] ] ]\n*/\nfunction unary3d( fcn, arrays, views, strides, strategy, opts ) {\n\tvar ybuf;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar y;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor( y.order ) ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 2 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 0 ];\n\t\tdv0 = [ strides[2] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[2] ) ];\n\t\tdv2 = [ strides[0] - ( S1*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[2] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[2] ) );\n\t\t\tdv2.push( sv[0] - ( S1*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\tviews[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\tybuf[ iv[1] ] = fcn( views, opts );\n\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv1 );\n\t\t}\n\t\tincrementOffsets( iv, dv2 );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary3d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isRowMajor = require( '@stdlib/ndarray-base-assert-is-row-major-string' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var getStride = require( '@stdlib/ndarray-base-stride' );\n* var getOffset = require( '@stdlib/ndarray-base-offset' );\n* var getData = require( '@stdlib/ndarray-base-data-buffer' );\n* var numelDimension = require( '@stdlib/ndarray-base-numel-dimension' );\n* var gsum = require( '@stdlib/blas-ext-base-gsum' ).ndarray;\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* unary4d( wrapper, [ x, y ], views, [ 12, 12, 12, 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ 10.0, 26.0, 42.0 ] ] ] ]\n*/\nfunction unary4d( fcn, arrays, views, strides, strategy, opts ) {\n\tvar ybuf;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar y;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor( y.order ) ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 3 ];\n\t\tS1 = sh[ 2 ];\n\t\tS2 = sh[ 1 ];\n\t\tS3 = sh[ 0 ];\n\t\tdv0 = [ strides[3] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[2] - ( S0*strides[3] ) ];\n\t\tdv2 = [ strides[1] - ( S1*strides[2] ) ];\n\t\tdv3 = [ strides[0] - ( S2*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[3] );\n\t\t\tdv1.push( sv[2] - ( S0*sv[3] ) );\n\t\t\tdv2.push( sv[1] - ( S1*sv[2] ) );\n\t\t\tdv3.push( sv[0] - ( S2*sv[1]) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\tviews[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\tybuf[ iv[1] ] = fcn( views, opts );\n\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv2 );\n\t\t}\n\t\tincrementOffsets( iv, dv3 );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary4d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isRowMajor = require( '@stdlib/ndarray-base-assert-is-row-major-string' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var getStride = require( '@stdlib/ndarray-base-stride' );\n* var getOffset = require( '@stdlib/ndarray-base-offset' );\n* var getData = require( '@stdlib/ndarray-base-data-buffer' );\n* var numelDimension = require( '@stdlib/ndarray-base-numel-dimension' );\n* var gsum = require( '@stdlib/blas-ext-base-gsum' ).ndarray;\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* unary5d( wrapper, [ x, y ], views, [ 12, 12, 12, 12, 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ 10.0, 26.0, 42.0 ] ] ] ] ]\n*/\nfunction unary5d( fcn, arrays, views, strides, strategy, opts ) {\n\tvar ybuf;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar y;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor( y.order ) ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 4 ];\n\t\tS1 = sh[ 3 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 1 ];\n\t\tS4 = sh[ 0 ];\n\t\tdv0 = [ strides[4] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[3] - ( S0*strides[4] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[3] ) ];\n\t\tdv3 = [ strides[1] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[0] - ( S3*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[4] );\n\t\t\tdv1.push( sv[3] - ( S0*sv[4] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[3] ) );\n\t\t\tdv3.push( sv[1] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[0] - ( S3*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[3] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[3] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\tviews[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\tybuf[ iv[1] ] = fcn( views, opts );\n\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv3 );\n\t\t}\n\t\tincrementOffsets( iv, dv4 );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary5d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nvar isRowMajor = require( '@stdlib/ndarray-base-assert-is-row-major-string' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var getStride = require( '@stdlib/ndarray-base-stride' );\n* var getOffset = require( '@stdlib/ndarray-base-offset' );\n* var getData = require( '@stdlib/ndarray-base-data-buffer' );\n* var numelDimension = require( '@stdlib/ndarray-base-numel-dimension' );\n* var gsum = require( '@stdlib/blas-ext-base-gsum' ).ndarray;\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* unary6d( wrapper, [ x, y ], views, [ 12, 12, 12, 12, 12, 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ 10.0, 26.0, 42.0 ] ] ] ] ] ]\n*/\nfunction unary6d( fcn, arrays, views, strides, strategy, opts ) {\n\tvar ybuf;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar y;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor( y.order ) ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 5 ];\n\t\tS1 = sh[ 4 ];\n\t\tS2 = sh[ 3 ];\n\t\tS3 = sh[ 2 ];\n\t\tS4 = sh[ 1 ];\n\t\tS5 = sh[ 0 ];\n\t\tdv0 = [ strides[5] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[4] - ( S0*strides[5] ) ];\n\t\tdv2 = [ strides[3] - ( S1*strides[4] ) ];\n\t\tdv3 = [ strides[2] - ( S2*strides[3] ) ];\n\t\tdv4 = [ strides[1] - ( S3*strides[2] ) ];\n\t\tdv5 = [ strides[0] - ( S4*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[5] );\n\t\t\tdv1.push( sv[4] - ( S0*sv[5] ) );\n\t\t\tdv2.push( sv[3] - ( S1*sv[4] ) );\n\t\t\tdv3.push( sv[2] - ( S2*sv[3] ) );\n\t\t\tdv4.push( sv[1] - ( S3*sv[2] ) );\n\t\t\tdv5.push( sv[0] - ( S4*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[3] ) ];\n\t\tdv5 = [ strides[5] - ( S4*strides[4] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[3] ) );\n\t\t\tdv5.push( sv[5] - ( S4*sv[4] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\tviews[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\tybuf[ iv[1] ] = fcn( views, opts );\n\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv4 );\n\t\t}\n\t\tincrementOffsets( iv, dv5 );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary6d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nvar isRowMajor = require( '@stdlib/ndarray-base-assert-is-row-major-string' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var getStride = require( '@stdlib/ndarray-base-stride' );\n* var getOffset = require( '@stdlib/ndarray-base-offset' );\n* var getData = require( '@stdlib/ndarray-base-data-buffer' );\n* var numelDimension = require( '@stdlib/ndarray-base-numel-dimension' );\n* var gsum = require( '@stdlib/blas-ext-base-gsum' ).ndarray;\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* unary7d( wrapper, [ x, y ], views, [ 12, 12, 12, 12, 12, 12, 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ 10.0, 26.0, 42.0 ] ] ] ] ] ] ]\n*/\nfunction unary7d( fcn, arrays, views, strides, strategy, opts ) {\n\tvar ybuf;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar y;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor( y.order ) ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 6 ];\n\t\tS1 = sh[ 5 ];\n\t\tS2 = sh[ 4 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 2 ];\n\t\tS5 = sh[ 1 ];\n\t\tS6 = sh[ 0 ];\n\t\tdv0 = [ strides[6] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[5] - ( S0*strides[6] ) ];\n\t\tdv2 = [ strides[4] - ( S1*strides[5] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[4] ) ];\n\t\tdv4 = [ strides[2] - ( S3*strides[3] ) ];\n\t\tdv5 = [ strides[1] - ( S4*strides[2] ) ];\n\t\tdv6 = [ strides[0] - ( S5*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[6] );\n\t\t\tdv1.push( sv[5] - ( S0*sv[6] ) );\n\t\t\tdv2.push( sv[4] - ( S1*sv[5] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[4] ) );\n\t\t\tdv4.push( sv[2] - ( S3*sv[3] ) );\n\t\t\tdv5.push( sv[1] - ( S4*sv[2] ) );\n\t\t\tdv6.push( sv[0] - ( S5*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[3] ) ];\n\t\tdv5 = [ strides[5] - ( S4*strides[4] ) ];\n\t\tdv6 = [ strides[6] - ( S5*strides[5] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[3] ) );\n\t\t\tdv5.push( sv[5] - ( S4*sv[4] ) );\n\t\t\tdv6.push( sv[6] - ( S5*sv[5] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\tviews[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\t\tybuf[ iv[1] ] = fcn( views, opts );\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv5 );\n\t\t}\n\t\tincrementOffsets( iv, dv6 );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary7d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nvar isRowMajor = require( '@stdlib/ndarray-base-assert-is-row-major-string' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var getStride = require( '@stdlib/ndarray-base-stride' );\n* var getOffset = require( '@stdlib/ndarray-base-offset' );\n* var getData = require( '@stdlib/ndarray-base-data-buffer' );\n* var numelDimension = require( '@stdlib/ndarray-base-numel-dimension' );\n* var gsum = require( '@stdlib/blas-ext-base-gsum' ).ndarray;\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* unary8d( wrapper, [ x, y ], views, [ 12, 12, 12, 12, 12, 12, 12, 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ 10.0, 26.0, 42.0 ] ] ] ] ] ] ] ]\n*/\nfunction unary8d( fcn, arrays, views, strides, strategy, opts ) { // eslint-disable-line max-statements\n\tvar ybuf;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar dv7;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar y;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor( y.order ) ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 7 ];\n\t\tS1 = sh[ 6 ];\n\t\tS2 = sh[ 5 ];\n\t\tS3 = sh[ 4 ];\n\t\tS4 = sh[ 3 ];\n\t\tS5 = sh[ 2 ];\n\t\tS6 = sh[ 1 ];\n\t\tS7 = sh[ 0 ];\n\t\tdv0 = [ strides[7] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[6] - ( S0*strides[7] ) ];\n\t\tdv2 = [ strides[5] - ( S1*strides[6] ) ];\n\t\tdv3 = [ strides[4] - ( S2*strides[5] ) ];\n\t\tdv4 = [ strides[3] - ( S3*strides[4] ) ];\n\t\tdv5 = [ strides[2] - ( S4*strides[3] ) ];\n\t\tdv6 = [ strides[1] - ( S5*strides[2] ) ];\n\t\tdv7 = [ strides[0] - ( S6*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[7] );\n\t\t\tdv1.push( sv[6] - ( S0*sv[7] ) );\n\t\t\tdv2.push( sv[5] - ( S1*sv[6] ) );\n\t\t\tdv3.push( sv[4] - ( S2*sv[5] ) );\n\t\t\tdv4.push( sv[3] - ( S3*sv[4] ) );\n\t\t\tdv5.push( sv[2] - ( S4*sv[3] ) );\n\t\t\tdv6.push( sv[1] - ( S5*sv[2] ) );\n\t\t\tdv7.push( sv[0] - ( S6*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[3] ) ];\n\t\tdv5 = [ strides[5] - ( S4*strides[4] ) ];\n\t\tdv6 = [ strides[6] - ( S5*strides[5] ) ];\n\t\tdv7 = [ strides[7] - ( S6*strides[6] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[3] ) );\n\t\t\tdv5.push( sv[5] - ( S4*sv[4] ) );\n\t\t\tdv6.push( sv[6] - ( S5*sv[5] ) );\n\t\t\tdv7.push( sv[7] - ( S6*sv[6] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\tviews[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\t\t\tybuf[ iv[1] ] = fcn( views, opts );\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv6 );\n\t\t}\n\t\tincrementOffsets( iv, dv7 );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary8d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nvar isRowMajor = require( '@stdlib/ndarray-base-assert-is-row-major-string' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var getStride = require( '@stdlib/ndarray-base-stride' );\n* var getOffset = require( '@stdlib/ndarray-base-offset' );\n* var getData = require( '@stdlib/ndarray-base-data-buffer' );\n* var numelDimension = require( '@stdlib/ndarray-base-numel-dimension' );\n* var gsum = require( '@stdlib/blas-ext-base-gsum' ).ndarray;\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* unary9d( wrapper, [ x, y ], views, [ 12, 12, 12, 12, 12, 12, 12, 12, 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ [ 10.0, 26.0, 42.0 ] ] ] ] ] ] ] ] ]\n*/\nfunction unary9d( fcn, arrays, views, strides, strategy, opts ) { // eslint-disable-line max-statements\n\tvar ybuf;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar dv7;\n\tvar dv8;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar S8;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar y;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor( y.order ) ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 8 ];\n\t\tS1 = sh[ 7 ];\n\t\tS2 = sh[ 6 ];\n\t\tS3 = sh[ 5 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 3 ];\n\t\tS6 = sh[ 2 ];\n\t\tS7 = sh[ 1 ];\n\t\tS8 = sh[ 0 ];\n\t\tdv0 = [ strides[8] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[7] - ( S0*strides[8] ) ];\n\t\tdv2 = [ strides[6] - ( S1*strides[7] ) ];\n\t\tdv3 = [ strides[5] - ( S2*strides[6] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[5] ) ];\n\t\tdv5 = [ strides[3] - ( S4*strides[4] ) ];\n\t\tdv6 = [ strides[2] - ( S5*strides[3] ) ];\n\t\tdv7 = [ strides[1] - ( S6*strides[2] ) ];\n\t\tdv8 = [ strides[0] - ( S7*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[8] );\n\t\t\tdv1.push( sv[7] - ( S0*sv[8] ) );\n\t\t\tdv2.push( sv[6] - ( S1*sv[7] ) );\n\t\t\tdv3.push( sv[5] - ( S2*sv[6] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[5] ) );\n\t\t\tdv5.push( sv[3] - ( S4*sv[4] ) );\n\t\t\tdv6.push( sv[2] - ( S5*sv[3] ) );\n\t\t\tdv7.push( sv[1] - ( S6*sv[2] ) );\n\t\t\tdv8.push( sv[0] - ( S7*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tS8 = sh[ 8 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[3] ) ];\n\t\tdv5 = [ strides[5] - ( S4*strides[4] ) ];\n\t\tdv6 = [ strides[6] - ( S5*strides[5] ) ];\n\t\tdv7 = [ strides[7] - ( S6*strides[6] ) ];\n\t\tdv8 = [ strides[8] - ( S7*strides[7] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[3] ) );\n\t\t\tdv5.push( sv[5] - ( S4*sv[4] ) );\n\t\t\tdv6.push( sv[6] - ( S5*sv[5] ) );\n\t\t\tdv7.push( sv[7] - ( S6*sv[6] ) );\n\t\t\tdv8.push( sv[8] - ( S7*sv[7] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i8 = 0; i8 < S8; i8++ ) {\n\t\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\tviews[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\t\t\t\tybuf[ iv[1] ] = fcn( views, opts );\n\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv6 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv7 );\n\t\t}\n\t\tincrementOffsets( iv, dv8 );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary9d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nvar isRowMajor = require( '@stdlib/ndarray-base-assert-is-row-major-string' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var getStride = require( '@stdlib/ndarray-base-stride' );\n* var getOffset = require( '@stdlib/ndarray-base-offset' );\n* var getData = require( '@stdlib/ndarray-base-data-buffer' );\n* var numelDimension = require( '@stdlib/ndarray-base-numel-dimension' );\n* var gsum = require( '@stdlib/blas-ext-base-gsum' ).ndarray;\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* unary10d( wrapper, [ x, y ], views, [ 12, 12, 12, 12, 12, 12, 12, 12, 12, 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ [ [ 10.0, 26.0, 42.0 ] ] ] ] ] ] ] ] ] ]\n*/\nfunction unary10d( fcn, arrays, views, strides, strategy, opts ) { // eslint-disable-line max-statements\n\tvar ybuf;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar dv7;\n\tvar dv8;\n\tvar dv9;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar S8;\n\tvar S9;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar i9;\n\tvar y;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor( y.order ) ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 9 ];\n\t\tS1 = sh[ 8 ];\n\t\tS2 = sh[ 7 ];\n\t\tS3 = sh[ 6 ];\n\t\tS4 = sh[ 5 ];\n\t\tS5 = sh[ 4 ];\n\t\tS6 = sh[ 3 ];\n\t\tS7 = sh[ 2 ];\n\t\tS8 = sh[ 1 ];\n\t\tS9 = sh[ 0 ];\n\t\tdv0 = [ strides[9] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[8] - ( S0*strides[9] ) ];\n\t\tdv2 = [ strides[7] - ( S1*strides[8] ) ];\n\t\tdv3 = [ strides[6] - ( S2*strides[7] ) ];\n\t\tdv4 = [ strides[5] - ( S3*strides[6] ) ];\n\t\tdv5 = [ strides[4] - ( S4*strides[5] ) ];\n\t\tdv6 = [ strides[3] - ( S5*strides[4] ) ];\n\t\tdv7 = [ strides[2] - ( S6*strides[3] ) ];\n\t\tdv8 = [ strides[1] - ( S7*strides[2] ) ];\n\t\tdv9 = [ strides[0] - ( S8*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[9] );\n\t\t\tdv1.push( sv[8] - ( S0*sv[9] ) );\n\t\t\tdv2.push( sv[7] - ( S1*sv[8] ) );\n\t\t\tdv3.push( sv[6] - ( S2*sv[7] ) );\n\t\t\tdv4.push( sv[5] - ( S3*sv[6] ) );\n\t\t\tdv5.push( sv[4] - ( S4*sv[5] ) );\n\t\t\tdv6.push( sv[3] - ( S5*sv[4] ) );\n\t\t\tdv7.push( sv[2] - ( S6*sv[3] ) );\n\t\t\tdv8.push( sv[1] - ( S7*sv[2] ) );\n\t\t\tdv9.push( sv[0] - ( S8*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tS8 = sh[ 8 ];\n\t\tS9 = sh[ 9 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[3] ) ];\n\t\tdv5 = [ strides[5] - ( S4*strides[4] ) ];\n\t\tdv6 = [ strides[6] - ( S5*strides[5] ) ];\n\t\tdv7 = [ strides[7] - ( S6*strides[6] ) ];\n\t\tdv8 = [ strides[8] - ( S7*strides[7] ) ];\n\t\tdv9 = [ strides[9] - ( S8*strides[8] ) ];  // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[3] ) );\n\t\t\tdv5.push( sv[5] - ( S4*sv[4] ) );\n\t\t\tdv6.push( sv[6] - ( S5*sv[5] ) );\n\t\t\tdv7.push( sv[7] - ( S6*sv[6] ) );\n\t\t\tdv8.push( sv[8] - ( S7*sv[7] ) );\n\t\t\tdv8.push( sv[8] - ( S8*sv[8] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i9 = 0; i9 < S9; i9++ ) {\n\t\tfor ( i8 = 0; i8 < S8; i8++ ) {\n\t\t\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\t\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\tviews[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\t\t\t\t\tybuf[ iv[1] ] = fcn( views, opts );\n\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv6 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv7 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv8 );\n\t\t}\n\t\tincrementOffsets( iv, dv9 );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary10d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar numel = require( '@stdlib/ndarray-base-numel' );\nvar vind2bind = require( '@stdlib/ndarray-base-vind2bind' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\n\n\n// VARIABLES //\n\nvar MODE = 'throw';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var getStride = require( '@stdlib/ndarray-base-stride' );\n* var getOffset = require( '@stdlib/ndarray-base-offset' );\n* var getData = require( '@stdlib/ndarray-base-data-buffer' );\n* var numelDimension = require( '@stdlib/ndarray-base-numel-dimension' );\n* var gsum = require( '@stdlib/blas-ext-base-gsum' ).ndarray;\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 3, 2, 2 ];\n* var ysh = [ 3 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 2, 1 ];\n* var sy = [ 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* unarynd( wrapper, [ x, y ], views, [ 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ 10.0, 26.0, 42.0 ]\n*/\nfunction unarynd( fcn, arrays, views, strides, strategy, opts ) {\n\tvar ybuf;\n\tvar len;\n\tvar sh;\n\tvar iv;\n\tvar io;\n\tvar N;\n\tvar v;\n\tvar y;\n\tvar i;\n\tvar j;\n\n\tN = arrays.length;\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Compute the total number of elements over which to iterate:\n\tlen = numel( sh );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Iterate based on the linear **view** index, regardless as to how the data is stored in memory...\n\tio = zeros( N );\n\tfor ( i = 0; i < len; i++ ) {\n\t\tfor ( j = 0; j < N; j++ ) {\n\t\t\tv = arrays[ j ];\n\t\t\tio[ j ] = vind2bind( sh, v.strides, iv[ j ], v.order, i, MODE );\n\t\t}\n\t\tsetViewOffsets( views, io );\n\t\tviews[ 0 ] = strategy( views[ 0 ] );\n\t\tybuf[ io[1] ] = fcn( views, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unarynd;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar ndarray2object = require( '@stdlib/ndarray-base-ndarraylike2object' );\nvar normalizeIndices = require( '@stdlib/ndarray-base-to-unique-normalized-indices' );\nvar indicesComplement = require( '@stdlib/array-base-indices-complement' );\nvar takeIndexed2 = require( '@stdlib/array-base-take-indexed2' );\nvar iterationOrder = require( '@stdlib/ndarray-base-iteration-order' );\nvar numel = require( '@stdlib/ndarray-base-numel' );\nvar join = require( '@stdlib/array-base-join' );\nvar format = require( '@stdlib/string-format' );\nvar initializeViews = require( './initialize_array_views.js' );\nvar reshapeStrategy = require( './reshape_strategy.js' );\nvar blockedaccessorunary2d = require( './2d_blocked_accessors.js' );\nvar blockedaccessorunary3d = require( './3d_blocked_accessors.js' );\nvar blockedaccessorunary4d = require( './4d_blocked_accessors.js' );\nvar blockedaccessorunary5d = require( './5d_blocked_accessors.js' );\nvar blockedaccessorunary6d = require( './6d_blocked_accessors.js' );\nvar blockedaccessorunary7d = require( './7d_blocked_accessors.js' );\nvar blockedaccessorunary8d = require( './8d_blocked_accessors.js' );\nvar blockedaccessorunary9d = require( './9d_blocked_accessors.js' );\nvar blockedaccessorunary10d = require( './10d_blocked_accessors.js' );\nvar blockedunary2d = require( './2d_blocked.js' );\nvar blockedunary3d = require( './3d_blocked.js' );\nvar blockedunary4d = require( './4d_blocked.js' );\nvar blockedunary5d = require( './5d_blocked.js' );\nvar blockedunary6d = require( './6d_blocked.js' );\nvar blockedunary7d = require( './7d_blocked.js' );\nvar blockedunary8d = require( './8d_blocked.js' );\nvar blockedunary9d = require( './9d_blocked.js' );\nvar blockedunary10d = require( './10d_blocked.js' );\nvar accessorunary0d = require( './0d_accessors.js' );\nvar accessorunary1d = require( './1d_accessors.js' );\nvar accessorunary2d = require( './2d_accessors.js' );\nvar accessorunary3d = require( './3d_accessors.js' );\nvar accessorunary4d = require( './4d_accessors.js' );\nvar accessorunary5d = require( './5d_accessors.js' );\nvar accessorunary6d = require( './6d_accessors.js' );\nvar accessorunary7d = require( './7d_accessors.js' );\nvar accessorunary8d = require( './8d_accessors.js' );\nvar accessorunary9d = require( './9d_accessors.js' );\nvar accessorunary10d = require( './10d_accessors.js' );\nvar accessorunarynd = require( './nd_accessors.js' );\nvar unary0d = require( './0d.js' );\nvar unary1d = require( './1d.js' );\nvar unary2d = require( './2d.js' );\nvar unary3d = require( './3d.js' );\nvar unary4d = require( './4d.js' );\nvar unary5d = require( './5d.js' );\nvar unary6d = require( './6d.js' );\nvar unary7d = require( './7d.js' );\nvar unary8d = require( './8d.js' );\nvar unary9d = require( './9d.js' );\nvar unary10d = require( './10d.js' );\nvar unarynd = require( './nd.js' );\n\n\n// VARIABLES //\n\nvar UNARY = [\n\tunary0d,\n\tunary1d,\n\tunary2d,\n\tunary3d,\n\tunary4d,\n\tunary5d,\n\tunary6d,\n\tunary7d,\n\tunary8d,\n\tunary9d,\n\tunary10d\n];\nvar ACCESSOR_UNARY = [\n\taccessorunary0d,\n\taccessorunary1d,\n\taccessorunary2d,\n\taccessorunary3d,\n\taccessorunary4d,\n\taccessorunary5d,\n\taccessorunary6d,\n\taccessorunary7d,\n\taccessorunary8d,\n\taccessorunary9d,\n\taccessorunary10d\n];\nvar BLOCKED_UNARY = [\n\tblockedunary2d, // 0\n\tblockedunary3d,\n\tblockedunary4d,\n\tblockedunary5d,\n\tblockedunary6d,\n\tblockedunary7d,\n\tblockedunary8d,\n\tblockedunary9d,\n\tblockedunary10d // 8\n];\nvar BLOCKED_ACCESSOR_UNARY = [\n\tblockedaccessorunary2d, // 0\n\tblockedaccessorunary3d,\n\tblockedaccessorunary4d,\n\tblockedaccessorunary5d,\n\tblockedaccessorunary6d,\n\tblockedaccessorunary7d,\n\tblockedaccessorunary8d,\n\tblockedaccessorunary9d,\n\tblockedaccessorunary10d // 8\n];\nvar MAX_DIMS = UNARY.length - 1;\n\n\n// MAIN //\n\n/**\n* Performs a reduction over a list of specified dimensions in an input ndarray via a one-dimensional strided array reduction function and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {ArrayLikeObject<Object>} arrays - array-like object containing ndarrays\n* @param {IntegerArray} dims - list of dimensions over which to perform a reduction\n* @param {Options} [options] - function options\n* @throws {Error} arrays must have the expected number of dimensions\n* @throws {RangeError} dimension indices must not exceed input ndarray bounds\n* @throws {RangeError} number of dimension indices must not exceed the number of input ndarray dimensions\n* @throws {Error} must provide unique dimension indices\n* @throws {Error} arrays must have the same loop dimension sizes\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var getStride = require( '@stdlib/ndarray-base-stride' );\n* var getOffset = require( '@stdlib/ndarray-base-offset' );\n* var getData = require( '@stdlib/ndarray-base-data-buffer' );\n* var numelDimension = require( '@stdlib/ndarray-base-numel-dimension' );\n* var gsum = require( '@stdlib/blas-ext-base-gsum' ).ndarray;\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 3, 2, 2 ];\n* var ysh = [ 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Perform a reduction:\n* unaryReduceStrided1d( wrapper, [ x, y ], [ 2, 3 ] );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ 10.0, 26.0, 42.0 ] ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var getStride = require( '@stdlib/ndarray-base-stride' );\n* var getOffset = require( '@stdlib/ndarray-base-offset' );\n* var getData = require( '@stdlib/ndarray-base-data-buffer' );\n* var numelDimension = require( '@stdlib/ndarray-base-numel-dimension' );\n* var gsum = require( '@stdlib/blas-ext-base-gsum' ).ndarray;\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 3, 2, 2 ];\n* var ysh = [];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 0 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Perform a reduction:\n* unaryReduceStrided1d( wrapper, [ x, y ], [ 0, 1, 2, 3 ] );\n*\n* var v = y.data;\n* // returns <Float64Array>[ 78.0 ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var getStride = require( '@stdlib/ndarray-base-stride' );\n* var getOffset = require( '@stdlib/ndarray-base-offset' );\n* var getData = require( '@stdlib/ndarray-base-data-buffer' );\n* var numelDimension = require( '@stdlib/ndarray-base-numel-dimension' );\n* var gsum = require( '@stdlib/blas-ext-base-gsum' ).ndarray;\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 3, 2, 2 ];\n* var ysh = [ 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 2, 1 ];\n* var sy = [ 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Perform a reduction:\n* unaryReduceStrided1d( wrapper, [ x, y ], [] );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ 1.0, 2.0 ], [ 3.0, 4.0 ] ], [ [ 5.0, 6.0 ], [ 7.0, 8.0 ] ], [ [ 9.0, 10.0 ], [ 11.0, 12.0 ] ] ]\n*/\nfunction unaryReduceStrided1d( fcn, arrays, dims, options ) { // eslint-disable-line max-statements\n\tvar strategy;\n\tvar views;\n\tvar ndims;\n\tvar ldims;\n\tvar opts;\n\tvar arr;\n\tvar tmp;\n\tvar len;\n\tvar shx;\n\tvar shc;\n\tvar shl;\n\tvar iox;\n\tvar ioy;\n\tvar sc;\n\tvar sl;\n\tvar sy;\n\tvar ns;\n\tvar d;\n\tvar s;\n\tvar N;\n\tvar M;\n\tvar K;\n\tvar x;\n\tvar y;\n\tvar i;\n\tvar j;\n\n\tif ( arguments.length > 3 ) {\n\t\topts = options;\n\t} else {\n\t\topts = {};\n\t}\n\t// Standardize ndarray meta data...\n\tN = arrays.length;\n\tarr = [];\n\tfor ( i = 0; i < N; i++ ) {\n\t\tarr.push( ndarray2object( arrays[ i ] ) );\n\t}\n\t// Cache references to the input and output arrays:\n\tx = arr[ 0 ];\n\ty = arr[ 1 ];\n\n\t// Resolve the number of input array dimensions:\n\tshx = x.shape;\n\tndims = shx.length;\n\n\t// Verify that we've been provided a list of unique dimension indices...\n\tM = dims.length;\n\td = normalizeIndices( dims, ndims );\n\tif ( d === null ) {\n\t\tthrow new RangeError( format( 'invalid argument. Third argument contains an out-of-bounds dimension index. Value: [%s].', join( dims, ',' ) ) );\n\t}\n\td.sort();\n\tif ( d.length !== M ) {\n\t\tthrow new Error( format( 'invalid argument. Third argument must contain a list of unique dimension indices. Value: [%s].', join( dims, ',' ) ) );\n\t}\n\t// Check whether we've been provided a valid number of dimensions to reduce...\n\tif ( M > ndims ) {\n\t\tthrow new RangeError( format( 'invalid argument. Number of specified dimensions cannot exceed the number of dimensions in the input array. Number of dimensions: %d. Value: [%s].', ndims, join( dims, ',' ) ) );\n\t}\n\t// Verify that provided ndarrays have the expected number of dimensions...\n\tK = ndims - M;\n\tfor ( i = 1; i < N; i++ ) {\n\t\tif ( arr[ i ].shape.length !== K ) {\n\t\t\tthrow new Error( format( 'invalid argument. Arrays which are not being reduced must have the same number of non-reduced dimensions. Input array shape: [%s]. Number of non-reduced dimensions: %d. Array shape: [%s] (index: %d).', join( shx, ',' ), K, join( arr[ i ].shape, ',' ), i ) );\n\t\t}\n\t}\n\t// Resolve the non-reduced (\"loop\") dimensions and associated strides:\n\tldims = indicesComplement( shx.length, d );\n\ttmp = takeIndexed2( shx, x.strides, ldims );\n\tshl = tmp[ 0 ];\n\tsl = tmp[ 1 ];\n\n\t// Resolve the reduced (\"core\") dimensions and associated strides:\n\ttmp = takeIndexed2( shx, x.strides, d );\n\tshc = tmp[ 0 ];\n\tsc = tmp[ 1 ];\n\n\t// Verify that the provided arrays have the same loop dimensions...\n\tlen = 1; // number of elements\n\tns = 0;  // number of singleton dimensions\n\tfor ( i = 0; i < K; i++ ) {\n\t\ts = shl[ i ];\n\t\tfor ( j = 1; j < N; j++ ) {\n\t\t\tif ( s !== arr[ j ].shape[ i ] ) {\n\t\t\t\tthrow new Error( format( 'invalid argument. Non-reduced dimensions must be consistent across all provided arrays. Input array shape: [%s]. Non-reduced dimension indices: [%s]. Non-reduced dimensions: [%s]. Array shape: [%s] (index: %d).', join( shx, ',' ), join( ldims, ',' ), join( shl, ',' ), join( arr[ j ].shape, ',' ), j ) );\n\t\t\t}\n\t\t}\n\t\t// Note that, if one of the dimensions is `0`, the length will be `0`...\n\t\tlen *= s;\n\n\t\t// Check whether the current dimension is a singleton dimension...\n\t\tif ( s === 1 ) {\n\t\t\tns += 1;\n\t\t}\n\t}\n\t// Check whether we were provided empty ndarrays...\n\tif ( len === 0 || ( shc.length && numel( shc ) === 0 ) ) {\n\t\treturn;\n\t}\n\t// Initialize ndarray-like objects for representing sub-array views...\n\tviews = [\n\t\t{\n\t\t\t'dtype': x.dtype,\n\t\t\t'data': x.data,\n\t\t\t'shape': shc,\n\t\t\t'strides': sc,\n\t\t\t'offset': x.offset,\n\t\t\t'order': x.order\n\t\t}\n\t];\n\tinitializeViews( arr, views );\n\n\t// Determine the strategy for reshaping sub-array views of the input array prior to performing a reduction:\n\tstrategy = reshapeStrategy( views[ 0 ] );\n\n\t// Determine whether we can avoid iteration altogether...\n\tif ( K === 0 ) {\n\t\tif ( y.accessorProtocol ) {\n\t\t\treturn ACCESSOR_UNARY[ K ]( fcn, arr, strategy, opts );\n\t\t}\n\t\treturn UNARY[ K ]( fcn, arr, strategy, opts );\n\t}\n\t// Determine whether we only have one loop dimension and can thus readily perform one-dimensional iteration...\n\tif ( K === 1 ) {\n\t\tif ( y.accessorProtocol ) {\n\t\t\treturn ACCESSOR_UNARY[ K ]( fcn, arr, views, sl, strategy, opts );\n\t\t}\n\t\treturn UNARY[ K ]( fcn, arr, views, sl, strategy, opts );\n\t}\n\tsy = y.strides;\n\n\t// Determine whether the loop dimensions have only **one** non-singleton dimension (e.g., shape=[10,1,1,1]) so that we can treat loop iteration as being equivalent to one-dimensional iteration...\n\tif ( ns === K-1 ) {\n\t\t// Get the index of the non-singleton dimension...\n\t\tfor ( i = 0; i < K; i++ ) {\n\t\t\tif ( shl[ i ] !== 1 ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\ty.shape = [ shl[i] ];\n\t\tfor ( j = 0; j < N; j++ ) {\n\t\t\tarr[ j ].strides = [ arr[j].strides[i] ];\n\t\t}\n\t\tsl = [ sl[i] ];\n\t\tif ( y.accessorProtocol ) {\n\t\t\treturn ACCESSOR_UNARY[ 1 ]( fcn, arr, views, sl, strategy, opts );\n\t\t}\n\t\treturn UNARY[ 1 ]( fcn, arr, views, sl, strategy, opts );\n\t}\n\tiox = iterationOrder( sl ); // +/-1\n\tioy = iterationOrder( sy ); // +/-1\n\n\t// Determine whether we can avoid blocked iteration...\n\tif ( iox !== 0 && ioy !== 0 && iox === ioy && K <= MAX_DIMS ) {\n\t\t// So long as iteration for each respective array always moves in the same direction (i.e., no mixed sign strides), we can leverage cache-optimal (i.e., normal) nested loops without resorting to blocked iteration...\n\t\tif ( y.accessorProtocol ) {\n\t\t\treturn ACCESSOR_UNARY[ K ]( fcn, arr, views, sl, strategy, opts );\n\t\t}\n\t\treturn UNARY[ K ]( fcn, arr, views, sl, strategy, opts );\n\t}\n\t// At this point, we're either dealing with non-contiguous n-dimensional arrays, high dimensional n-dimensional arrays, and/or arrays having differing memory layouts, so our only hope is that we can still perform blocked iteration...\n\n\t// Determine whether we can perform blocked iteration...\n\tif ( K <= MAX_DIMS ) {\n\t\tif ( y.accessorProtocol ) {\n\t\t\treturn BLOCKED_ACCESSOR_UNARY[ K-2 ]( fcn, arr, views, sl, strategy, opts ); // eslint-disable-line max-len\n\t\t}\n\t\treturn BLOCKED_UNARY[ K-2 ]( fcn, arr, views, sl, strategy, opts );\n\t}\n\t// Fall-through to linear view iteration without regard for how data is stored in memory (i.e., take the slow path)...\n\tif ( y.accessorProtocol ) {\n\t\treturn accessorunarynd( fcn, arr, views, sl, strategy, opts );\n\t}\n\tunarynd( fcn, arr, views, sl, strategy, opts );\n}\n\n\n// EXPORTS //\n\nmodule.exports = unaryReduceStrided1d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar format = require( '@stdlib/string-format' );\nvar reduce = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Return a function for performing a reduction over a list of specified dimensions in an input ndarray via a one-dimensional strided array reduction function and assigning results to a provided output ndarray.\n*\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @throws {TypeError} first argument must be a function\n* @returns {Function} function for performing a reduction\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var getStride = require( '@stdlib/ndarray-base-stride' );\n* var getOffset = require( '@stdlib/ndarray-base-offset' );\n* var getData = require( '@stdlib/ndarray-base-data-buffer' );\n* var numelDimension = require( '@stdlib/ndarray-base-numel-dimension' );\n* var gsum = require( '@stdlib/blas-ext-base-gsum' ).ndarray;\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 3, 2, 2 ];\n* var ysh = [ 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Create a function for performing a reduction over subarrays:\n* var sum = factory( wrapper );\n* // returns <Function>\n*\n* // Perform a reduction:\n* sum( [ x, y ], [ 2, 3 ] );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ 10.0, 26.0, 42.0 ] ]\n*/\nfunction factory( fcn ) {\n\tif ( !isFunction( fcn ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', fcn ) );\n\t}\n\treturn reducer;\n\n\t/**\n\t* Performs a reduction over a list of specified dimensions in an input ndarray via a one-dimensional strided array reduction function and assigns results to a provided output ndarray.\n\t*\n\t* @private\n\t* @param {ArrayLikeObject<Object>} arrays - array-like object containing ndarrays\n\t* @param {IntegerArray} dims - list of dimensions over which to perform a reduction\n\t* @param {Options} [options] - function options\n\t* @returns {void}\n\t*/\n\tfunction reducer( arrays, dims, options ) {\n\t\tvar opts;\n\t\tif ( arguments.length > 2 ) {\n\t\t\topts = options;\n\t\t} else {\n\t\t\topts = {};\n\t\t}\n\t\treturn reduce( fcn, arrays, dims, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Perform a reduction over a list of specified dimensions in an input ndarray via a one-dimensional strided array reduction function and assign results to a provided output ndarray.\n*\n* @module @stdlib/ndarray-base-unary-reduce-strided1d\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var getStride = require( '@stdlib/ndarray-base-stride' );\n* var getOffset = require( '@stdlib/ndarray-base-offset' );\n* var getData = require( '@stdlib/ndarray-base-data-buffer' );\n* var numelDimension = require( '@stdlib/ndarray-base-numel-dimension' );\n* var gsum = require( '@stdlib/blas-ext-base-gsum' ).ndarray;\n* var unaryReduceStrided1d = require( '@stdlib/ndarray-base-unary-reduce-strided1d' );\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 3, 2, 2 ];\n* var ysh = [ 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Perform a reduction:\n* unaryReduceStrided1d( wrapper, [ x, y ], [ 2, 3 ] );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ 10.0, 26.0, 42.0 ] ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var getStride = require( '@stdlib/ndarray-base-stride' );\n* var getOffset = require( '@stdlib/ndarray-base-offset' );\n* var getData = require( '@stdlib/ndarray-base-data-buffer' );\n* var numelDimension = require( '@stdlib/ndarray-base-numel-dimension' );\n* var gsum = require( '@stdlib/blas-ext-base-gsum' ).ndarray;\n* var unaryReduceStrided1d = require( '@stdlib/ndarray-base-unary-reduce-strided1d' );\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 3, 2, 2 ];\n* var ysh = [ 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Create a function for performing a reduction over subarrays:\n* var sum = unaryReduceStrided1d.factory( wrapper );\n* // returns <Function>\n*\n* // Perform a reduction:\n* sum( [ x, y ], [ 2, 3 ] );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ 10.0, 26.0, 42.0 ] ]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"factory\": \"main.factory\" }\n"],
  "mappings": "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",
  "names": ["require_initialize_array_views", "__commonJSMin", "exports", "module", "initializeViews", "arrays", "out", "v", "i", "require_reshape_strategy", "__commonJSMin", "exports", "module", "iterationOrder", "minmaxViewBufferIndex", "ndarraylike2object", "assign", "ndarraylike2ndarray", "emptyLike", "identity", "x", "broadcast", "squeeze", "index", "reshape", "contiguous", "len", "iox", "xmmv", "ind", "sh", "sx", "copy", "workspace", "view", "strategy", "ndims", "ns", "i", "require_increment_offsets", "__commonJSMin", "exports", "module", "incrementOffsets", "offsets", "inc", "i", "require_set_view_offsets", "__commonJSMin", "exports", "module", "setViewOffsets", "views", "offsets", "i", "j", "require_offsets", "__commonJSMin", "exports", "module", "offsets", "arrays", "out", "i", "require_d_blocked_accessors", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "takeIndexed", "zeros", "incrementOffsets", "setViewOffsets", "offsets", "blockedunary2d", "fcn", "arrays", "views", "strides", "strategy", "opts", "bsize", "ybuf", "set", "dv0", "dv1", "ov1", "sh", "s0", "s1", "sv", "ov", "iv", "i0", "i1", "j0", "j1", "N", "x", "y", "o", "k", "require_d_blocked_accessors", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "takeIndexed", "zeros", "incrementOffsets", "setViewOffsets", "offsets", "blockedunary3d", "fcn", "arrays", "views", "strides", "strategy", "opts", "bsize", "ybuf", "set", "dv0", "dv1", "dv2", "ov1", "ov2", "sh", "s0", "s1", "s2", "sv", "ov", "iv", "i0", "i1", "i2", "j0", "j1", "j2", "N", "x", "y", "o", "k", "require_d_blocked_accessors", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "takeIndexed", "zeros", "incrementOffsets", "setViewOffsets", "offsets", "blockedunary4d", "fcn", "arrays", "views", "strides", "strategy", "opts", "bsize", "ybuf", "set", "dv0", "dv1", "dv2", "dv3", "ov1", "ov2", "ov3", "sh", "s0", "s1", "s2", "s3", "sv", "ov", "iv", "i0", "i1", "i2", "i3", "j0", "j1", "j2", "j3", "N", "x", "y", "o", "k", "require_d_blocked_accessors", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "takeIndexed", "zeros", "incrementOffsets", "setViewOffsets", "offsets", "blockedunary5d", "fcn", "arrays", "views", "strides", "strategy", "opts", "bsize", "ybuf", "set", "dv0", "dv1", "dv2", "dv3", "dv4", "ov1", "ov2", "ov3", "ov4", "sh", "s0", "s1", "s2", "s3", "s4", "sv", "ov", "iv", "i0", "i1", "i2", "i3", "i4", "j0", "j1", "j2", "j3", "j4", "N", "x", "y", "o", "k", "require_d_blocked_accessors", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "takeIndexed", "zeros", "incrementOffsets", "setViewOffsets", "offsets", "blockedunary6d", "fcn", "arrays", "views", "strides", "strategy", "opts", "bsize", "ybuf", "set", "dv0", "dv1", "dv2", "dv3", "dv4", "dv5", "ov1", "ov2", "ov3", "ov4", "ov5", "sh", "s0", "s1", "s2", "s3", "s4", "s5", "sv", "ov", "iv", "i0", "i1", "i2", "i3", "i4", "i5", "j0", "j1", "j2", "j3", "j4", "j5", "N", "x", "y", "o", "k", "require_d_blocked_accessors", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "takeIndexed", "zeros", "incrementOffsets", "setViewOffsets", "offsets", "blockedunary7d", "fcn", "arrays", "views", "strides", "strategy", "opts", "bsize", "ybuf", "set", "dv0", "dv1", "dv2", "dv3", "dv4", "dv5", "dv6", "ov1", "ov2", "ov3", "ov4", "ov5", "ov6", "sh", "s0", "s1", "s2", "s3", "s4", "s5", "s6", "sv", "ov", "iv", "i0", "i1", "i2", "i3", "i4", "i5", "i6", "j0", "j1", "j2", "j3", "j4", "j5", "j6", "N", "x", "y", "o", "k", "require_d_blocked_accessors", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "takeIndexed", "zeros", "incrementOffsets", "setViewOffsets", "offsets", "blockedunary8d", "fcn", "arrays", "views", "strides", "strategy", "opts", "bsize", "ybuf", "set", "dv0", "dv1", "dv2", "dv3", "dv4", "dv5", "dv6", "dv7", "ov1", "ov2", "ov3", "ov4", "ov5", "ov6", "ov7", "sh", "s0", "s1", "s2", "s3", "s4", "s5", "s6", "s7", "sv", "ov", "iv", "i0", "i1", "i2", "i3", "i4", "i5", "i6", "i7", "j0", "j1", "j2", "j3", "j4", "j5", "j6", "j7", "N", "x", "y", "o", "k", "require_d_blocked_accessors", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "takeIndexed", "zeros", "incrementOffsets", "setViewOffsets", "offsets", "blockedunary9d", "fcn", "arrays", "views", "strides", "strategy", "opts", "bsize", "ybuf", "set", "dv0", "dv1", "dv2", "dv3", "dv4", "dv5", "dv6", "dv7", "dv8", "ov1", "ov2", "ov3", "ov4", "ov5", "ov6", "ov7", "ov8", "sh", "s0", "s1", "s2", "s3", "s4", "s5", "s6", "s7", "s8", "sv", "ov", "iv", "i0", "i1", "i2", "i3", "i4", "i5", "i6", "i7", "i8", "j0", "j1", "j2", "j3", "j4", "j5", "j6", "j7", "j8", "N", "x", "y", "o", "k", "require_d_blocked_accessors", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "takeIndexed", "zeros", "incrementOffsets", "setViewOffsets", "offsets", "blockedunary10d", "fcn", "arrays", "views", "strides", "strategy", "opts", "bsize", "ybuf", "set", "dv0", "dv1", "dv2", "dv3", "dv4", "dv5", "dv6", "dv7", "dv8", "dv9", "ov1", "ov2", "ov3", "ov4", "ov5", "ov6", "ov7", "ov8", "ov9", "sh", "s0", "s1", "s2", "s3", "s4", "s5", "s6", "s7", "s8", "s9", "sv", "ov", "iv", "i0", "i1", "i2", "i3", "i4", "i5", "i6", "i7", "i8", "i9", "j0", "j1", "j2", "j3", "j4", "j5", "j6", "j7", "j8", "j9", "N", "x", "y", "o", "k", "require_d_blocked", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "takeIndexed", "zeros", "incrementOffsets", "setViewOffsets", "offsets", "blockedunary2d", "fcn", "arrays", "views", "strides", "strategy", "opts", "bsize", "ybuf", "dv0", "dv1", "ov1", "sh", "s0", "s1", "sv", "ov", "iv", "i0", "i1", "j0", "j1", "N", "x", "y", "o", "k", "require_d_blocked", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "takeIndexed", "zeros", "incrementOffsets", "setViewOffsets", "offsets", "blockedunary3d", "fcn", "arrays", "views", "strides", "strategy", "opts", "bsize", "ybuf", "dv0", "dv1", "dv2", "ov1", "ov2", "sh", "s0", "s1", "s2", "sv", "ov", "iv", "i0", "i1", "i2", "j0", "j1", "j2", "N", "x", "y", "o", "k", "require_d_blocked", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "takeIndexed", "zeros", "incrementOffsets", "setViewOffsets", "offsets", "blockedunary4d", "fcn", "arrays", "views", "strides", "strategy", "opts", "bsize", "ybuf", "dv0", "dv1", "dv2", "dv3", "ov1", "ov2", "ov3", "sh", "s0", "s1", "s2", "s3", "sv", "ov", "iv", "i0", "i1", "i2", "i3", "j0", "j1", "j2", "j3", "N", "x", "y", "o", "k", "require_d_blocked", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "takeIndexed", "zeros", "incrementOffsets", "setViewOffsets", "offsets", "blockedunary5d", "fcn", "arrays", "views", "strides", "strategy", "opts", "bsize", "ybuf", "dv0", "dv1", "dv2", "dv3", "dv4", "ov1", "ov2", "ov3", "ov4", "sh", "s0", "s1", "s2", "s3", "s4", "sv", "ov", "iv", "i0", "i1", "i2", "i3", "i4", "j0", "j1", "j2", "j3", "j4", "N", "x", "y", "o", "k", "require_d_blocked", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "takeIndexed", "zeros", "incrementOffsets", "setViewOffsets", "offsets", "blockedunary6d", "fcn", "arrays", "views", "strides", "strategy", "opts", "bsize", "ybuf", "dv0", "dv1", "dv2", "dv3", "dv4", "dv5", "ov1", "ov2", "ov3", "ov4", "ov5", "sh", "s0", "s1", "s2", "s3", "s4", "s5", "sv", "ov", "iv", "i0", "i1", "i2", "i3", "i4", "i5", "j0", "j1", "j2", "j3", "j4", "j5", "N", "x", "y", "o", "k", "require_d_blocked", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "takeIndexed", "zeros", "incrementOffsets", "setViewOffsets", "offsets", "blockedunary7d", "fcn", "arrays", "views", "strides", "strategy", "opts", "bsize", "ybuf", "dv0", "dv1", "dv2", "dv3", "dv4", "dv5", "dv6", "ov1", "ov2", "ov3", "ov4", "ov5", "ov6", "sh", "s0", "s1", "s2", "s3", "s4", "s5", "s6", "sv", "ov", "iv", "i0", "i1", "i2", "i3", "i4", "i5", "i6", "j0", "j1", "j2", "j3", "j4", "j5", "j6", "N", "x", "y", "o", "k", "require_d_blocked", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "takeIndexed", "zeros", "incrementOffsets", "setViewOffsets", "offsets", "blockedunary8d", "fcn", "arrays", "views", "strides", "strategy", "opts", "bsize", "ybuf", "dv0", "dv1", "dv2", "dv3", "dv4", "dv5", "dv6", "dv7", "ov1", "ov2", "ov3", "ov4", "ov5", "ov6", "ov7", "sh", "s0", "s1", "s2", "s3", "s4", "s5", "s6", "s7", "sv", "ov", "iv", "i0", "i1", "i2", "i3", "i4", "i5", "i6", "i7", "j0", "j1", "j2", "j3", "j4", "j5", "j6", "j7", "N", "x", "y", "o", "k", "require_d_blocked", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "takeIndexed", "zeros", "incrementOffsets", "setViewOffsets", "offsets", "blockedunary9d", "fcn", "arrays", "views", "strides", "strategy", "opts", "bsize", "ybuf", "dv0", "dv1", "dv2", "dv3", "dv4", "dv5", "dv6", "dv7", "dv8", "ov1", "ov2", "ov3", "ov4", "ov5", "ov6", "ov7", "ov8", "sh", "s0", "s1", "s2", "s3", "s4", "s5", "s6", "s7", "s8", "sv", "ov", "iv", "i0", "i1", "i2", "i3", "i4", "i5", "i6", "i7", "i8", "j0", "j1", "j2", "j3", "j4", "j5", "j6", "j7", "j8", "N", "x", "y", "o", "k", "require_d_blocked", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "takeIndexed", "zeros", "incrementOffsets", "setViewOffsets", "offsets", "blockedunary10d", "fcn", "arrays", "views", "strides", "strategy", "opts", "bsize", "ybuf", "dv0", "dv1", "dv2", "dv3", "dv4", "dv5", "dv6", "dv7", "dv8", "dv9", "ov1", "ov2", "ov3", "ov4", "ov5", "ov6", "ov7", "ov8", "ov9", "sh", "s0", "s1", "s2", "s3", "s4", "s5", "s6", "s7", "s8", "s9", "sv", "ov", "iv", "i0", "i1", "i2", "i3", "i4", "i5", "i6", "i7", "i8", "i9", "j0", "j1", "j2", "j3", "j4", "j5", "j6", "j7", "j8", "j9", "N", "x", "y", "o", "k", "require_d_accessors", "__commonJSMin", "exports", "module", "without", "unary0d", "fcn", "arrays", "strategy", "opts", "y", "require_d_accessors", "__commonJSMin", "exports", "module", "incrementOffsets", "setViewOffsets", "offsets", "unary1d", "fcn", "arrays", "views", "strides", "strategy", "opts", "ybuf", "set", "dv0", "sh", "S0", "iv", "i0", "y", "i", "require_d_accessors", "__commonJSMin", "exports", "module", "isRowMajor", "incrementOffsets", "setViewOffsets", "offsets", "unary2d", "fcn", "arrays", "views", "strides", "strategy", "opts", "ybuf", "set", "dv0", "dv1", "sh", "S0", "S1", "sv", "iv", "i0", "i1", "y", "i", "require_d_accessors", "__commonJSMin", "exports", "module", "isRowMajor", "incrementOffsets", "setViewOffsets", "offsets", "unary3d", "fcn", "arrays", "views", "strides", "strategy", "opts", "ybuf", "set", "dv0", "dv1", "dv2", "sh", "S0", "S1", "S2", "sv", "iv", "i0", "i1", "i2", "y", "i", "require_d_accessors", "__commonJSMin", "exports", "module", "isRowMajor", "incrementOffsets", "setViewOffsets", "offsets", "unary4d", "fcn", "arrays", "views", "strides", "strategy", "opts", "ybuf", "set", "dv0", "dv1", "dv2", "dv3", "sh", "S0", "S1", "S2", "S3", "sv", "iv", "i0", "i1", "i2", "i3", "y", "i", "require_d_accessors", "__commonJSMin", "exports", "module", "isRowMajor", "incrementOffsets", "setViewOffsets", "offsets", "unary5d", "fcn", "arrays", "views", "strides", "strategy", "opts", "ybuf", "set", "dv0", "dv1", "dv2", "dv3", "dv4", "sh", "S0", "S1", "S2", "S3", "S4", "sv", "iv", "i0", "i1", "i2", "i3", "i4", "y", "i", "require_d_accessors", "__commonJSMin", "exports", "module", "isRowMajor", "incrementOffsets", "setViewOffsets", "offsets", "unary6d", "fcn", "arrays", "views", "strides", "strategy", "opts", "ybuf", "set", "dv0", "dv1", "dv2", "dv3", "dv4", "dv5", "sh", "S0", "S1", "S2", "S3", "S4", "S5", "sv", "iv", "i0", "i1", "i2", "i3", "i4", "i5", "y", "i", "require_d_accessors", "__commonJSMin", "exports", "module", "isRowMajor", "incrementOffsets", "setViewOffsets", "offsets", "unary7d", "fcn", "arrays", "views", "strides", "strategy", "opts", "ybuf", "set", "dv0", "dv1", "dv2", "dv3", "dv4", "dv5", "dv6", "sh", "S0", "S1", "S2", "S3", "S4", "S5", "S6", "sv", "iv", "i0", "i1", "i2", "i3", "i4", "i5", "i6", "y", "i", "require_d_accessors", "__commonJSMin", "exports", "module", "isRowMajor", "incrementOffsets", "setViewOffsets", "offsets", "unary8d", "fcn", "arrays", "views", "strides", "strategy", "opts", "ybuf", "set", "dv0", "dv1", "dv2", "dv3", "dv4", "dv5", "dv6", "dv7", "sh", "S0", "S1", "S2", "S3", "S4", "S5", "S6", "S7", "sv", "iv", "i0", "i1", "i2", "i3", "i4", "i5", "i6", "i7", "y", "i", "require_d_accessors", "__commonJSMin", "exports", "module", "isRowMajor", "incrementOffsets", "setViewOffsets", "offsets", "unary9d", "fcn", "arrays", "views", "strides", "strategy", "opts", "ybuf", "set", "dv0", "dv1", "dv2", "dv3", "dv4", "dv5", "dv6", "dv7", "dv8", "sh", "S0", "S1", "S2", "S3", "S4", "S5", "S6", "S7", "S8", "sv", "iv", "i0", "i1", "i2", "i3", "i4", "i5", "i6", "i7", "i8", "y", "i", "require_d_accessors", "__commonJSMin", "exports", "module", "isRowMajor", "incrementOffsets", "setViewOffsets", "offsets", "unary10d", "fcn", "arrays", "views", "strides", "strategy", "opts", "ybuf", "set", "dv0", "dv1", "dv2", "dv3", "dv4", "dv5", "dv6", "dv7", "dv8", "dv9", "sh", "S0", "S1", "S2", "S3", "S4", "S5", "S6", "S7", "S8", "S9", "sv", "iv", "i0", "i1", "i2", "i3", "i4", "i5", "i6", "i7", "i8", "i9", "y", "i", "require_nd_accessors", "__commonJSMin", "exports", "module", "numel", "vind2bind", "zeros", "setViewOffsets", "offsets", "MODE", "unarynd", "fcn", "arrays", "views", "strides", "strategy", "opts", "ybuf", "len", "set", "sh", "iv", "io", "N", "v", "y", "i", "j", "require_d", "__commonJSMin", "exports", "module", "without", "unary0d", "fcn", "arrays", "strategy", "opts", "require_d", "__commonJSMin", "exports", "module", "incrementOffsets", "setViewOffsets", "offsets", "unary1d", "fcn", "arrays", "views", "strides", "strategy", "opts", "ybuf", "dv0", "sh", "S0", "iv", "i0", "y", "i", "require_d", "__commonJSMin", "exports", "module", "isRowMajor", "incrementOffsets", "setViewOffsets", "offsets", "unary2d", "fcn", "arrays", "views", "strides", "strategy", "opts", "ybuf", "dv0", "dv1", "sh", "S0", "S1", "sv", "iv", "i0", "i1", "y", "i", "require_d", "__commonJSMin", "exports", "module", "isRowMajor", "incrementOffsets", "setViewOffsets", "offsets", "unary3d", "fcn", "arrays", "views", "strides", "strategy", "opts", "ybuf", "dv0", "dv1", "dv2", "sh", "S0", "S1", "S2", "sv", "iv", "i0", "i1", "i2", "y", "i", "require_d", "__commonJSMin", "exports", "module", "isRowMajor", "incrementOffsets", "setViewOffsets", "offsets", "unary4d", "fcn", "arrays", "views", "strides", "strategy", "opts", "ybuf", "dv0", "dv1", "dv2", "dv3", "sh", "S0", "S1", "S2", "S3", "sv", "iv", "i0", "i1", "i2", "i3", "y", "i", "require_d", "__commonJSMin", "exports", "module", "isRowMajor", "incrementOffsets", "setViewOffsets", "offsets", "unary5d", "fcn", "arrays", "views", "strides", "strategy", "opts", "ybuf", "dv0", "dv1", "dv2", "dv3", "dv4", "sh", "S0", "S1", "S2", "S3", "S4", "sv", "iv", "i0", "i1", "i2", "i3", "i4", "y", "i", "require_d", "__commonJSMin", "exports", "module", "isRowMajor", "incrementOffsets", "setViewOffsets", "offsets", "unary6d", "fcn", "arrays", "views", "strides", "strategy", "opts", "ybuf", "dv0", "dv1", "dv2", "dv3", "dv4", "dv5", "sh", "S0", "S1", "S2", "S3", "S4", "S5", "sv", "iv", "i0", "i1", "i2", "i3", "i4", "i5", "y", "i", "require_d", "__commonJSMin", "exports", "module", "isRowMajor", "incrementOffsets", "setViewOffsets", "offsets", "unary7d", "fcn", "arrays", "views", "strides", "strategy", "opts", "ybuf", "dv0", "dv1", "dv2", "dv3", "dv4", "dv5", "dv6", "sh", "S0", "S1", "S2", "S3", "S4", "S5", "S6", "sv", "iv", "i0", "i1", "i2", "i3", "i4", "i5", "i6", "y", "i", "require_d", "__commonJSMin", "exports", "module", "isRowMajor", "incrementOffsets", "setViewOffsets", "offsets", "unary8d", "fcn", "arrays", "views", "strides", "strategy", "opts", "ybuf", "dv0", "dv1", "dv2", "dv3", "dv4", "dv5", "dv6", "dv7", "sh", "S0", "S1", "S2", "S3", "S4", "S5", "S6", "S7", "sv", "iv", "i0", "i1", "i2", "i3", "i4", "i5", "i6", "i7", "y", "i", "require_d", "__commonJSMin", "exports", "module", "isRowMajor", "incrementOffsets", "setViewOffsets", "offsets", "unary9d", "fcn", "arrays", "views", "strides", "strategy", "opts", "ybuf", "dv0", "dv1", "dv2", "dv3", "dv4", "dv5", "dv6", "dv7", "dv8", "sh", "S0", "S1", "S2", "S3", "S4", "S5", "S6", "S7", "S8", "sv", "iv", "i0", "i1", "i2", "i3", "i4", "i5", "i6", "i7", "i8", "y", "i", "require_d", "__commonJSMin", "exports", "module", "isRowMajor", "incrementOffsets", "setViewOffsets", "offsets", "unary10d", "fcn", "arrays", "views", "strides", "strategy", "opts", "ybuf", "dv0", "dv1", "dv2", "dv3", "dv4", "dv5", "dv6", "dv7", "dv8", "dv9", "sh", "S0", "S1", "S2", "S3", "S4", "S5", "S6", "S7", "S8", "S9", "sv", "iv", "i0", "i1", "i2", "i3", "i4", "i5", "i6", "i7", "i8", "i9", "y", "i", "require_nd", "__commonJSMin", "exports", "module", "numel", "vind2bind", "zeros", "setViewOffsets", "offsets", "MODE", "unarynd", "fcn", "arrays", "views", "strides", "strategy", "opts", "ybuf", "len", "sh", "iv", "io", "N", "v", "y", "i", "j", "require_main", "__commonJSMin", "exports", "module", "ndarray2object", "normalizeIndices", "indicesComplement", "takeIndexed2", "iterationOrder", "numel", "join", "format", "initializeViews", "reshapeStrategy", "blockedaccessorunary2d", "blockedaccessorunary3d", "blockedaccessorunary4d", "blockedaccessorunary5d", "blockedaccessorunary6d", "blockedaccessorunary7d", "blockedaccessorunary8d", "blockedaccessorunary9d", "blockedaccessorunary10d", "blockedunary2d", "blockedunary3d", "blockedunary4d", "blockedunary5d", "blockedunary6d", "blockedunary7d", "blockedunary8d", "blockedunary9d", "blockedunary10d", "accessorunary0d", "accessorunary1d", "accessorunary2d", "accessorunary3d", "accessorunary4d", "accessorunary5d", "accessorunary6d", "accessorunary7d", "accessorunary8d", "accessorunary9d", "accessorunary10d", "accessorunarynd", "unary0d", "unary1d", "unary2d", "unary3d", "unary4d", "unary5d", "unary6d", "unary7d", "unary8d", "unary9d", "unary10d", "unarynd", "UNARY", "ACCESSOR_UNARY", "BLOCKED_UNARY", "BLOCKED_ACCESSOR_UNARY", "MAX_DIMS", "unaryReduceStrided1d", "fcn", "arrays", "dims", "options", "strategy", "views", "ndims", "ldims", "opts", "arr", "tmp", "len", "shx", "shc", "shl", "iox", "ioy", "sc", "sl", "sy", "ns", "s", "N", "M", "K", "x", "y", "i", "require_factory", "__commonJSMin", "exports", "module", "isFunction", "format", "reduce", "factory", "fcn", "reducer", "arrays", "dims", "options", "opts", "setReadOnly", "main", "factory"]
}
