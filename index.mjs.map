{"version":3,"file":"index.mjs","sources":["../lib/reshape_strategy.js","../lib/increment_offsets.js","../lib/set_view_offsets.js","../lib/offsets.js","../lib/nd_accessors.js","../lib/nd.js","../lib/main.js","../lib/0d.js","../lib/1d.js","../lib/2d.js","../lib/3d.js","../lib/4d.js","../lib/5d.js","../lib/6d.js","../lib/7d.js","../lib/8d.js","../lib/9d.js","../lib/10d.js","../lib/0d_accessors.js","../lib/1d_accessors.js","../lib/2d_accessors.js","../lib/3d_accessors.js","../lib/4d_accessors.js","../lib/5d_accessors.js","../lib/6d_accessors.js","../lib/7d_accessors.js","../lib/8d_accessors.js","../lib/9d_accessors.js","../lib/10d_accessors.js","../lib/2d_blocked.js","../lib/3d_blocked.js","../lib/4d_blocked.js","../lib/5d_blocked.js","../lib/6d_blocked.js","../lib/7d_blocked.js","../lib/8d_blocked.js","../lib/9d_blocked.js","../lib/10d_blocked.js","../lib/2d_blocked_accessors.js","../lib/3d_blocked_accessors.js","../lib/4d_blocked_accessors.js","../lib/5d_blocked_accessors.js","../lib/6d_blocked_accessors.js","../lib/7d_blocked_accessors.js","../lib/8d_blocked_accessors.js","../lib/9d_blocked_accessors.js","../lib/10d_blocked_accessors.js","../lib/initialize_array_views.js","../lib/factory.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport iterationOrder from '@stdlib/ndarray-base-iteration-order';\nimport { assign as minmaxViewBufferIndex } from '@stdlib/ndarray-base-minmax-view-buffer-index';\nimport ndarraylike2object from '@stdlib/ndarray-base-ndarraylike2object';\nimport assign from '@stdlib/ndarray-base-assign';\nimport ndarraylike2ndarray from '@stdlib/ndarray-base-ndarraylike2ndarray';\nimport emptyLike from '@stdlib/ndarray-base-empty-like';\n\n\n// FUNCTIONS //\n\n/**\n* Returns an input ndarray.\n*\n* @private\n* @param {ndarrayLike} x - input ndarray\n* @returns {ndarrayLike} input ndarray\n*/\nfunction identity( x ) {\n\treturn x;\n}\n\n/**\n* Broadcasts a zero-dimensional ndarray to a one-dimensional ndarray view containing a single element.\n*\n* @private\n* @param {ndarrayLike} x - input ndarray\n* @returns {ndarrayLike} broadcasted ndarray view\n*/\nfunction broadcast( x ) {\n\t// NOTE: the following properties must be set in the exact same order as in `x` in order to ensure that the returned object has the same hidden shape as the input ndarray-like object...\n\treturn {\n\t\t'dtype': x.dtype,\n\t\t'data': x.data,\n\t\t'shape': [ 1 ],\n\t\t'strides': [ 0 ],\n\t\t'offset': x.offset,\n\t\t'order': x.order\n\t};\n}\n\n/**\n* Returns a function which returns an ndarray view in which the singleton dimensions are removed from an input ndarray having only a single non-singleton dimension.\n*\n* @private\n* @param {ndarrayLike} arr - original ndarray\n* @param {NonNegativeInteger} index - index of the non-singleton dimension\n* @returns {Function} function for returning an ndarray view\n*/\nfunction squeeze( arr, index ) {\n\tvar sh = [ arr.shape[ index ] ];\n\tvar sx = [ arr.strides[ index ] ];\n\treturn reshape;\n\n\t/**\n\t* Returns an ndarray view in which the singleton dimensions are removed from an input ndarray having only a single non-singleton dimension.\n\t*\n\t* @private\n\t* @param {ndarrayLike} x - input ndarray\n\t* @returns {ndarrayLike} a squeezed ndarray view\n\t*/\n\tfunction reshape( x ) {\n\t\t// NOTE: the following properties must be set in the exact same order as in `arr` in order to ensure that the returned object has the same hidden shape as the input ndarray-like object...\n\t\treturn {\n\t\t\t'dtype': x.dtype,\n\t\t\t'data': x.data,\n\t\t\t'shape': sh,\n\t\t\t'strides': sx,\n\t\t\t'offset': x.offset,\n\t\t\t'order': x.order\n\t\t};\n\t}\n}\n\n/**\n* Returns a function which returns a one-dimensional ndarray view of a contiguous input ndarray having more than one dimension.\n*\n* @private\n* @param {NonNegativeInteger} len - number of elements in an ndarray\n* @param {integer} iox - iteration order\n* @returns {Function} function for returning a one-dimensional ndarray view\n*/\nfunction contiguous( len, iox ) {\n\tvar xmmv;\n\tvar ind;\n\tvar sh;\n\tvar sx;\n\n\t// Resolve the index of the min/max view buffer element which is the first indexed element...\n\tif ( iox === 1 ) {\n\t\tind = 0;\n\t} else {\n\t\tind = 1;\n\t}\n\t// Initialize an array for storing the min/max view buffer elements:\n\txmmv = [ 0, 0 ]; // [ min, max ]\n\n\t// Initialize the output one-dimensional view's shape and strides:\n\tsh = [ len ];\n\tsx = [ iox ];\n\n\treturn reshape;\n\n\t/**\n\t* Returns a one-dimensional ndarray view of a contiguous input ndarray having more than one dimension.\n\t*\n\t* @private\n\t* @param {ndarrayLike} x - input ndarray\n\t* @returns {ndarrayLike} a one-dimensional ndarray view\n\t*/\n\tfunction reshape( x ) {\n\t\t// Resolve the minimum and maximum linear indices in the underlying data buffer which are accessible to the input ndarray view:\n\t\tminmaxViewBufferIndex( x.shape, x.strides, x.offset, xmmv );\n\n\t\t// NOTE: the following properties must be set in the exact same order as in `x` in order to ensure that the returned object has the same hidden shape as the input ndarray-like object...\n\t\treturn {\n\t\t\t'dtype': x.dtype,\n\t\t\t'data': x.data,\n\t\t\t'shape': sh,\n\t\t\t'strides': sx,\n\t\t\t'offset': xmmv[ ind ], // the index of the first indexed element\n\t\t\t'order': x.order\n\t\t};\n\t}\n}\n\n/**\n* Returns a function which copies an input ndarray to a contiguous ndarray workspace.\n*\n* @private\n* @param {NonNegativeInteger} len - number of elements in an ndarray\n* @param {ndarrayLike} workspace - ndarray workspace\n* @returns {Function} function which copies an input ndarray to a contiguous ndarray workspace\n*/\nfunction copy( len, workspace ) {\n\t// NOTE: the following properties must be set in the exact same order as in the input ndarray-like object in order to ensure that the returned object has the same hidden shape...\n\tvar view = {\n\t\t'dtype': workspace.dtype,\n\t\t'data': workspace.data,\n\t\t'shape': [ len ],\n\t\t'strides': [ 1 ],\n\t\t'offset': workspace.offset,\n\t\t'order': workspace.order\n\t};\n\treturn reshape;\n\n\t/**\n\t* Copies an input ndarray to a contiguous ndarray workspace and returns a one-dimensional workspace view.\n\t*\n\t* @private\n\t* @param {ndarrayLike} x - input ndarray\n\t* @returns {ndarrayLike} one-dimensional workspace view\n\t*/\n\tfunction reshape( x ) {\n\t\tassign( [ x, workspace ] );\n\t\treturn view;\n\t}\n}\n\n\n// MAIN //\n\n/**\n* Returns a function for reshaping input ndarrays which have the same data type, shape, and strides as a provided ndarray.\n*\n* @private\n* @param {ndarrayLike} x - input ndarray\n* @param {string} x.dtype - input ndarray data type\n* @param {Collection} x.data - input ndarray data buffer\n* @param {NonNegativeIntegerArray} x.shape - input ndarray shape\n* @param {IntegerArray} x.strides - input ndarray strides\n* @param {NonNegativeInteger} x.offset - input ndarray index offset\n* @param {string} x.order - input ndarray memory layout\n* @returns {Function} function implementing a reshape strategy\n*/\nfunction strategy( x ) {\n\tvar ndims;\n\tvar xmmv;\n\tvar len;\n\tvar iox;\n\tvar sh;\n\tvar ns;\n\tvar i;\n\n\t// Resolve the number of array dimensions:\n\tsh = x.shape;\n\tndims = sh.length;\n\n\t// Check whether the ndarray is zero-dimensional...\n\tif ( ndims === 0 ) {\n\t\treturn broadcast;\n\t}\n\t// Check whether the ndarray is already one-dimensional...\n\tif ( ndims === 1 ) {\n\t\treturn identity;\n\t}\n\t// Determine the number of singleton dimensions...\n\tlen = 1; // number of elements\n\tns = 0;  // number of singleton dimensions\n\tfor ( i = 0; i < ndims; i++ ) {\n\t\t// Check whether the current dimension is a singleton dimension...\n\t\tif ( sh[ i ] === 1 ) {\n\t\t\tns += 1;\n\t\t}\n\t\tlen *= sh[ i ];\n\t}\n\t// Determine whether the ndarray has only **one** non-singleton dimension (e.g., ndims=4, shape=[10,1,1,1]) so that we can simply create an ndarray view without the singleton dimensions...\n\tif ( ns === ndims-1 ) {\n\t\t// Get the index of the non-singleton dimension...\n\t\tfor ( i = 0; i < ndims; i++ ) {\n\t\t\tif ( sh[ i ] !== 1 ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn squeeze( x, i );\n\t}\n\tiox = iterationOrder( x.strides ); // +/-1\n\n\t// Determine whether we can avoid copying data...\n\tif ( iox !== 0 ) {\n\t\t// Determine the minimum and maximum linear indices which are accessible by the ndarray view:\n\t\txmmv = minmaxViewBufferIndex( sh, x.strides, x.offset, [ 0, 0 ] );\n\n\t\t// Determine whether we can ignore shape (and strides) and create a new one-dimensional ndarray view...\n\t\tif ( len === ( xmmv[1]-xmmv[0]+1 ) ) {\n\t\t\treturn contiguous( len, iox );\n\t\t}\n\t\t// The ndarray is non-contiguous, so we cannot directly interpret as a one-dimensional ndarray...\n\n\t\t// Fall-through to copying to a workspace ndarray...\n\t}\n\t// At this point, we're dealing with a non-contiguous multi-dimensional ndarray, so we need to copy to a contiguous workspace:\n\treturn copy( len, ndarraylike2object( emptyLike( ndarraylike2ndarray( x ) ) ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default strategy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Increments index offsets according to a list of increments.\n*\n* ## Notes\n*\n* -   This function mutates the list of index offsets.\n*\n* @private\n* @param {NonNegativeIntegerArray} offsets - list of index offsets\n* @param {NonNegativeIntegerArray} inc - list of increments\n* @returns {NonNegativeIntegerArray} updated offsets\n*/\nfunction incrementOffsets( offsets, inc ) {\n\tvar i;\n\tfor ( i = 0; i < offsets.length; i++ ) {\n\t\toffsets[ i ] += inc[ i ];\n\t}\n\treturn offsets;\n}\n\n\n// EXPORTS //\n\nexport default incrementOffsets;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Sets view offsets according to a list of index offsets.\n*\n* ## Notes\n*\n* -   This function skips the second element in the list of index offsets, as that is assumed to correspond to the output ndarray which does not have a corresponding view. Meaning, the list of views is expected to have `N` elements, and the list of index offsets is expected to have `N+1` elements.\n* -   This function mutates the provides view objects.\n*\n* @private\n* @param {Array<Object>} views - list of ndarray-like objects representing ndarray views\n* @param {NonNegativeIntegerArray} offsets - list of index offsets\n* @returns {Array<Object>} updated views\n*/\nfunction setViewOffsets( views, offsets ) {\n\tvar i;\n\tvar j;\n\tfor ( i = 0, j = 0; i < offsets.length; i++ ) {\n\t\tif ( i === 1 ) { // note: expected to correspond to the output ndarray which does not have a corresponding view\n\t\t\tcontinue;\n\t\t}\n\t\tviews[ j ].offset = offsets[ i ];\n\t\tj += 1;\n\t}\n\treturn views;\n}\n\n\n// EXPORTS //\n\nexport default setViewOffsets;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Resolves index offsets from a list of ndarray-like objects.\n*\n* @private\n* @param {ArrayLikeObject<Object>} arrays - list of ndarray-like objects\n* @returns {NonNegativeIntegerArray} list of offsets\n*/\nfunction offsets( arrays ) {\n\tvar out = [];\n\tvar i;\n\tfor ( i = 0; i < arrays.length; i++ ) {\n\t\tout.push( arrays[ i ].offset );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default offsets;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport numel from '@stdlib/ndarray-base-numel';\nimport vind2bind from '@stdlib/ndarray-base-vind2bind';\nimport copyIndexed from '@stdlib/array-base-copy-indexed';\nimport zeros from '@stdlib/array-base-zeros';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// VARIABLES //\n\nvar MODE = 'throw';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import Float64Array from '@stdlib/array-float64';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import getStride from '@stdlib/ndarray-base-stride';\n* import getOffset from '@stdlib/ndarray-base-offset';\n* import getData from '@stdlib/ndarray-base-data-buffer';\n* import numelDimension from '@stdlib/ndarray-base-numel-dimension';\n* import { ndarray as gsum } from '@stdlib/blas-ext-base-gsum';\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( new Float64Array( [ 0.0, 0.0, 0.0 ] ) );\n*\n* // Define the array shapes:\n* var xsh = [ 3, 2, 2 ];\n* var ysh = [ 3 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 2, 1 ];\n* var sy = [ 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* unarynd( wrapper, [ x, y ], views, [ 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ 10.0, 26.0, 42.0 ]\n*/\nfunction unarynd( fcn, arrays, views, strides, strategy, opts ) {\n\tvar ybuf;\n\tvar len;\n\tvar arr;\n\tvar set;\n\tvar sh;\n\tvar iv;\n\tvar io;\n\tvar N;\n\tvar y;\n\tvar v;\n\tvar i;\n\tvar j;\n\n\tN = arrays.length;\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Compute the total number of elements over which to iterate:\n\tlen = numel( sh );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Iterate based on the linear **view** index, regardless as to how the data is stored in memory...\n\tio = zeros( N );\n\tfor ( i = 0; i < len; i++ ) {\n\t\tfor ( j = 0; j < N; j++ ) {\n\t\t\tarr = arrays[ j ];\n\t\t\tio[ j ] = vind2bind( sh, arr.strides, iv[ j ], arr.order, i, MODE );\n\t\t}\n\t\tsetViewOffsets( views, io );\n\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\tset( ybuf, io[1], fcn( v, opts ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unarynd;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport numel from '@stdlib/ndarray-base-numel';\nimport vind2bind from '@stdlib/ndarray-base-vind2bind';\nimport copyIndexed from '@stdlib/array-base-copy-indexed';\nimport zeros from '@stdlib/array-base-zeros';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// VARIABLES //\n\nvar MODE = 'throw';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import getStride from '@stdlib/ndarray-base-stride';\n* import getOffset from '@stdlib/ndarray-base-offset';\n* import getData from '@stdlib/ndarray-base-data-buffer';\n* import numelDimension from '@stdlib/ndarray-base-numel-dimension';\n* import { ndarray as gsum } from '@stdlib/blas-ext-base-gsum';\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 3, 2, 2 ];\n* var ysh = [ 3 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 2, 1 ];\n* var sy = [ 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* unarynd( wrapper, [ x, y ], views, [ 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ 10.0, 26.0, 42.0 ]\n*/\nfunction unarynd( fcn, arrays, views, strides, strategy, opts ) {\n\tvar ybuf;\n\tvar len;\n\tvar arr;\n\tvar sh;\n\tvar iv;\n\tvar io;\n\tvar N;\n\tvar y;\n\tvar v;\n\tvar i;\n\tvar j;\n\n\tN = arrays.length;\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Compute the total number of elements over which to iterate:\n\tlen = numel( sh );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Iterate based on the linear **view** index, regardless as to how the data is stored in memory...\n\tio = zeros( N );\n\tfor ( i = 0; i < len; i++ ) {\n\t\tfor ( j = 0; j < N; j++ ) {\n\t\t\tarr = arrays[ j ];\n\t\t\tio[ j ] = vind2bind( sh, arr.strides, iv[ j ], arr.order, i, MODE );\n\t\t}\n\t\tsetViewOffsets( views, io );\n\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\tybuf[ io[1] ] = fcn( v, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unarynd;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport ndarray2object from '@stdlib/ndarray-base-ndarraylike2object';\nimport normalizeIndices from '@stdlib/ndarray-base-to-unique-normalized-indices';\nimport indicesComplement from '@stdlib/array-base-indices-complement';\nimport takeIndexed2 from '@stdlib/array-base-take-indexed2';\nimport iterationOrder from '@stdlib/ndarray-base-iteration-order';\nimport numel from '@stdlib/ndarray-base-numel';\nimport join from '@stdlib/array-base-join';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport initializeViews from './initialize_array_views.js';\nimport reshapeStrategy from './reshape_strategy.js';\nimport blockedaccessorunary2d from './2d_blocked_accessors.js';\nimport blockedaccessorunary3d from './3d_blocked_accessors.js';\nimport blockedaccessorunary4d from './4d_blocked_accessors.js';\nimport blockedaccessorunary5d from './5d_blocked_accessors.js';\nimport blockedaccessorunary6d from './6d_blocked_accessors.js';\nimport blockedaccessorunary7d from './7d_blocked_accessors.js';\nimport blockedaccessorunary8d from './8d_blocked_accessors.js';\nimport blockedaccessorunary9d from './9d_blocked_accessors.js';\nimport blockedaccessorunary10d from './10d_blocked_accessors.js';\nimport blockedunary2d from './2d_blocked.js';\nimport blockedunary3d from './3d_blocked.js';\nimport blockedunary4d from './4d_blocked.js';\nimport blockedunary5d from './5d_blocked.js';\nimport blockedunary6d from './6d_blocked.js';\nimport blockedunary7d from './7d_blocked.js';\nimport blockedunary8d from './8d_blocked.js';\nimport blockedunary9d from './9d_blocked.js';\nimport blockedunary10d from './10d_blocked.js';\nimport accessorunary0d from './0d_accessors.js';\nimport accessorunary1d from './1d_accessors.js';\nimport accessorunary2d from './2d_accessors.js';\nimport accessorunary3d from './3d_accessors.js';\nimport accessorunary4d from './4d_accessors.js';\nimport accessorunary5d from './5d_accessors.js';\nimport accessorunary6d from './6d_accessors.js';\nimport accessorunary7d from './7d_accessors.js';\nimport accessorunary8d from './8d_accessors.js';\nimport accessorunary9d from './9d_accessors.js';\nimport accessorunary10d from './10d_accessors.js';\nimport accessorunarynd from './nd_accessors.js';\nimport unary0d from './0d.js';\nimport unary1d from './1d.js';\nimport unary2d from './2d.js';\nimport unary3d from './3d.js';\nimport unary4d from './4d.js';\nimport unary5d from './5d.js';\nimport unary6d from './6d.js';\nimport unary7d from './7d.js';\nimport unary8d from './8d.js';\nimport unary9d from './9d.js';\nimport unary10d from './10d.js';\nimport unarynd from './nd.js';\n\n\n// VARIABLES //\n\nvar UNARY = [\n\tunary0d,\n\tunary1d,\n\tunary2d,\n\tunary3d,\n\tunary4d,\n\tunary5d,\n\tunary6d,\n\tunary7d,\n\tunary8d,\n\tunary9d,\n\tunary10d\n];\nvar ACCESSOR_UNARY = [\n\taccessorunary0d,\n\taccessorunary1d,\n\taccessorunary2d,\n\taccessorunary3d,\n\taccessorunary4d,\n\taccessorunary5d,\n\taccessorunary6d,\n\taccessorunary7d,\n\taccessorunary8d,\n\taccessorunary9d,\n\taccessorunary10d\n];\nvar BLOCKED_UNARY = [\n\tblockedunary2d, // 0\n\tblockedunary3d,\n\tblockedunary4d,\n\tblockedunary5d,\n\tblockedunary6d,\n\tblockedunary7d,\n\tblockedunary8d,\n\tblockedunary9d,\n\tblockedunary10d // 8\n];\nvar BLOCKED_ACCESSOR_UNARY = [\n\tblockedaccessorunary2d, // 0\n\tblockedaccessorunary3d,\n\tblockedaccessorunary4d,\n\tblockedaccessorunary5d,\n\tblockedaccessorunary6d,\n\tblockedaccessorunary7d,\n\tblockedaccessorunary8d,\n\tblockedaccessorunary9d,\n\tblockedaccessorunary10d // 8\n];\nvar MAX_DIMS = UNARY.length - 1;\n\n\n// MAIN //\n\n/**\n* Performs a reduction over a list of specified dimensions in an input ndarray via a one-dimensional strided array reduction function and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {ArrayLikeObject<Object>} arrays - array-like object containing ndarrays\n* @param {IntegerArray} dims - list of dimensions over which to perform a reduction\n* @param {Options} [options] - function options\n* @throws {Error} arrays must have the expected number of dimensions\n* @throws {RangeError} dimension indices must not exceed input ndarray bounds\n* @throws {RangeError} number of dimension indices must not exceed the number of input ndarray dimensions\n* @throws {Error} must provide unique dimension indices\n* @throws {Error} arrays must have the same loop dimension sizes\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import getStride from '@stdlib/ndarray-base-stride';\n* import getOffset from '@stdlib/ndarray-base-offset';\n* import getData from '@stdlib/ndarray-base-data-buffer';\n* import numelDimension from '@stdlib/ndarray-base-numel-dimension';\n* import { ndarray as gsum } from '@stdlib/blas-ext-base-gsum';\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 3, 2, 2 ];\n* var ysh = [ 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Perform a reduction:\n* unaryReduceStrided1d( wrapper, [ x, y ], [ 2, 3 ] );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ 10.0, 26.0, 42.0 ] ]\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import getStride from '@stdlib/ndarray-base-stride';\n* import getOffset from '@stdlib/ndarray-base-offset';\n* import getData from '@stdlib/ndarray-base-data-buffer';\n* import numelDimension from '@stdlib/ndarray-base-numel-dimension';\n* import { ndarray as gsum } from '@stdlib/blas-ext-base-gsum';\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 3, 2, 2 ];\n* var ysh = [];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 0 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Perform a reduction:\n* unaryReduceStrided1d( wrapper, [ x, y ], [ 0, 1, 2, 3 ] );\n*\n* var v = y.data;\n* // returns <Float64Array>[ 78.0 ]\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import getStride from '@stdlib/ndarray-base-stride';\n* import getOffset from '@stdlib/ndarray-base-offset';\n* import getData from '@stdlib/ndarray-base-data-buffer';\n* import numelDimension from '@stdlib/ndarray-base-numel-dimension';\n* import { ndarray as gsum } from '@stdlib/blas-ext-base-gsum';\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 3, 2, 2 ];\n* var ysh = [ 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 2, 1 ];\n* var sy = [ 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Perform a reduction:\n* unaryReduceStrided1d( wrapper, [ x, y ], [] );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ 1.0, 2.0 ], [ 3.0, 4.0 ] ], [ [ 5.0, 6.0 ], [ 7.0, 8.0 ] ], [ [ 9.0, 10.0 ], [ 11.0, 12.0 ] ] ]\n*/\nfunction unaryReduceStrided1d( fcn, arrays, dims, options ) { // eslint-disable-line max-statements\n\tvar strategy;\n\tvar views;\n\tvar ndims;\n\tvar ldims;\n\tvar opts;\n\tvar arr;\n\tvar tmp;\n\tvar len;\n\tvar shx;\n\tvar shc;\n\tvar shl;\n\tvar iox;\n\tvar ioy;\n\tvar sc;\n\tvar sl;\n\tvar sy;\n\tvar ns;\n\tvar d;\n\tvar s;\n\tvar N;\n\tvar M;\n\tvar K;\n\tvar x;\n\tvar y;\n\tvar i;\n\tvar j;\n\n\tif ( arguments.length > 3 ) {\n\t\topts = options;\n\t} else {\n\t\topts = {};\n\t}\n\t// Standardize ndarray meta data...\n\tN = arrays.length;\n\tarr = [];\n\tfor ( i = 0; i < N; i++ ) {\n\t\tarr.push( ndarray2object( arrays[ i ] ) );\n\t}\n\t// Cache references to the input and output arrays:\n\tx = arr[ 0 ];\n\ty = arr[ 1 ];\n\n\t// Resolve the number of input array dimensions:\n\tshx = x.shape;\n\tndims = shx.length;\n\n\t// Verify that we've been provided a list of unique dimension indices...\n\tM = dims.length;\n\td = normalizeIndices( dims, ndims-1 );\n\tif ( d === null ) {\n\t\tthrow new RangeError( format( 'invalid argument. Third argument contains an out-of-bounds dimension index. Value: [%s].', join( dims, ',' ) ) );\n\t}\n\td.sort();\n\tif ( d.length !== M ) {\n\t\tthrow new Error( format( 'invalid argument. Third argument must contain a list of unique dimension indices. Value: [%s].', join( dims, ',' ) ) );\n\t}\n\t// Check whether we've been provided a valid number of dimensions to reduce...\n\tif ( M > ndims ) {\n\t\tthrow new RangeError( format( 'invalid argument. Number of specified dimensions cannot exceed the number of dimensions in the input array. Number of dimensions: %d. Value: [%s].', ndims, join( dims, ',' ) ) );\n\t}\n\t// Verify that provided ndarrays have the expected number of dimensions...\n\tK = ndims - M;\n\tfor ( i = 1; i < N; i++ ) {\n\t\tif ( arr[ i ].shape.length !== K ) {\n\t\t\tthrow new Error( format( 'invalid argument. Arrays which are not being reduced must have the same number of non-reduced dimensions. Input array shape: [%s]. Number of non-reduced dimensions: %d. Array shape: [%s] (index: %d).', join( shx, ',' ), K, join( arr[ i ].shape, ',' ), i ) );\n\t\t}\n\t}\n\t// Resolve the non-reduced (\"loop\") dimensions and associated strides:\n\tldims = indicesComplement( shx.length, d );\n\ttmp = takeIndexed2( shx, x.strides, ldims );\n\tshl = tmp[ 0 ];\n\tsl = tmp[ 1 ];\n\n\t// Resolve the reduced (\"core\") dimensions and associated strides:\n\ttmp = takeIndexed2( shx, x.strides, d );\n\tshc = tmp[ 0 ];\n\tsc = tmp[ 1 ];\n\n\t// Verify that the provided arrays have the same loop dimensions...\n\tlen = 1; // number of elements\n\tns = 0;  // number of singleton dimensions\n\tfor ( i = 0; i < K; i++ ) {\n\t\ts = shl[ i ];\n\t\tfor ( j = 1; j < N; j++ ) {\n\t\t\tif ( s !== arr[ j ].shape[ i ] ) {\n\t\t\t\tthrow new Error( format( 'invalid argument. Non-reduced dimensions must be consistent across all provided arrays. Input array shape: [%s]. Non-reduced dimension indices: [%s]. Non-reduced dimensions: [%s]. Array shape: [%s] (index: %d).', join( shx, ',' ), join( ldims, ',' ), join( shl, ',' ), join( arr[ j ].shape, ',' ), j ) );\n\t\t\t}\n\t\t}\n\t\t// Note that, if one of the dimensions is `0`, the length will be `0`...\n\t\tlen *= s;\n\n\t\t// Check whether the current dimension is a singleton dimension...\n\t\tif ( s === 1 ) {\n\t\t\tns += 1;\n\t\t}\n\t}\n\t// Check whether we were provided empty ndarrays...\n\tif ( len === 0 || ( shc.length && numel( shc ) === 0 ) ) {\n\t\treturn;\n\t}\n\t// Initialize ndarray-like objects for representing sub-array views...\n\tviews = [\n\t\t{\n\t\t\t'dtype': x.dtype,\n\t\t\t'data': x.data,\n\t\t\t'shape': shc,\n\t\t\t'strides': sc,\n\t\t\t'offset': x.offset,\n\t\t\t'order': x.order\n\t\t}\n\t];\n\tinitializeViews( arr, views );\n\n\t// Determine the strategy for reshaping sub-array views of the input array prior to performing a reduction:\n\tstrategy = reshapeStrategy( views[ 0 ] );\n\n\t// Determine whether we can avoid iteration altogether...\n\tif ( K === 0 ) {\n\t\tif ( y.accessorProtocol ) {\n\t\t\treturn ACCESSOR_UNARY[ K ]( fcn, arr, strategy, opts );\n\t\t}\n\t\treturn UNARY[ K ]( fcn, arr, strategy, opts );\n\t}\n\t// Determine whether we only have one loop dimension and can thus readily perform one-dimensional iteration...\n\tif ( K === 1 ) {\n\t\tif ( y.accessorProtocol ) {\n\t\t\treturn ACCESSOR_UNARY[ K ]( fcn, arr, views, sl, strategy, opts );\n\t\t}\n\t\treturn UNARY[ K ]( fcn, arr, views, sl, strategy, opts );\n\t}\n\tsy = y.strides;\n\n\t// Determine whether the loop dimensions have only **one** non-singleton dimension (e.g., shape=[10,1,1,1]) so that we can treat loop iteration as being equivalent to one-dimensional iteration...\n\tif ( ns === K-1 ) {\n\t\t// Get the index of the non-singleton dimension...\n\t\tfor ( i = 0; i < K; i++ ) {\n\t\t\tif ( shl[ i ] !== 1 ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\ty.shape = [ shl[i] ];\n\t\tfor ( j = 0; j < N; j++ ) {\n\t\t\tarr[ j ].strides = [ arr[j].strides[i] ];\n\t\t}\n\t\tsl = [ sl[i] ];\n\t\tif ( y.accessorProtocol ) {\n\t\t\treturn ACCESSOR_UNARY[ 1 ]( fcn, arr, views, sl, strategy, opts );\n\t\t}\n\t\treturn UNARY[ 1 ]( fcn, arr, views, sl, strategy, opts );\n\t}\n\tiox = iterationOrder( sl ); // +/-1\n\tioy = iterationOrder( sy ); // +/-1\n\n\t// Determine whether we can avoid blocked iteration...\n\tif ( iox !== 0 && ioy !== 0 && iox === ioy && K <= MAX_DIMS ) {\n\t\t// So long as iteration for each respective array always moves in the same direction (i.e., no mixed sign strides), we can leverage cache-optimal (i.e., normal) nested loops without resorting to blocked iteration...\n\t\tif ( y.accessorProtocol ) {\n\t\t\treturn ACCESSOR_UNARY[ K ]( fcn, arr, views, sl, strategy, opts );\n\t\t}\n\t\treturn UNARY[ K ]( fcn, arr, views, sl, strategy, opts );\n\t}\n\t// At this point, we're either dealing with non-contiguous n-dimensional arrays, high dimensional n-dimensional arrays, and/or arrays having differing memory layouts, so our only hope is that we can still perform blocked iteration...\n\n\t// Determine whether we can perform blocked iteration...\n\tif ( K <= MAX_DIMS ) {\n\t\tif ( y.accessorProtocol ) {\n\t\t\treturn BLOCKED_ACCESSOR_UNARY[ K-2 ]( fcn, arr, views, sl, strategy, opts ); // eslint-disable-line max-len\n\t\t}\n\t\treturn BLOCKED_UNARY[ K-2 ]( fcn, arr, views, sl, strategy, opts );\n\t}\n\t// Fall-through to linear view iteration without regard for how data is stored in memory (i.e., take the slow path)...\n\tif ( y.accessorProtocol ) {\n\t\treturn accessorunarynd( fcn, arr, views, sl, strategy, opts );\n\t}\n\tunarynd( fcn, arr, views, sl, strategy, opts );\n}\n\n\n// EXPORTS //\n\nexport default unaryReduceStrided1d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport without from '@stdlib/array-base-without';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over a list of specified dimensions in an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import getStride from '@stdlib/ndarray-base-stride';\n* import getOffset from '@stdlib/ndarray-base-offset';\n* import getData from '@stdlib/ndarray-base-data-buffer';\n* import numelDimension from '@stdlib/ndarray-base-numel-dimension';\n* import { ndarray as gsum } from '@stdlib/blas-ext-base-gsum';\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var ybuf = new Float64Array( [ 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 2, 2 ];\n* var ysh = [];\n*\n* // Define the array strides:\n* var sx = [ 2, 1 ];\n* var sy = [ 0 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* unary0d( wrapper, [ x, y ], strategy, {} );\n*\n* var v = y.data;\n* // returns <Float64Array>[ 10.0 ]\n*/\nfunction unary0d( fcn, arrays, strategy, opts ) {\n\tarrays[ 0 ] = strategy( arrays[ 0 ] );\n\tarrays[ 1 ].data[ arrays[ 1 ].offset ] = fcn( without( arrays, 1 ), opts );\n}\n\n\n// EXPORTS //\n\nexport default unary0d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport copyIndexed from '@stdlib/array-base-copy-indexed';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import getStride from '@stdlib/ndarray-base-stride';\n* import getOffset from '@stdlib/ndarray-base-offset';\n* import getData from '@stdlib/ndarray-base-data-buffer';\n* import numelDimension from '@stdlib/ndarray-base-numel-dimension';\n* import { ndarray as gsum } from '@stdlib/blas-ext-base-gsum';\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 3, 2, 2 ];\n* var ysh = [ 3 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 2, 1 ];\n* var sy = [ 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* unary1d( wrapper, [ x, y ], views, [ 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ 10.0, 26.0, 42.0 ]\n*/\nfunction unary1d( fcn, arrays, views, strides, strategy, opts ) {\n\tvar ybuf;\n\tvar dv0;\n\tvar sh;\n\tvar S0;\n\tvar iv;\n\tvar i0;\n\tvar y;\n\tvar v;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tS0 = sh[ 0 ];\n\tdv0 = [ strides[0] ];\n\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\tdv0.push( arrays[i].strides[0] );\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\tsetViewOffsets( views, iv );\n\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\tybuf[ iv[1] ] = fcn( v, opts );\n\t\tincrementOffsets( iv, dv0 );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary1d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport copyIndexed from '@stdlib/array-base-copy-indexed';\nimport isRowMajor from '@stdlib/ndarray-base-assert-is-row-major-string';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import getStride from '@stdlib/ndarray-base-stride';\n* import getOffset from '@stdlib/ndarray-base-offset';\n* import getData from '@stdlib/ndarray-base-data-buffer';\n* import numelDimension from '@stdlib/ndarray-base-numel-dimension';\n* import { ndarray as gsum } from '@stdlib/blas-ext-base-gsum';\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 3, 2, 2 ];\n* var ysh = [ 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* unary2d( wrapper, [ x, y ], views, [ 12, 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ 10.0, 26.0, 42.0 ] ]\n*/\nfunction unary2d( fcn, arrays, views, strides, strategy, opts ) {\n\tvar ybuf;\n\tvar dv0;\n\tvar dv1;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar y;\n\tvar v;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor( y.order ) ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 1 ];\n\t\tS1 = sh[ 0 ];\n\t\tdv0 = [ strides[1] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[0] - ( S0*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[1] );\n\t\t\tdv1.push( sv[0] - ( S0*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\tsetViewOffsets( views, iv );\n\t\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\t\tybuf[ iv[1] ] = fcn( v, opts );\n\t\t\tincrementOffsets( iv, dv0 );\n\t\t}\n\t\tincrementOffsets( iv, dv1 );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary2d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport copyIndexed from '@stdlib/array-base-copy-indexed';\nimport isRowMajor from '@stdlib/ndarray-base-assert-is-row-major-string';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import getStride from '@stdlib/ndarray-base-stride';\n* import getOffset from '@stdlib/ndarray-base-offset';\n* import getData from '@stdlib/ndarray-base-data-buffer';\n* import numelDimension from '@stdlib/ndarray-base-numel-dimension';\n* import { ndarray as gsum } from '@stdlib/blas-ext-base-gsum';\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* unary3d( wrapper, [ x, y ], views, [ 12, 12, 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ 10.0, 26.0, 42.0 ] ] ]\n*/\nfunction unary3d( fcn, arrays, views, strides, strategy, opts ) {\n\tvar ybuf;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar y;\n\tvar v;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor( y.order ) ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 2 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 0 ];\n\t\tdv0 = [ strides[2] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[2] ) ];\n\t\tdv2 = [ strides[0] - ( S1*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[2] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[2] ) );\n\t\t\tdv2.push( sv[0] - ( S1*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\tybuf[ iv[1] ] = fcn( v, opts );\n\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv1 );\n\t\t}\n\t\tincrementOffsets( iv, dv2 );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary3d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport copyIndexed from '@stdlib/array-base-copy-indexed';\nimport isRowMajor from '@stdlib/ndarray-base-assert-is-row-major-string';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import getStride from '@stdlib/ndarray-base-stride';\n* import getOffset from '@stdlib/ndarray-base-offset';\n* import getData from '@stdlib/ndarray-base-data-buffer';\n* import numelDimension from '@stdlib/ndarray-base-numel-dimension';\n* import { ndarray as gsum } from '@stdlib/blas-ext-base-gsum';\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* unary4d( wrapper, [ x, y ], views, [ 12, 12, 12, 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ 10.0, 26.0, 42.0 ] ] ] ]\n*/\nfunction unary4d( fcn, arrays, views, strides, strategy, opts ) {\n\tvar ybuf;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar y;\n\tvar v;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor( y.order ) ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 3 ];\n\t\tS1 = sh[ 2 ];\n\t\tS2 = sh[ 1 ];\n\t\tS3 = sh[ 0 ];\n\t\tdv0 = [ strides[3] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[2] - ( S0*strides[3] ) ];\n\t\tdv2 = [ strides[1] - ( S1*strides[2] ) ];\n\t\tdv3 = [ strides[0] - ( S2*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[3] );\n\t\t\tdv1.push( sv[2] - ( S0*sv[3] ) );\n\t\t\tdv2.push( sv[1] - ( S1*sv[2] ) );\n\t\t\tdv3.push( sv[0] - ( S2*sv[1]) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\tybuf[ iv[1] ] = fcn( v, opts );\n\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv2 );\n\t\t}\n\t\tincrementOffsets( iv, dv3 );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary4d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport copyIndexed from '@stdlib/array-base-copy-indexed';\nimport isRowMajor from '@stdlib/ndarray-base-assert-is-row-major-string';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import getStride from '@stdlib/ndarray-base-stride';\n* import getOffset from '@stdlib/ndarray-base-offset';\n* import getData from '@stdlib/ndarray-base-data-buffer';\n* import numelDimension from '@stdlib/ndarray-base-numel-dimension';\n* import { ndarray as gsum } from '@stdlib/blas-ext-base-gsum';\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* unary5d( wrapper, [ x, y ], views, [ 12, 12, 12, 12, 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ 10.0, 26.0, 42.0 ] ] ] ] ]\n*/\nfunction unary5d( fcn, arrays, views, strides, strategy, opts ) {\n\tvar ybuf;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar y;\n\tvar v;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor( y.order ) ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 4 ];\n\t\tS1 = sh[ 3 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 1 ];\n\t\tS4 = sh[ 0 ];\n\t\tdv0 = [ strides[4] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[3] - ( S0*strides[4] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[3] ) ];\n\t\tdv3 = [ strides[1] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[0] - ( S3*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[4] );\n\t\t\tdv1.push( sv[3] - ( S0*sv[4] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[3] ) );\n\t\t\tdv3.push( sv[1] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[0] - ( S3*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[3] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[3] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\tybuf[ iv[1] ] = fcn( v, opts );\n\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv3 );\n\t\t}\n\t\tincrementOffsets( iv, dv4 );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary5d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport copyIndexed from '@stdlib/array-base-copy-indexed';\nimport isRowMajor from '@stdlib/ndarray-base-assert-is-row-major-string';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import getStride from '@stdlib/ndarray-base-stride';\n* import getOffset from '@stdlib/ndarray-base-offset';\n* import getData from '@stdlib/ndarray-base-data-buffer';\n* import numelDimension from '@stdlib/ndarray-base-numel-dimension';\n* import { ndarray as gsum } from '@stdlib/blas-ext-base-gsum';\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* unary6d( wrapper, [ x, y ], views, [ 12, 12, 12, 12, 12, 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ 10.0, 26.0, 42.0 ] ] ] ] ] ]\n*/\nfunction unary6d( fcn, arrays, views, strides, strategy, opts ) {\n\tvar ybuf;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar y;\n\tvar v;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor( y.order ) ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 5 ];\n\t\tS1 = sh[ 4 ];\n\t\tS2 = sh[ 3 ];\n\t\tS3 = sh[ 2 ];\n\t\tS4 = sh[ 1 ];\n\t\tS5 = sh[ 0 ];\n\t\tdv0 = [ strides[5] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[4] - ( S0*strides[5] ) ];\n\t\tdv2 = [ strides[3] - ( S1*strides[4] ) ];\n\t\tdv3 = [ strides[2] - ( S2*strides[3] ) ];\n\t\tdv4 = [ strides[1] - ( S3*strides[2] ) ];\n\t\tdv5 = [ strides[0] - ( S4*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[5] );\n\t\t\tdv1.push( sv[4] - ( S0*sv[5] ) );\n\t\t\tdv2.push( sv[3] - ( S1*sv[4] ) );\n\t\t\tdv3.push( sv[2] - ( S2*sv[3] ) );\n\t\t\tdv4.push( sv[1] - ( S3*sv[2] ) );\n\t\t\tdv5.push( sv[0] - ( S4*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[3] ) ];\n\t\tdv5 = [ strides[5] - ( S4*strides[4] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[3] ) );\n\t\t\tdv5.push( sv[5] - ( S4*sv[4] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\tybuf[ iv[1] ] = fcn( v, opts );\n\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv4 );\n\t\t}\n\t\tincrementOffsets( iv, dv5 );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary6d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport copyIndexed from '@stdlib/array-base-copy-indexed';\nimport isRowMajor from '@stdlib/ndarray-base-assert-is-row-major-string';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import getStride from '@stdlib/ndarray-base-stride';\n* import getOffset from '@stdlib/ndarray-base-offset';\n* import getData from '@stdlib/ndarray-base-data-buffer';\n* import numelDimension from '@stdlib/ndarray-base-numel-dimension';\n* import { ndarray as gsum } from '@stdlib/blas-ext-base-gsum';\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* unary7d( wrapper, [ x, y ], views, [ 12, 12, 12, 12, 12, 12, 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ 10.0, 26.0, 42.0 ] ] ] ] ] ] ]\n*/\nfunction unary7d( fcn, arrays, views, strides, strategy, opts ) {\n\tvar ybuf;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar y;\n\tvar v;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor( y.order ) ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 6 ];\n\t\tS1 = sh[ 5 ];\n\t\tS2 = sh[ 4 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 2 ];\n\t\tS5 = sh[ 1 ];\n\t\tS6 = sh[ 0 ];\n\t\tdv0 = [ strides[6] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[5] - ( S0*strides[6] ) ];\n\t\tdv2 = [ strides[4] - ( S1*strides[5] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[4] ) ];\n\t\tdv4 = [ strides[2] - ( S3*strides[3] ) ];\n\t\tdv5 = [ strides[1] - ( S4*strides[2] ) ];\n\t\tdv6 = [ strides[0] - ( S5*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[6] );\n\t\t\tdv1.push( sv[5] - ( S0*sv[6] ) );\n\t\t\tdv2.push( sv[4] - ( S1*sv[5] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[4] ) );\n\t\t\tdv4.push( sv[2] - ( S3*sv[3] ) );\n\t\t\tdv5.push( sv[1] - ( S4*sv[2] ) );\n\t\t\tdv6.push( sv[0] - ( S5*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[3] ) ];\n\t\tdv5 = [ strides[5] - ( S4*strides[4] ) ];\n\t\tdv6 = [ strides[6] - ( S5*strides[5] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[3] ) );\n\t\t\tdv5.push( sv[5] - ( S4*sv[4] ) );\n\t\t\tdv6.push( sv[6] - ( S5*sv[5] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\t\tybuf[ iv[1] ] = fcn( v, opts );\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv5 );\n\t\t}\n\t\tincrementOffsets( iv, dv6 );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary7d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport copyIndexed from '@stdlib/array-base-copy-indexed';\nimport isRowMajor from '@stdlib/ndarray-base-assert-is-row-major-string';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import getStride from '@stdlib/ndarray-base-stride';\n* import getOffset from '@stdlib/ndarray-base-offset';\n* import getData from '@stdlib/ndarray-base-data-buffer';\n* import numelDimension from '@stdlib/ndarray-base-numel-dimension';\n* import { ndarray as gsum } from '@stdlib/blas-ext-base-gsum';\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* unary8d( wrapper, [ x, y ], views, [ 12, 12, 12, 12, 12, 12, 12, 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ 10.0, 26.0, 42.0 ] ] ] ] ] ] ] ]\n*/\nfunction unary8d( fcn, arrays, views, strides, strategy, opts ) { // eslint-disable-line max-statements\n\tvar ybuf;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar dv7;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar y;\n\tvar v;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor( y.order ) ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 7 ];\n\t\tS1 = sh[ 6 ];\n\t\tS2 = sh[ 5 ];\n\t\tS3 = sh[ 4 ];\n\t\tS4 = sh[ 3 ];\n\t\tS5 = sh[ 2 ];\n\t\tS6 = sh[ 1 ];\n\t\tS7 = sh[ 0 ];\n\t\tdv0 = [ strides[7] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[6] - ( S0*strides[7] ) ];\n\t\tdv2 = [ strides[5] - ( S1*strides[6] ) ];\n\t\tdv3 = [ strides[4] - ( S2*strides[5] ) ];\n\t\tdv4 = [ strides[3] - ( S3*strides[4] ) ];\n\t\tdv5 = [ strides[2] - ( S4*strides[3] ) ];\n\t\tdv6 = [ strides[1] - ( S5*strides[2] ) ];\n\t\tdv7 = [ strides[0] - ( S6*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[7] );\n\t\t\tdv1.push( sv[6] - ( S0*sv[7] ) );\n\t\t\tdv2.push( sv[5] - ( S1*sv[6] ) );\n\t\t\tdv3.push( sv[4] - ( S2*sv[5] ) );\n\t\t\tdv4.push( sv[3] - ( S3*sv[4] ) );\n\t\t\tdv5.push( sv[2] - ( S4*sv[3] ) );\n\t\t\tdv6.push( sv[1] - ( S5*sv[2] ) );\n\t\t\tdv7.push( sv[0] - ( S6*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[3] ) ];\n\t\tdv5 = [ strides[5] - ( S4*strides[4] ) ];\n\t\tdv6 = [ strides[6] - ( S5*strides[5] ) ];\n\t\tdv7 = [ strides[7] - ( S6*strides[6] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[3] ) );\n\t\t\tdv5.push( sv[5] - ( S4*sv[4] ) );\n\t\t\tdv6.push( sv[6] - ( S5*sv[5] ) );\n\t\t\tdv7.push( sv[7] - ( S6*sv[6] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\t\t\tybuf[ iv[1] ] = fcn( v, opts );\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv6 );\n\t\t}\n\t\tincrementOffsets( iv, dv7 );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary8d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport copyIndexed from '@stdlib/array-base-copy-indexed';\nimport isRowMajor from '@stdlib/ndarray-base-assert-is-row-major-string';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import getStride from '@stdlib/ndarray-base-stride';\n* import getOffset from '@stdlib/ndarray-base-offset';\n* import getData from '@stdlib/ndarray-base-data-buffer';\n* import numelDimension from '@stdlib/ndarray-base-numel-dimension';\n* import { ndarray as gsum } from '@stdlib/blas-ext-base-gsum';\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* unary9d( wrapper, [ x, y ], views, [ 12, 12, 12, 12, 12, 12, 12, 12, 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ [ 10.0, 26.0, 42.0 ] ] ] ] ] ] ] ] ]\n*/\nfunction unary9d( fcn, arrays, views, strides, strategy, opts ) { // eslint-disable-line max-statements\n\tvar ybuf;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar dv7;\n\tvar dv8;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar S8;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar y;\n\tvar v;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor( y.order ) ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 8 ];\n\t\tS1 = sh[ 7 ];\n\t\tS2 = sh[ 6 ];\n\t\tS3 = sh[ 5 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 3 ];\n\t\tS6 = sh[ 2 ];\n\t\tS7 = sh[ 1 ];\n\t\tS8 = sh[ 0 ];\n\t\tdv0 = [ strides[8] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[7] - ( S0*strides[8] ) ];\n\t\tdv2 = [ strides[6] - ( S1*strides[7] ) ];\n\t\tdv3 = [ strides[5] - ( S2*strides[6] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[5] ) ];\n\t\tdv5 = [ strides[3] - ( S4*strides[4] ) ];\n\t\tdv6 = [ strides[2] - ( S5*strides[3] ) ];\n\t\tdv7 = [ strides[1] - ( S6*strides[2] ) ];\n\t\tdv8 = [ strides[0] - ( S7*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[8] );\n\t\t\tdv1.push( sv[7] - ( S0*sv[8] ) );\n\t\t\tdv2.push( sv[6] - ( S1*sv[7] ) );\n\t\t\tdv3.push( sv[5] - ( S2*sv[6] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[5] ) );\n\t\t\tdv5.push( sv[3] - ( S4*sv[4] ) );\n\t\t\tdv6.push( sv[2] - ( S5*sv[3] ) );\n\t\t\tdv7.push( sv[1] - ( S6*sv[2] ) );\n\t\t\tdv8.push( sv[0] - ( S7*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tS8 = sh[ 8 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[3] ) ];\n\t\tdv5 = [ strides[5] - ( S4*strides[4] ) ];\n\t\tdv6 = [ strides[6] - ( S5*strides[5] ) ];\n\t\tdv7 = [ strides[7] - ( S6*strides[6] ) ];\n\t\tdv8 = [ strides[8] - ( S7*strides[7] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[3] ) );\n\t\t\tdv5.push( sv[5] - ( S4*sv[4] ) );\n\t\t\tdv6.push( sv[6] - ( S5*sv[5] ) );\n\t\t\tdv7.push( sv[7] - ( S6*sv[6] ) );\n\t\t\tdv8.push( sv[8] - ( S7*sv[7] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i8 = 0; i8 < S8; i8++ ) {\n\t\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\t\t\t\tybuf[ iv[1] ] = fcn( v, opts );\n\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv6 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv7 );\n\t\t}\n\t\tincrementOffsets( iv, dv8 );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary9d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport copyIndexed from '@stdlib/array-base-copy-indexed';\nimport isRowMajor from '@stdlib/ndarray-base-assert-is-row-major-string';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import getStride from '@stdlib/ndarray-base-stride';\n* import getOffset from '@stdlib/ndarray-base-offset';\n* import getData from '@stdlib/ndarray-base-data-buffer';\n* import numelDimension from '@stdlib/ndarray-base-numel-dimension';\n* import { ndarray as gsum } from '@stdlib/blas-ext-base-gsum';\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* unary10d( wrapper, [ x, y ], views, [ 12, 12, 12, 12, 12, 12, 12, 12, 12, 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ [ [ 10.0, 26.0, 42.0 ] ] ] ] ] ] ] ] ] ]\n*/\nfunction unary10d( fcn, arrays, views, strides, strategy, opts ) { // eslint-disable-line max-statements\n\tvar ybuf;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar dv7;\n\tvar dv8;\n\tvar dv9;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar S8;\n\tvar S9;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar i9;\n\tvar y;\n\tvar v;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor( y.order ) ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 9 ];\n\t\tS1 = sh[ 8 ];\n\t\tS2 = sh[ 7 ];\n\t\tS3 = sh[ 6 ];\n\t\tS4 = sh[ 5 ];\n\t\tS5 = sh[ 4 ];\n\t\tS6 = sh[ 3 ];\n\t\tS7 = sh[ 2 ];\n\t\tS8 = sh[ 1 ];\n\t\tS9 = sh[ 0 ];\n\t\tdv0 = [ strides[9] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[8] - ( S0*strides[9] ) ];\n\t\tdv2 = [ strides[7] - ( S1*strides[8] ) ];\n\t\tdv3 = [ strides[6] - ( S2*strides[7] ) ];\n\t\tdv4 = [ strides[5] - ( S3*strides[6] ) ];\n\t\tdv5 = [ strides[4] - ( S4*strides[5] ) ];\n\t\tdv6 = [ strides[3] - ( S5*strides[4] ) ];\n\t\tdv7 = [ strides[2] - ( S6*strides[3] ) ];\n\t\tdv8 = [ strides[1] - ( S7*strides[2] ) ];\n\t\tdv9 = [ strides[0] - ( S8*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[9] );\n\t\t\tdv1.push( sv[8] - ( S0*sv[9] ) );\n\t\t\tdv2.push( sv[7] - ( S1*sv[8] ) );\n\t\t\tdv3.push( sv[6] - ( S2*sv[7] ) );\n\t\t\tdv4.push( sv[5] - ( S3*sv[6] ) );\n\t\t\tdv5.push( sv[4] - ( S4*sv[5] ) );\n\t\t\tdv6.push( sv[3] - ( S5*sv[4] ) );\n\t\t\tdv7.push( sv[2] - ( S6*sv[3] ) );\n\t\t\tdv8.push( sv[1] - ( S7*sv[2] ) );\n\t\t\tdv9.push( sv[0] - ( S8*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tS8 = sh[ 8 ];\n\t\tS9 = sh[ 9 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[3] ) ];\n\t\tdv5 = [ strides[5] - ( S4*strides[4] ) ];\n\t\tdv6 = [ strides[6] - ( S5*strides[5] ) ];\n\t\tdv7 = [ strides[7] - ( S6*strides[6] ) ];\n\t\tdv8 = [ strides[8] - ( S7*strides[7] ) ];\n\t\tdv9 = [ strides[9] - ( S8*strides[8] ) ];  // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[3] ) );\n\t\t\tdv5.push( sv[5] - ( S4*sv[4] ) );\n\t\t\tdv6.push( sv[6] - ( S5*sv[5] ) );\n\t\t\tdv7.push( sv[7] - ( S6*sv[6] ) );\n\t\t\tdv8.push( sv[8] - ( S7*sv[7] ) );\n\t\t\tdv8.push( sv[8] - ( S8*sv[8] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i9 = 0; i9 < S9; i9++ ) {\n\t\tfor ( i8 = 0; i8 < S8; i8++ ) {\n\t\t\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\t\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\t\t\t\t\tybuf[ iv[1] ] = fcn( v, opts );\n\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv6 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv7 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv8 );\n\t\t}\n\t\tincrementOffsets( iv, dv9 );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary10d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport without from '@stdlib/array-base-without';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over a list of specified dimensions in an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import Float64Array from '@stdlib/array-float64';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import getStride from '@stdlib/ndarray-base-stride';\n* import getOffset from '@stdlib/ndarray-base-offset';\n* import getData from '@stdlib/ndarray-base-data-buffer';\n* import numelDimension from '@stdlib/ndarray-base-numel-dimension';\n* import { ndarray as gsum } from '@stdlib/blas-ext-base-gsum';\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] ) );\n* var ybuf = toAccessorArray( new Float64Array( [ 0.0 ] ) );\n*\n* // Define the array shapes:\n* var xsh = [ 2, 2 ];\n* var ysh = [];\n*\n* // Define the array strides:\n* var sx = [ 2, 1 ];\n* var sy = [ 0 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* unary0d( wrapper, [ x, y ], strategy, {} );\n*\n* var v = y.data.get( 0 );\n* // returns 10.0\n*/\nfunction unary0d( fcn, arrays, strategy, opts ) {\n\tvar y = arrays[ 1 ];\n\tarrays[ 0 ] = strategy( arrays[ 0 ] );\n\ty.accessors[ 1 ]( y.data, y.offset, fcn( without( arrays, 1 ), opts ) );\n}\n\n\n// EXPORTS //\n\nexport default unary0d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport copyIndexed from '@stdlib/array-base-copy-indexed';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import Float64Array from '@stdlib/array-float64';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import getStride from '@stdlib/ndarray-base-stride';\n* import getOffset from '@stdlib/ndarray-base-offset';\n* import getData from '@stdlib/ndarray-base-data-buffer';\n* import numelDimension from '@stdlib/ndarray-base-numel-dimension';\n* import { ndarray as gsum } from '@stdlib/blas-ext-base-gsum';\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( new Float64Array( [ 0.0, 0.0, 0.0 ] ) );\n*\n* // Define the array shapes:\n* var xsh = [ 3, 2, 2 ];\n* var ysh = [ 3 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 2, 1 ];\n* var sy = [ 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* unary1d( wrapper, [ x, y ], views, [ 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ 10.0, 26.0, 42.0 ]\n*/\nfunction unary1d( fcn, arrays, views, strides, strategy, opts ) {\n\tvar ybuf;\n\tvar set;\n\tvar dv0;\n\tvar sh;\n\tvar S0;\n\tvar iv;\n\tvar i0;\n\tvar y;\n\tvar v;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Extract loop variables: dimensions and loop offset (pointer) increments...\n\tS0 = sh[ 0 ];\n\tdv0 = [ strides[0] ];\n\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\tdv0.push( arrays[i].strides[0] );\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\tsetViewOffsets( views, iv );\n\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\tset( ybuf, iv[1], fcn( v, opts ) );\n\t\tincrementOffsets( iv, dv0 );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary1d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport copyIndexed from '@stdlib/array-base-copy-indexed';\nimport isRowMajor from '@stdlib/ndarray-base-assert-is-row-major-string';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import Float64Array from '@stdlib/array-float64';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import getStride from '@stdlib/ndarray-base-stride';\n* import getOffset from '@stdlib/ndarray-base-offset';\n* import getData from '@stdlib/ndarray-base-data-buffer';\n* import numelDimension from '@stdlib/ndarray-base-numel-dimension';\n* import { ndarray as gsum } from '@stdlib/blas-ext-base-gsum';\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( new Float64Array( [ 0.0, 0.0, 0.0 ] ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 3, 2, 2 ];\n* var ysh = [ 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* unary2d( wrapper, [ x, y ], views, [ 12, 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ 10.0, 26.0, 42.0 ] ]\n*/\nfunction unary2d( fcn, arrays, views, strides, strategy, opts ) {\n\tvar ybuf;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar y;\n\tvar v;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor( y.order ) ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 1 ];\n\t\tS1 = sh[ 0 ];\n\t\tdv0 = [ strides[1] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[0] - ( S0*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[1] );\n\t\t\tdv1.push( sv[0] - ( S0*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\tsetViewOffsets( views, iv );\n\t\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\t\tset( ybuf, iv[ 1 ], fcn( v, opts ) );\n\t\t\tincrementOffsets( iv, dv0 );\n\t\t}\n\t\tincrementOffsets( iv, dv1 );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary2d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport copyIndexed from '@stdlib/array-base-copy-indexed';\nimport isRowMajor from '@stdlib/ndarray-base-assert-is-row-major-string';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import Float64Array from '@stdlib/array-float64';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import getStride from '@stdlib/ndarray-base-stride';\n* import getOffset from '@stdlib/ndarray-base-offset';\n* import getData from '@stdlib/ndarray-base-data-buffer';\n* import numelDimension from '@stdlib/ndarray-base-numel-dimension';\n* import { ndarray as gsum } from '@stdlib/blas-ext-base-gsum';\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( new Float64Array( [ 0.0, 0.0, 0.0 ] ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* unary3d( wrapper, [ x, y ], views, [ 12, 12, 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ 10.0, 26.0, 42.0 ] ] ]\n*/\nfunction unary3d( fcn, arrays, views, strides, strategy, opts ) {\n\tvar ybuf;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar y;\n\tvar v;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor( y.order ) ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 2 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 0 ];\n\t\tdv0 = [ strides[2] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[2] ) ];\n\t\tdv2 = [ strides[0] - ( S1*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[2] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[2] ) );\n\t\t\tdv2.push( sv[0] - ( S1*sv[1] ) );\n\t\t}\n\t} else {\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\tset( ybuf, iv[ 1 ], fcn( v, opts ) );\n\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv1 );\n\t\t}\n\t\tincrementOffsets( iv, dv2 );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary3d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport copyIndexed from '@stdlib/array-base-copy-indexed';\nimport isRowMajor from '@stdlib/ndarray-base-assert-is-row-major-string';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import Float64Array from '@stdlib/array-float64';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import getStride from '@stdlib/ndarray-base-stride';\n* import getOffset from '@stdlib/ndarray-base-offset';\n* import getData from '@stdlib/ndarray-base-data-buffer';\n* import numelDimension from '@stdlib/ndarray-base-numel-dimension';\n* import { ndarray as gsum } from '@stdlib/blas-ext-base-gsum';\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( new Float64Array( [ 0.0, 0.0, 0.0 ] ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* unary4d( wrapper, [ x, y ], views, [ 12, 12, 12, 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ 10.0, 26.0, 42.0 ] ] ] ]\n*/\nfunction unary4d( fcn, arrays, views, strides, strategy, opts ) {\n\tvar ybuf;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar y;\n\tvar v;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor( y.order ) ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 3 ];\n\t\tS1 = sh[ 2 ];\n\t\tS2 = sh[ 1 ];\n\t\tS3 = sh[ 0 ];\n\t\tdv0 = [ strides[3] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[2] - ( S0*strides[3] ) ];\n\t\tdv2 = [ strides[1] - ( S1*strides[2] ) ];\n\t\tdv3 = [ strides[0] - ( S2*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[3] );\n\t\t\tdv1.push( sv[2] - ( S0*sv[3] ) );\n\t\t\tdv2.push( sv[1] - ( S1*sv[2] ) );\n\t\t\tdv3.push( sv[0] - ( S2*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2]) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\tset( ybuf, iv[ 1 ], fcn( v, opts ) );\n\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv2 );\n\t\t}\n\t\tincrementOffsets( iv, dv3 );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary4d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport copyIndexed from '@stdlib/array-base-copy-indexed';\nimport isRowMajor from '@stdlib/ndarray-base-assert-is-row-major-string';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import Float64Array from '@stdlib/array-float64';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import getStride from '@stdlib/ndarray-base-stride';\n* import getOffset from '@stdlib/ndarray-base-offset';\n* import getData from '@stdlib/ndarray-base-data-buffer';\n* import numelDimension from '@stdlib/ndarray-base-numel-dimension';\n* import { ndarray as gsum } from '@stdlib/blas-ext-base-gsum';\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( new Float64Array( [ 0.0, 0.0, 0.0 ] ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* unary5d( wrapper, [ x, y ], views, [ 12, 12, 12, 12, 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ 10.0, 26.0, 42.0 ] ] ] ] ]\n*/\nfunction unary5d( fcn, arrays, views, strides, strategy, opts ) {\n\tvar ybuf;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar y;\n\tvar v;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor( y.order ) ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 4 ];\n\t\tS1 = sh[ 3 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 1 ];\n\t\tS4 = sh[ 0 ];\n\t\tdv0 = [ strides[4] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[3] - ( S0*strides[4] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[3] ) ];\n\t\tdv3 = [ strides[1] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[0] - ( S3*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[4] );\n\t\t\tdv1.push( sv[3] - ( S0*sv[4] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[3] ) );\n\t\t\tdv3.push( sv[1] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[0] - ( S3*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[3] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[3] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\tset( ybuf, iv[ 1 ], fcn( v, opts ) );\n\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv3 );\n\t\t}\n\t\tincrementOffsets( iv, dv4 );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary5d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport copyIndexed from '@stdlib/array-base-copy-indexed';\nimport isRowMajor from '@stdlib/ndarray-base-assert-is-row-major-string';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import Float64Array from '@stdlib/array-float64';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import getStride from '@stdlib/ndarray-base-stride';\n* import getOffset from '@stdlib/ndarray-base-offset';\n* import getData from '@stdlib/ndarray-base-data-buffer';\n* import numelDimension from '@stdlib/ndarray-base-numel-dimension';\n* import { ndarray as gsum } from '@stdlib/blas-ext-base-gsum';\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( new Float64Array( [ 0.0, 0.0, 0.0 ] ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* unary6d( wrapper, [ x, y ], views, [ 12, 12, 12, 12, 12, 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ 10.0, 26.0, 42.0 ] ] ] ] ] ]\n*/\nfunction unary6d( fcn, arrays, views, strides, strategy, opts ) {\n\tvar ybuf;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar y;\n\tvar v;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor( y.order ) ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 5 ];\n\t\tS1 = sh[ 4 ];\n\t\tS2 = sh[ 3 ];\n\t\tS3 = sh[ 2 ];\n\t\tS4 = sh[ 1 ];\n\t\tS5 = sh[ 0 ];\n\t\tdv0 = [ strides[5] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[4] - ( S0*strides[5] ) ];\n\t\tdv2 = [ strides[3] - ( S1*strides[4] ) ];\n\t\tdv3 = [ strides[2] - ( S2*strides[3] ) ];\n\t\tdv4 = [ strides[1] - ( S3*strides[2] ) ];\n\t\tdv5 = [ strides[0] - ( S4*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[5] );\n\t\t\tdv1.push( sv[4] - ( S0*sv[5] ) );\n\t\t\tdv2.push( sv[3] - ( S1*sv[4] ) );\n\t\t\tdv3.push( sv[2] - ( S2*sv[3] ) );\n\t\t\tdv4.push( sv[1] - ( S3*sv[2] ) );\n\t\t\tdv5.push( sv[0] - ( S4*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[3] ) ];\n\t\tdv5 = [ strides[5] - ( S4*strides[4] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[3] ) );\n\t\t\tdv5.push( sv[5] - ( S4*sv[4] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\tset( ybuf, iv[ 1 ], fcn( v, opts ) );\n\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv4 );\n\t\t}\n\t\tincrementOffsets( iv, dv5 );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary6d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport copyIndexed from '@stdlib/array-base-copy-indexed';\nimport isRowMajor from '@stdlib/ndarray-base-assert-is-row-major-string';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import Float64Array from '@stdlib/array-float64';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import getStride from '@stdlib/ndarray-base-stride';\n* import getOffset from '@stdlib/ndarray-base-offset';\n* import getData from '@stdlib/ndarray-base-data-buffer';\n* import numelDimension from '@stdlib/ndarray-base-numel-dimension';\n* import { ndarray as gsum } from '@stdlib/blas-ext-base-gsum';\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( new Float64Array( [ 0.0, 0.0, 0.0 ] ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* unary7d( wrapper, [ x, y ], views, [ 12, 12, 12, 12, 12, 12, 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ 10.0, 26.0, 42.0 ] ] ] ] ] ] ]\n*/\nfunction unary7d( fcn, arrays, views, strides, strategy, opts ) {\n\tvar ybuf;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar y;\n\tvar v;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor( y.order ) ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 6 ];\n\t\tS1 = sh[ 5 ];\n\t\tS2 = sh[ 4 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 2 ];\n\t\tS5 = sh[ 1 ];\n\t\tS6 = sh[ 0 ];\n\t\tdv0 = [ strides[6] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[5] - ( S0*strides[6] ) ];\n\t\tdv2 = [ strides[4] - ( S1*strides[5] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[4] ) ];\n\t\tdv4 = [ strides[2] - ( S3*strides[3] ) ];\n\t\tdv5 = [ strides[1] - ( S4*strides[2] ) ];\n\t\tdv6 = [ strides[0] - ( S5*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[6] );\n\t\t\tdv1.push( sv[5] - ( S0*sv[6] ) );\n\t\t\tdv2.push( sv[4] - ( S1*sv[5] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[4] ) );\n\t\t\tdv4.push( sv[2] - ( S3*sv[3] ) );\n\t\t\tdv5.push( sv[1] - ( S4*sv[2] ) );\n\t\t\tdv6.push( sv[0] - ( S5*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[3] ) ];\n\t\tdv5 = [ strides[5] - ( S4*strides[4] ) ];\n\t\tdv6 = [ strides[6] - ( S5*strides[5] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[3] ) );\n\t\t\tdv5.push( sv[5] - ( S4*sv[4] ) );\n\t\t\tdv6.push( sv[6] - ( S5*sv[5] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\t\tset( ybuf, iv[ 1 ], fcn( v, opts ) );\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv5 );\n\t\t}\n\t\tincrementOffsets( iv, dv6 );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary7d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport copyIndexed from '@stdlib/array-base-copy-indexed';\nimport isRowMajor from '@stdlib/ndarray-base-assert-is-row-major-string';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import Float64Array from '@stdlib/array-float64';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import getStride from '@stdlib/ndarray-base-stride';\n* import getOffset from '@stdlib/ndarray-base-offset';\n* import getData from '@stdlib/ndarray-base-data-buffer';\n* import numelDimension from '@stdlib/ndarray-base-numel-dimension';\n* import { ndarray as gsum } from '@stdlib/blas-ext-base-gsum';\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( new Float64Array( [ 0.0, 0.0, 0.0 ] ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* unary8d( wrapper, [ x, y ], views, [ 12, 12, 12, 12, 12, 12, 12, 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ 10.0, 26.0, 42.0 ] ] ] ] ] ] ] ]\n*/\nfunction unary8d( fcn, arrays, views, strides, strategy, opts ) { // eslint-disable-line max-statements\n\tvar ybuf;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar dv7;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar y;\n\tvar v;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor( y.order ) ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 7 ];\n\t\tS1 = sh[ 6 ];\n\t\tS2 = sh[ 5 ];\n\t\tS3 = sh[ 4 ];\n\t\tS4 = sh[ 3 ];\n\t\tS5 = sh[ 2 ];\n\t\tS6 = sh[ 1 ];\n\t\tS7 = sh[ 0 ];\n\t\tdv0 = [ strides[7] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[6] - ( S0*strides[7] ) ];\n\t\tdv2 = [ strides[5] - ( S1*strides[6] ) ];\n\t\tdv3 = [ strides[4] - ( S2*strides[5] ) ];\n\t\tdv4 = [ strides[3] - ( S3*strides[4] ) ];\n\t\tdv5 = [ strides[2] - ( S4*strides[3] ) ];\n\t\tdv6 = [ strides[1] - ( S5*strides[2] ) ];\n\t\tdv7 = [ strides[0] - ( S6*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[7] );\n\t\t\tdv1.push( sv[6] - ( S0*sv[7] ) );\n\t\t\tdv2.push( sv[5] - ( S1*sv[6] ) );\n\t\t\tdv3.push( sv[4] - ( S2*sv[5] ) );\n\t\t\tdv4.push( sv[3] - ( S3*sv[4] ) );\n\t\t\tdv5.push( sv[2] - ( S4*sv[3] ) );\n\t\t\tdv6.push( sv[1] - ( S5*sv[2] ) );\n\t\t\tdv7.push( sv[0] - ( S6*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[3] ) ];\n\t\tdv5 = [ strides[5] - ( S4*strides[4] ) ];\n\t\tdv6 = [ strides[6] - ( S5*strides[5] ) ];\n\t\tdv7 = [ strides[7] - ( S6*strides[6] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[3] ) );\n\t\t\tdv5.push( sv[5] - ( S4*sv[4] ) );\n\t\t\tdv6.push( sv[6] - ( S5*sv[5] ) );\n\t\t\tdv7.push( sv[7] - ( S6*sv[6] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\t\t\tset( ybuf, iv[ 1 ], fcn( v, opts ) );\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv6 );\n\t\t}\n\t\tincrementOffsets( iv, dv7 );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary8d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport copyIndexed from '@stdlib/array-base-copy-indexed';\nimport isRowMajor from '@stdlib/ndarray-base-assert-is-row-major-string';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import Float64Array from '@stdlib/array-float64';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import getStride from '@stdlib/ndarray-base-stride';\n* import getOffset from '@stdlib/ndarray-base-offset';\n* import getData from '@stdlib/ndarray-base-data-buffer';\n* import numelDimension from '@stdlib/ndarray-base-numel-dimension';\n* import { ndarray as gsum } from '@stdlib/blas-ext-base-gsum';\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( new Float64Array( [ 0.0, 0.0, 0.0 ] ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* unary9d( wrapper, [ x, y ], views, [ 12, 12, 12, 12, 12, 12, 12, 12, 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ [ 10.0, 26.0, 42.0 ] ] ] ] ] ] ] ] ]\n*/\nfunction unary9d( fcn, arrays, views, strides, strategy, opts ) { // eslint-disable-line max-statements\n\tvar ybuf;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar dv7;\n\tvar dv8;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar S8;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar y;\n\tvar v;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor( y.order ) ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 8 ];\n\t\tS1 = sh[ 7 ];\n\t\tS2 = sh[ 6 ];\n\t\tS3 = sh[ 5 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 3 ];\n\t\tS6 = sh[ 2 ];\n\t\tS7 = sh[ 1 ];\n\t\tS8 = sh[ 0 ];\n\t\tdv0 = [ strides[8] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[7] - ( S0*strides[8] ) ];\n\t\tdv2 = [ strides[6] - ( S1*strides[7] ) ];\n\t\tdv3 = [ strides[5] - ( S2*strides[6] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[5] ) ];\n\t\tdv5 = [ strides[3] - ( S4*strides[4] ) ];\n\t\tdv6 = [ strides[2] - ( S5*strides[3] ) ];\n\t\tdv7 = [ strides[1] - ( S6*strides[2] ) ];\n\t\tdv8 = [ strides[0] - ( S7*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[8] );\n\t\t\tdv1.push( sv[7] - ( S0*sv[8] ) );\n\t\t\tdv2.push( sv[6] - ( S1*sv[7] ) );\n\t\t\tdv3.push( sv[5] - ( S2*sv[6] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[5] ) );\n\t\t\tdv5.push( sv[3] - ( S4*sv[4] ) );\n\t\t\tdv6.push( sv[2] - ( S5*sv[3] ) );\n\t\t\tdv7.push( sv[1] - ( S6*sv[2] ) );\n\t\t\tdv8.push( sv[0] - ( S7*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tS8 = sh[ 8 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[3] ) ];\n\t\tdv5 = [ strides[5] - ( S4*strides[4] ) ];\n\t\tdv6 = [ strides[6] - ( S5*strides[5] ) ];\n\t\tdv7 = [ strides[7] - ( S6*strides[6] ) ];\n\t\tdv8 = [ strides[8] - ( S7*strides[7] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[3] ) );\n\t\t\tdv5.push( sv[5] - ( S4*sv[4] ) );\n\t\t\tdv6.push( sv[6] - ( S5*sv[5] ) );\n\t\t\tdv7.push( sv[7] - ( S6*sv[6] ) );\n\t\t\tdv8.push( sv[8] - ( S7*sv[7] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i8 = 0; i8 < S8; i8++ ) {\n\t\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\t\t\t\tset( ybuf, iv[ 1 ], fcn( v, opts ) );\n\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv6 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv7 );\n\t\t}\n\t\tincrementOffsets( iv, dv8 );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary9d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport copyIndexed from '@stdlib/array-base-copy-indexed';\nimport isRowMajor from '@stdlib/ndarray-base-assert-is-row-major-string';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import Float64Array from '@stdlib/array-float64';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import getStride from '@stdlib/ndarray-base-stride';\n* import getOffset from '@stdlib/ndarray-base-offset';\n* import getData from '@stdlib/ndarray-base-data-buffer';\n* import numelDimension from '@stdlib/ndarray-base-numel-dimension';\n* import { ndarray as gsum } from '@stdlib/blas-ext-base-gsum';\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( new Float64Array( [ 0.0, 0.0, 0.0 ] ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* unary10d( wrapper, [ x, y ], views, [ 12, 12, 12, 12, 12, 12, 12, 12, 12, 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ [ [ 10.0, 26.0, 42.0 ] ] ] ] ] ] ] ] ] ]\n*/\nfunction unary10d( fcn, arrays, views, strides, strategy, opts ) { // eslint-disable-line max-statements\n\tvar ybuf;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar dv7;\n\tvar dv8;\n\tvar dv9;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar S8;\n\tvar S9;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar i9;\n\tvar y;\n\tvar v;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor( y.order ) ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 9 ];\n\t\tS1 = sh[ 8 ];\n\t\tS2 = sh[ 7 ];\n\t\tS3 = sh[ 6 ];\n\t\tS4 = sh[ 5 ];\n\t\tS5 = sh[ 4 ];\n\t\tS6 = sh[ 3 ];\n\t\tS7 = sh[ 2 ];\n\t\tS8 = sh[ 1 ];\n\t\tS9 = sh[ 0 ];\n\t\tdv0 = [ strides[9] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[8] - ( S0*strides[9] ) ];\n\t\tdv2 = [ strides[7] - ( S1*strides[8] ) ];\n\t\tdv3 = [ strides[6] - ( S2*strides[7] ) ];\n\t\tdv4 = [ strides[5] - ( S3*strides[6] ) ];\n\t\tdv5 = [ strides[4] - ( S4*strides[5] ) ];\n\t\tdv6 = [ strides[3] - ( S5*strides[4] ) ];\n\t\tdv7 = [ strides[2] - ( S6*strides[3] ) ];\n\t\tdv8 = [ strides[1] - ( S7*strides[2] ) ];\n\t\tdv9 = [ strides[0] - ( S8*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[9] );\n\t\t\tdv1.push( sv[8] - ( S0*sv[9] ) );\n\t\t\tdv2.push( sv[7] - ( S1*sv[8] ) );\n\t\t\tdv3.push( sv[6] - ( S2*sv[7] ) );\n\t\t\tdv4.push( sv[5] - ( S3*sv[6] ) );\n\t\t\tdv5.push( sv[4] - ( S4*sv[5] ) );\n\t\t\tdv6.push( sv[3] - ( S5*sv[4] ) );\n\t\t\tdv7.push( sv[2] - ( S6*sv[3] ) );\n\t\t\tdv8.push( sv[1] - ( S7*sv[2] ) );\n\t\t\tdv9.push( sv[0] - ( S8*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tS8 = sh[ 8 ];\n\t\tS9 = sh[ 9 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[3] ) ];\n\t\tdv5 = [ strides[5] - ( S4*strides[4] ) ];\n\t\tdv6 = [ strides[6] - ( S5*strides[5] ) ];\n\t\tdv7 = [ strides[7] - ( S6*strides[6] ) ];\n\t\tdv8 = [ strides[8] - ( S7*strides[7] ) ];\n\t\tdv9 = [ strides[9] - ( S8*strides[8] ) ];  // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[3] ) );\n\t\t\tdv5.push( sv[5] - ( S4*sv[4] ) );\n\t\t\tdv6.push( sv[6] - ( S5*sv[5] ) );\n\t\t\tdv7.push( sv[7] - ( S6*sv[6] ) );\n\t\t\tdv8.push( sv[8] - ( S7*sv[7] ) );\n\t\t\tdv8.push( sv[8] - ( S8*sv[8] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i9 = 0; i9 < S9; i9++ ) {\n\t\tfor ( i8 = 0; i8 < S8; i8++ ) {\n\t\t\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\t\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\t\t\t\t\tset( ybuf, iv[ 1 ], fcn( v, opts ) );\n\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv6 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv7 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv8 );\n\t\t}\n\t\tincrementOffsets( iv, dv9 );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary10d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-unary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-unary-tiling-block-size';\nimport takeIndexed from '@stdlib/array-base-take-indexed';\nimport copyIndexed from '@stdlib/array-base-copy-indexed';\nimport zeros from '@stdlib/array-base-zeros';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import getStride from '@stdlib/ndarray-base-stride';\n* import getOffset from '@stdlib/ndarray-base-offset';\n* import getData from '@stdlib/ndarray-base-data-buffer';\n* import numelDimension from '@stdlib/ndarray-base-numel-dimension';\n* import { ndarray as gsum } from '@stdlib/blas-ext-base-gsum';\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 3, 2, 2 ];\n* var ysh = [ 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* blockedunary2d( wrapper, [ x, y ], views, [ 12, 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ 10.0, 26.0, 42.0 ] ]\n*/\nfunction blockedunary2d( fcn, arrays, views, strides, strategy, opts ) {\n\tvar bsize;\n\tvar ybuf;\n\tvar dv0;\n\tvar dv1;\n\tvar ov1;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar j0;\n\tvar j1;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar v;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tdv1 = zeros( N );\n\tiv = zeros( N );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Iterate over blocks...\n\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\tif ( j1 < bsize ) {\n\t\t\ts1 = j1;\n\t\t\tj1 = 0;\n\t\t} else {\n\t\t\ts1 = bsize;\n\t\t\tj1 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov1[ k ] = ov[k] + ( j1*sv[k][1] );\n\t\t}\n\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\tif ( j0 < bsize ) {\n\t\t\t\ts0 = j0;\n\t\t\t\tj0 = 0;\n\t\t\t} else {\n\t\t\t\ts0 = bsize;\n\t\t\t\tj0 -= bsize;\n\t\t\t}\n\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t}\n\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\tybuf[ iv[1] ] = fcn( v, opts );\n\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary2d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-unary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-unary-tiling-block-size';\nimport takeIndexed from '@stdlib/array-base-take-indexed';\nimport copyIndexed from '@stdlib/array-base-copy-indexed';\nimport zeros from '@stdlib/array-base-zeros';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import getStride from '@stdlib/ndarray-base-stride';\n* import getOffset from '@stdlib/ndarray-base-offset';\n* import getData from '@stdlib/ndarray-base-data-buffer';\n* import numelDimension from '@stdlib/ndarray-base-numel-dimension';\n* import { ndarray as gsum } from '@stdlib/blas-ext-base-gsum';\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* blockedunary3d( wrapper, [ x, y ], views, [ 12, 12, 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ 10.0, 26.0, 42.0 ] ] ]\n*/\nfunction blockedunary3d( fcn, arrays, views, strides, strategy, opts ) {\n\tvar bsize;\n\tvar ybuf;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar ov1;\n\tvar ov2;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar v;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tiv = zeros( N );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Iterate over blocks...\n\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\tif ( j2 < bsize ) {\n\t\t\ts2 = j2;\n\t\t\tj2 = 0;\n\t\t} else {\n\t\t\ts2 = bsize;\n\t\t\tj2 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov2[ k ] = ov[k] + ( j2*sv[k][2] );\n\t\t}\n\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\tif ( j1 < bsize ) {\n\t\t\t\ts1 = j1;\n\t\t\t\tj1 = 0;\n\t\t\t} else {\n\t\t\t\ts1 = bsize;\n\t\t\t\tj1 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t}\n\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\ts0 = j0;\n\t\t\t\t\tj0 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts0 = bsize;\n\t\t\t\t\tj0 -= bsize;\n\t\t\t\t}\n\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t}\n\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\tybuf[ iv[1] ] = fcn( v, opts );\n\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary3d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-unary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-unary-tiling-block-size';\nimport takeIndexed from '@stdlib/array-base-take-indexed';\nimport copyIndexed from '@stdlib/array-base-copy-indexed';\nimport zeros from '@stdlib/array-base-zeros';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import getStride from '@stdlib/ndarray-base-stride';\n* import getOffset from '@stdlib/ndarray-base-offset';\n* import getData from '@stdlib/ndarray-base-data-buffer';\n* import numelDimension from '@stdlib/ndarray-base-numel-dimension';\n* import { ndarray as gsum } from '@stdlib/blas-ext-base-gsum';\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* blockedunary4d( wrapper, [ x, y ], views, [ 12, 12, 12, 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ 10.0, 26.0, 42.0 ] ] ] ]\n*/\nfunction blockedunary4d( fcn, arrays, views, strides, strategy, opts ) {\n\tvar bsize;\n\tvar ybuf;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar v;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tiv = zeros( N );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Iterate over blocks...\n\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\tif ( j3 < bsize ) {\n\t\t\ts3 = j3;\n\t\t\tj3 = 0;\n\t\t} else {\n\t\t\ts3 = bsize;\n\t\t\tj3 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov3[ k ] = ov[k] + ( j3*sv[k][3] );\n\t\t}\n\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\tif ( j2 < bsize ) {\n\t\t\t\ts2 = j2;\n\t\t\t\tj2 = 0;\n\t\t\t} else {\n\t\t\t\ts2 = bsize;\n\t\t\t\tj2 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t}\n\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\ts1 = j1;\n\t\t\t\t\tj1 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts1 = bsize;\n\t\t\t\t\tj1 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t}\n\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t}\n\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\t\t\tybuf[ iv[1] ] = fcn( v, opts );\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary4d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-unary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-unary-tiling-block-size';\nimport takeIndexed from '@stdlib/array-base-take-indexed';\nimport copyIndexed from '@stdlib/array-base-copy-indexed';\nimport zeros from '@stdlib/array-base-zeros';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import getStride from '@stdlib/ndarray-base-stride';\n* import getOffset from '@stdlib/ndarray-base-offset';\n* import getData from '@stdlib/ndarray-base-data-buffer';\n* import numelDimension from '@stdlib/ndarray-base-numel-dimension';\n* import { ndarray as gsum } from '@stdlib/blas-ext-base-gsum';\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* blockedunary5d( wrapper, [ x, y ], views, [ 12, 12, 12, 12, 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ 10.0, 26.0, 42.0 ] ] ] ] ]\n*/\nfunction blockedunary5d( fcn, arrays, views, strides, strategy, opts ) { // eslint-disable-line max-statements\n\tvar bsize;\n\tvar ybuf;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar ov4;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar v;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tov4 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tdv4 = zeros( N );\n\tiv = zeros( N );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Iterate over blocks...\n\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\tif ( j4 < bsize ) {\n\t\t\ts4 = j4;\n\t\t\tj4 = 0;\n\t\t} else {\n\t\t\ts4 = bsize;\n\t\t\tj4 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov4[ k ] = ov[k] + ( j4*sv[k][4] );\n\t\t}\n\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\tif ( j3 < bsize ) {\n\t\t\t\ts3 = j3;\n\t\t\t\tj3 = 0;\n\t\t\t} else {\n\t\t\t\ts3 = bsize;\n\t\t\t\tj3 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tdv4[ k ] = sv[k][4] - ( s3*sv[k][3] );\n\t\t\t\tov3[ k ] = ov4[k] + ( j3*sv[k][3] );\n\t\t\t}\n\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\ts2 = j2;\n\t\t\t\t\tj2 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts2 = bsize;\n\t\t\t\t\tj2 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\t}\n\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\t\t\t\t\tybuf[ iv[1] ] = fcn( v, opts );\n\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary5d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-unary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-unary-tiling-block-size';\nimport takeIndexed from '@stdlib/array-base-take-indexed';\nimport copyIndexed from '@stdlib/array-base-copy-indexed';\nimport zeros from '@stdlib/array-base-zeros';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import getStride from '@stdlib/ndarray-base-stride';\n* import getOffset from '@stdlib/ndarray-base-offset';\n* import getData from '@stdlib/ndarray-base-data-buffer';\n* import numelDimension from '@stdlib/ndarray-base-numel-dimension';\n* import { ndarray as gsum } from '@stdlib/blas-ext-base-gsum';\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* blockedunary6d( wrapper, [ x, y ], views, [ 12, 12, 12, 12, 12, 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ 10.0, 26.0, 42.0 ] ] ] ] ] ]\n*/\nfunction blockedunary6d( fcn, arrays, views, strides, strategy, opts ) { // eslint-disable-line max-statements\n\tvar bsize;\n\tvar ybuf;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar ov4;\n\tvar ov5;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar v;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tov4 = zeros( N );\n\tov5 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tdv4 = zeros( N );\n\tdv5 = zeros( N );\n\tiv = zeros( N );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Iterate over blocks...\n\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\tif ( j5 < bsize ) {\n\t\t\ts5 = j5;\n\t\t\tj5 = 0;\n\t\t} else {\n\t\t\ts5 = bsize;\n\t\t\tj5 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov5[ k ] = ov[k] + ( j5*sv[k][5] );\n\t\t}\n\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\tif ( j4 < bsize ) {\n\t\t\t\ts4 = j4;\n\t\t\t\tj4 = 0;\n\t\t\t} else {\n\t\t\t\ts4 = bsize;\n\t\t\t\tj4 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tdv5 = sv[k][5] - ( s4*sv[k][4] );\n\t\t\t\tov4[ k ] = ov5[k] + ( j4*sv[k][4] );\n\t\t\t}\n\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\ts3 = j3;\n\t\t\t\t\tj3 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts3 = bsize;\n\t\t\t\t\tj3 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tdv4[ k ] = sv[k][4] - ( s3*sv[k][3] );\n\t\t\t\t\tov3[ k ] = ov4[k] + ( j3*sv[k][3] );\n\t\t\t\t}\n\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\t\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\t\t\t\t\t\t\tybuf[ iv[1] ] = fcn( v, opts );\n\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary6d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-unary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-unary-tiling-block-size';\nimport takeIndexed from '@stdlib/array-base-take-indexed';\nimport copyIndexed from '@stdlib/array-base-copy-indexed';\nimport zeros from '@stdlib/array-base-zeros';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import getStride from '@stdlib/ndarray-base-stride';\n* import getOffset from '@stdlib/ndarray-base-offset';\n* import getData from '@stdlib/ndarray-base-data-buffer';\n* import numelDimension from '@stdlib/ndarray-base-numel-dimension';\n* import { ndarray as gsum } from '@stdlib/blas-ext-base-gsum';\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* blockedunary7d( wrapper, [ x, y ], views, [ 12, 12, 12, 12, 12, 12, 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ 10.0, 26.0, 42.0 ] ] ] ] ] ] ]\n*/\nfunction blockedunary7d( fcn, arrays, views, strides, strategy, opts ) { // eslint-disable-line max-statements\n\tvar bsize;\n\tvar ybuf;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar ov4;\n\tvar ov5;\n\tvar ov6;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar v;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tov4 = zeros( N );\n\tov5 = zeros( N );\n\tov6 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tdv4 = zeros( N );\n\tdv5 = zeros( N );\n\tdv6 = zeros( N );\n\tiv = zeros( N );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Iterate over blocks...\n\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\tif ( j6 < bsize ) {\n\t\t\ts6 = j6;\n\t\t\tj6 = 0;\n\t\t} else {\n\t\t\ts6 = bsize;\n\t\t\tj6 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov6[ k ] = ov[k] + ( j6*sv[k][6] );\n\t\t}\n\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\tif ( j5 < bsize ) {\n\t\t\t\ts5 = j5;\n\t\t\t\tj5 = 0;\n\t\t\t} else {\n\t\t\t\ts5 = bsize;\n\t\t\t\tj5 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tdv6 = sv[k][6] - ( s5*sv[k][5] );\n\t\t\t\tov5[ k ] = ov6[k] + ( j5*sv[k][5] );\n\t\t\t}\n\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\ts4 = j4;\n\t\t\t\t\tj4 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts4 = bsize;\n\t\t\t\t\tj4 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tdv5 = sv[k][5] - ( s4*sv[k][4] );\n\t\t\t\t\tov4[ k ] = ov5[k] + ( j4*sv[k][4] );\n\t\t\t\t}\n\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tdv4[ k ] = sv[k][4] - ( s3*sv[k][3] );\n\t\t\t\t\t\tov3[ k ] = ov4[k] + ( j3*sv[k][3] );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tybuf[ iv[1] ] = fcn( v, opts );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv6 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary7d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-unary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-unary-tiling-block-size';\nimport takeIndexed from '@stdlib/array-base-take-indexed';\nimport copyIndexed from '@stdlib/array-base-copy-indexed';\nimport zeros from '@stdlib/array-base-zeros';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import getStride from '@stdlib/ndarray-base-stride';\n* import getOffset from '@stdlib/ndarray-base-offset';\n* import getData from '@stdlib/ndarray-base-data-buffer';\n* import numelDimension from '@stdlib/ndarray-base-numel-dimension';\n* import { ndarray as gsum } from '@stdlib/blas-ext-base-gsum';\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* blockedunary8d( wrapper, [ x, y ], views, [ 12, 12, 12, 12, 12, 12, 12, 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ 10.0, 26.0, 42.0 ] ] ] ] ] ] ] ]\n*/\nfunction blockedunary8d( fcn, arrays, views, strides, strategy, opts ) { // eslint-disable-line max-statements, max-lines-per-function\n\tvar bsize;\n\tvar ybuf;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar dv7;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar ov4;\n\tvar ov5;\n\tvar ov6;\n\tvar ov7;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar v;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tov4 = zeros( N );\n\tov5 = zeros( N );\n\tov6 = zeros( N );\n\tov7 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tdv4 = zeros( N );\n\tdv5 = zeros( N );\n\tdv6 = zeros( N );\n\tdv7 = zeros( N );\n\tiv = zeros( N );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Iterate over blocks...\n\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\tif ( j7 < bsize ) {\n\t\t\ts7 = j7;\n\t\t\tj7 = 0;\n\t\t} else {\n\t\t\ts7 = bsize;\n\t\t\tj7 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov7[ k ] = ov[k] + ( j7*sv[k][7] );\n\t\t}\n\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\tif ( j6 < bsize ) {\n\t\t\t\ts6 = j6;\n\t\t\t\tj6 = 0;\n\t\t\t} else {\n\t\t\t\ts6 = bsize;\n\t\t\t\tj6 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tdv7 = sv[k][7] - ( s6*sv[k][6] );\n\t\t\t\tov6[ k ] = ov7[k] + ( j6*sv[k][6] );\n\t\t\t}\n\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\ts5 = j5;\n\t\t\t\t\tj5 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts5 = bsize;\n\t\t\t\t\tj5 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tdv6 = sv[k][6] - ( s5*sv[k][5] );\n\t\t\t\t\tov5[ k ] = ov6[k] + ( j5*sv[k][5] );\n\t\t\t\t}\n\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tdv5 = sv[k][5] - ( s4*sv[k][4] );\n\t\t\t\t\t\tov4[ k ] = ov5[k] + ( j4*sv[k][4] );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\tdv4[ k ] = sv[k][4] - ( s3*sv[k][3] );\n\t\t\t\t\t\t\tov3[ k ] = ov4[k] + ( j3*sv[k][3] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t\t\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tybuf[ iv[1] ] = fcn( v, opts );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv6 );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv7 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary8d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-unary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-unary-tiling-block-size';\nimport takeIndexed from '@stdlib/array-base-take-indexed';\nimport copyIndexed from '@stdlib/array-base-copy-indexed';\nimport zeros from '@stdlib/array-base-zeros';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import getStride from '@stdlib/ndarray-base-stride';\n* import getOffset from '@stdlib/ndarray-base-offset';\n* import getData from '@stdlib/ndarray-base-data-buffer';\n* import numelDimension from '@stdlib/ndarray-base-numel-dimension';\n* import { ndarray as gsum } from '@stdlib/blas-ext-base-gsum';\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* blockedunary9d( wrapper, [ x, y ], views, [ 12, 12, 12, 12, 12, 12, 12, 12, 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ [ 10.0, 26.0, 42.0 ] ] ] ] ] ] ] ] ]\n*/\nfunction blockedunary9d( fcn, arrays, views, strides, strategy, opts ) { // eslint-disable-line max-statements, max-lines-per-function\n\tvar bsize;\n\tvar ybuf;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar dv7;\n\tvar dv8;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar ov4;\n\tvar ov5;\n\tvar ov6;\n\tvar ov7;\n\tvar ov8;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar s8;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar j8;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar v;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tov4 = zeros( N );\n\tov5 = zeros( N );\n\tov6 = zeros( N );\n\tov7 = zeros( N );\n\tov8 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tdv4 = zeros( N );\n\tdv5 = zeros( N );\n\tdv6 = zeros( N );\n\tdv7 = zeros( N );\n\tdv8 = zeros( N );\n\tiv = zeros( N );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Iterate over blocks...\n\tfor ( j8 = sh[8]; j8 > 0; ) {\n\t\tif ( j8 < bsize ) {\n\t\t\ts8 = j8;\n\t\t\tj8 = 0;\n\t\t} else {\n\t\t\ts8 = bsize;\n\t\t\tj8 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov8[ k ] = ov[k] + ( j8*sv[k][8] );\n\t\t}\n\t\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\t\tif ( j7 < bsize ) {\n\t\t\t\ts7 = j7;\n\t\t\t\tj7 = 0;\n\t\t\t} else {\n\t\t\t\ts7 = bsize;\n\t\t\t\tj7 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tdv8 = sv[k][8] - ( s7*sv[k][7] );\n\t\t\t\tov7[ k ] = ov8[k] + ( j7*sv[k][7] );\n\t\t\t}\n\t\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\t\tif ( j6 < bsize ) {\n\t\t\t\t\ts6 = j6;\n\t\t\t\t\tj6 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts6 = bsize;\n\t\t\t\t\tj6 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tdv7 = sv[k][7] - ( s6*sv[k][6] );\n\t\t\t\t\tov6[ k ] = ov7[k] + ( j6*sv[k][6] );\n\t\t\t\t}\n\t\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\t\ts5 = j5;\n\t\t\t\t\t\tj5 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts5 = bsize;\n\t\t\t\t\t\tj5 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tdv6 = sv[k][6] - ( s5*sv[k][5] );\n\t\t\t\t\t\tov5[ k ] = ov6[k] + ( j5*sv[k][5] );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\tdv5 = sv[k][5] - ( s4*sv[k][4] );\n\t\t\t\t\t\t\tov4[ k ] = ov5[k] + ( j4*sv[k][4] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\tdv4[ k ] = sv[k][4] - ( s3*sv[k][3] );\n\t\t\t\t\t\t\t\tov3[ k ] = ov4[k] + ( j3*sv[k][3] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t\t\t\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t\t\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\t\t\t\t\t\tfor ( i8 = 0; i8 < s8; i8++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tybuf[ iv[1] ] = fcn( v, opts );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv6 );\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv7 );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv8 );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary9d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-unary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-unary-tiling-block-size';\nimport takeIndexed from '@stdlib/array-base-take-indexed';\nimport copyIndexed from '@stdlib/array-base-copy-indexed';\nimport zeros from '@stdlib/array-base-zeros';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import getStride from '@stdlib/ndarray-base-stride';\n* import getOffset from '@stdlib/ndarray-base-offset';\n* import getData from '@stdlib/ndarray-base-data-buffer';\n* import numelDimension from '@stdlib/ndarray-base-numel-dimension';\n* import { ndarray as gsum } from '@stdlib/blas-ext-base-gsum';\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* blockedunary10d( wrapper, [ x, y ], views, [ 12, 12, 12, 12, 12, 12, 12, 12, 12, 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ [ [ 10.0, 26.0, 42.0 ] ] ] ] ] ] ] ] ] ]\n*/\nfunction blockedunary10d( fcn, arrays, views, strides, strategy, opts ) { // eslint-disable-line max-statements, max-lines-per-function\n\tvar bsize;\n\tvar ybuf;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar dv7;\n\tvar dv8;\n\tvar dv9;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar ov4;\n\tvar ov5;\n\tvar ov6;\n\tvar ov7;\n\tvar ov8;\n\tvar ov9;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar s8;\n\tvar s9;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar i9;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar j8;\n\tvar j9;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar v;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tov4 = zeros( N );\n\tov5 = zeros( N );\n\tov6 = zeros( N );\n\tov7 = zeros( N );\n\tov8 = zeros( N );\n\tov9 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tdv4 = zeros( N );\n\tdv5 = zeros( N );\n\tdv6 = zeros( N );\n\tdv7 = zeros( N );\n\tdv8 = zeros( N );\n\tdv9 = zeros( N );\n\tiv = zeros( N );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Iterate over blocks...\n\tfor ( j9 = sh[9]; j9 > 0; ) {\n\t\tif ( j9 < bsize ) {\n\t\t\ts9 = j9;\n\t\t\tj9 = 0;\n\t\t} else {\n\t\t\ts9 = bsize;\n\t\t\tj9 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov9[ k ] = ov[k] + ( j9*sv[k][9] );\n\t\t}\n\t\tfor ( j8 = sh[8]; j8 > 0; ) {\n\t\t\tif ( j8 < bsize ) {\n\t\t\t\ts8 = j8;\n\t\t\t\tj8 = 0;\n\t\t\t} else {\n\t\t\t\ts8 = bsize;\n\t\t\t\tj8 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tdv9 = sv[k][9] - ( s8*sv[k][8] );\n\t\t\t\tov8[ k ] = ov9[k] + ( j8*sv[k][8] );\n\t\t\t}\n\t\t\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\t\t\tif ( j7 < bsize ) {\n\t\t\t\t\ts7 = j7;\n\t\t\t\t\tj7 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts7 = bsize;\n\t\t\t\t\tj7 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tdv8 = sv[k][8] - ( s7*sv[k][7] );\n\t\t\t\t\tov7[ k ] = ov8[k] + ( j7*sv[k][7] );\n\t\t\t\t}\n\t\t\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\t\t\tif ( j6 < bsize ) {\n\t\t\t\t\t\ts6 = j6;\n\t\t\t\t\t\tj6 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts6 = bsize;\n\t\t\t\t\t\tj6 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tdv7 = sv[k][7] - ( s6*sv[k][6] );\n\t\t\t\t\t\tov6[ k ] = ov7[k] + ( j6*sv[k][6] );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\t\t\ts5 = j5;\n\t\t\t\t\t\t\tj5 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts5 = bsize;\n\t\t\t\t\t\t\tj5 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\tdv6 = sv[k][6] - ( s5*sv[k][5] );\n\t\t\t\t\t\t\tov5[ k ] = ov6[k] + ( j5*sv[k][5] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\tdv5 = sv[k][5] - ( s4*sv[k][4] );\n\t\t\t\t\t\t\t\tov4[ k ] = ov5[k] + ( j4*sv[k][4] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\tdv4[ k ] = sv[k][4] - ( s3*sv[k][3] );\n\t\t\t\t\t\t\t\t\tov3[ k ] = ov4[k] + ( j3*sv[k][3] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t\t\t\t\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t\t\t\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\t\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\t\t\t\t\t\t\tfor ( i9 = 0; i9 < s9; i9++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i8 = 0; i8 < s8; i8++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tybuf[ iv[1] ] = fcn( v, opts );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv6 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv7 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv8 );\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv9 );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary10d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-unary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-unary-tiling-block-size';\nimport takeIndexed from '@stdlib/array-base-take-indexed';\nimport copyIndexed from '@stdlib/array-base-copy-indexed';\nimport zeros from '@stdlib/array-base-zeros';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import Float64Array from '@stdlib/array-float64';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import getStride from '@stdlib/ndarray-base-stride';\n* import getOffset from '@stdlib/ndarray-base-offset';\n* import getData from '@stdlib/ndarray-base-data-buffer';\n* import numelDimension from '@stdlib/ndarray-base-numel-dimension';\n* import { ndarray as gsum } from '@stdlib/blas-ext-base-gsum';\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( new Float64Array( [ 0.0, 0.0, 0.0 ] ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 3, 2, 2 ];\n* var ysh = [ 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* blockedunary2d( wrapper, [ x, y ], views, [ 12, 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ 10.0, 26.0, 42.0 ] ]\n*/\nfunction blockedunary2d( fcn, arrays, views, strides, strategy, opts ) {\n\tvar bsize;\n\tvar ybuf;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar ov1;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar j0;\n\tvar j1;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar v;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[1];\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tdv1 = zeros( N );\n\tiv = zeros( N );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Iterate over blocks...\n\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\tif ( j1 < bsize ) {\n\t\t\ts1 = j1;\n\t\t\tj1 = 0;\n\t\t} else {\n\t\t\ts1 = bsize;\n\t\t\tj1 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov1[ k ] = ov[k] + ( j1*sv[k][1] );\n\t\t}\n\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\tif ( j0 < bsize ) {\n\t\t\t\ts0 = j0;\n\t\t\t\tj0 = 0;\n\t\t\t} else {\n\t\t\t\ts0 = bsize;\n\t\t\t\tj0 -= bsize;\n\t\t\t}\n\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t}\n\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\tset( ybuf, iv[ 1 ], fcn( v, opts ) );\n\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary2d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-unary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-unary-tiling-block-size';\nimport takeIndexed from '@stdlib/array-base-take-indexed';\nimport copyIndexed from '@stdlib/array-base-copy-indexed';\nimport zeros from '@stdlib/array-base-zeros';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import Float64Array from '@stdlib/array-float64';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import getStride from '@stdlib/ndarray-base-stride';\n* import getOffset from '@stdlib/ndarray-base-offset';\n* import getData from '@stdlib/ndarray-base-data-buffer';\n* import numelDimension from '@stdlib/ndarray-base-numel-dimension';\n* import { ndarray as gsum } from '@stdlib/blas-ext-base-gsum';\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( new Float64Array( [ 0.0, 0.0, 0.0 ] ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* blockedunary3d( wrapper, [ x, y ], views, [ 12, 12, 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ 10.0, 26.0, 42.0 ] ] ]\n*/\nfunction blockedunary3d( fcn, arrays, views, strides, strategy, opts ) {\n\tvar bsize;\n\tvar ybuf;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar ov1;\n\tvar ov2;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar v;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[1];\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tiv = zeros( N );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Iterate over blocks...\n\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\tif ( j2 < bsize ) {\n\t\t\ts2 = j2;\n\t\t\tj2 = 0;\n\t\t} else {\n\t\t\ts2 = bsize;\n\t\t\tj2 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov2[ k ] = ov[k] + ( j2*sv[k][2] );\n\t\t}\n\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\tif ( j1 < bsize ) {\n\t\t\t\ts1 = j1;\n\t\t\t\tj1 = 0;\n\t\t\t} else {\n\t\t\t\ts1 = bsize;\n\t\t\t\tj1 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t}\n\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\ts0 = j0;\n\t\t\t\t\tj0 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts0 = bsize;\n\t\t\t\t\tj0 -= bsize;\n\t\t\t\t}\n\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t}\n\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\tset( ybuf, iv[ 1 ], fcn( v, opts ) );\n\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary3d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-unary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-unary-tiling-block-size';\nimport takeIndexed from '@stdlib/array-base-take-indexed';\nimport copyIndexed from '@stdlib/array-base-copy-indexed';\nimport zeros from '@stdlib/array-base-zeros';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import Float64Array from '@stdlib/array-float64';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import getStride from '@stdlib/ndarray-base-stride';\n* import getOffset from '@stdlib/ndarray-base-offset';\n* import getData from '@stdlib/ndarray-base-data-buffer';\n* import numelDimension from '@stdlib/ndarray-base-numel-dimension';\n* import { ndarray as gsum } from '@stdlib/blas-ext-base-gsum';\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( new Float64Array( [ 0.0, 0.0, 0.0 ] ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* blockedunary4d( wrapper, [ x, y ], views, [ 12, 12, 12, 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ 10.0, 26.0, 42.0 ] ] ] ]\n*/\nfunction blockedunary4d( fcn, arrays, views, strides, strategy, opts ) {\n\tvar bsize;\n\tvar ybuf;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar v;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[1];\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tiv = zeros( N );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Iterate over blocks...\n\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\tif ( j3 < bsize ) {\n\t\t\ts3 = j3;\n\t\t\tj3 = 0;\n\t\t} else {\n\t\t\ts3 = bsize;\n\t\t\tj3 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov3[ k ] = ov[k] + ( j3*sv[k][3] );\n\t\t}\n\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\tif ( j2 < bsize ) {\n\t\t\t\ts2 = j2;\n\t\t\t\tj2 = 0;\n\t\t\t} else {\n\t\t\t\ts2 = bsize;\n\t\t\t\tj2 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t}\n\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\ts1 = j1;\n\t\t\t\t\tj1 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts1 = bsize;\n\t\t\t\t\tj1 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t}\n\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t}\n\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\t\t\tset( ybuf, iv[ 1 ], fcn( v, opts ) );\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary4d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-unary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-unary-tiling-block-size';\nimport takeIndexed from '@stdlib/array-base-take-indexed';\nimport copyIndexed from '@stdlib/array-base-copy-indexed';\nimport zeros from '@stdlib/array-base-zeros';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import Float64Array from '@stdlib/array-float64';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import getStride from '@stdlib/ndarray-base-stride';\n* import getOffset from '@stdlib/ndarray-base-offset';\n* import getData from '@stdlib/ndarray-base-data-buffer';\n* import numelDimension from '@stdlib/ndarray-base-numel-dimension';\n* import { ndarray as gsum } from '@stdlib/blas-ext-base-gsum';\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( new Float64Array( [ 0.0, 0.0, 0.0 ] ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* blockedunary5d( wrapper, [ x, y ], views, [ 12, 12, 12, 12, 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ 10.0, 26.0, 42.0 ] ] ] ] ]\n*/\nfunction blockedunary5d( fcn, arrays, views, strides, strategy, opts ) { // eslint-disable-line max-statements\n\tvar bsize;\n\tvar ybuf;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar ov4;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar v;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[1];\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tov4 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tdv4 = zeros( N );\n\tiv = zeros( N );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Iterate over blocks...\n\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\tif ( j4 < bsize ) {\n\t\t\ts4 = j4;\n\t\t\tj4 = 0;\n\t\t} else {\n\t\t\ts4 = bsize;\n\t\t\tj4 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov4[ k ] = ov[k] + ( j4*sv[k][4] );\n\t\t}\n\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\tif ( j3 < bsize ) {\n\t\t\t\ts3 = j3;\n\t\t\t\tj3 = 0;\n\t\t\t} else {\n\t\t\t\ts3 = bsize;\n\t\t\t\tj3 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tdv4[ k ] = sv[k][4] - ( s3*sv[k][3] );\n\t\t\t\tov3[ k ] = ov4[k] + ( j3*sv[k][3] );\n\t\t\t}\n\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\ts2 = j2;\n\t\t\t\t\tj2 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts2 = bsize;\n\t\t\t\t\tj2 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\t}\n\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\t\t\t\t\tset( ybuf, iv[ 1 ], fcn( v, opts ) );\n\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary5d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-unary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-unary-tiling-block-size';\nimport takeIndexed from '@stdlib/array-base-take-indexed';\nimport copyIndexed from '@stdlib/array-base-copy-indexed';\nimport zeros from '@stdlib/array-base-zeros';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import Float64Array from '@stdlib/array-float64';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import getStride from '@stdlib/ndarray-base-stride';\n* import getOffset from '@stdlib/ndarray-base-offset';\n* import getData from '@stdlib/ndarray-base-data-buffer';\n* import numelDimension from '@stdlib/ndarray-base-numel-dimension';\n* import { ndarray as gsum } from '@stdlib/blas-ext-base-gsum';\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( new Float64Array( [ 0.0, 0.0, 0.0 ] ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* blockedunary6d( wrapper, [ x, y ], views, [ 12, 12, 12, 12, 12, 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ 10.0, 26.0, 42.0 ] ] ] ] ] ]\n*/\nfunction blockedunary6d( fcn, arrays, views, strides, strategy, opts ) { // eslint-disable-line max-statements\n\tvar bsize;\n\tvar ybuf;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar ov4;\n\tvar ov5;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar v;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[1];\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tov4 = zeros( N );\n\tov5 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tdv4 = zeros( N );\n\tdv5 = zeros( N );\n\tiv = zeros( N );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Iterate over blocks...\n\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\tif ( j5 < bsize ) {\n\t\t\ts5 = j5;\n\t\t\tj5 = 0;\n\t\t} else {\n\t\t\ts5 = bsize;\n\t\t\tj5 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov5[ k ] = ov[k] + ( j5*sv[k][5] );\n\t\t}\n\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\tif ( j4 < bsize ) {\n\t\t\t\ts4 = j4;\n\t\t\t\tj4 = 0;\n\t\t\t} else {\n\t\t\t\ts4 = bsize;\n\t\t\t\tj4 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tdv5 = sv[k][5] - ( s4*sv[k][4] );\n\t\t\t\tov4[ k ] = ov5[k] + ( j4*sv[k][4] );\n\t\t\t}\n\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\ts3 = j3;\n\t\t\t\t\tj3 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts3 = bsize;\n\t\t\t\t\tj3 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tdv4[ k ] = sv[k][4] - ( s3*sv[k][3] );\n\t\t\t\t\tov3[ k ] = ov4[k] + ( j3*sv[k][3] );\n\t\t\t\t}\n\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\t\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\t\t\t\t\t\t\tset( ybuf, iv[ 1 ], fcn( v, opts ) );\n\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary6d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-unary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-unary-tiling-block-size';\nimport takeIndexed from '@stdlib/array-base-take-indexed';\nimport copyIndexed from '@stdlib/array-base-copy-indexed';\nimport zeros from '@stdlib/array-base-zeros';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import Float64Array from '@stdlib/array-float64';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import getStride from '@stdlib/ndarray-base-stride';\n* import getOffset from '@stdlib/ndarray-base-offset';\n* import getData from '@stdlib/ndarray-base-data-buffer';\n* import numelDimension from '@stdlib/ndarray-base-numel-dimension';\n* import { ndarray as gsum } from '@stdlib/blas-ext-base-gsum';\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( new Float64Array( [ 0.0, 0.0, 0.0 ] ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* blockedunary7d( wrapper, [ x, y ], views, [ 12, 12, 12, 12, 12, 12, 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ 10.0, 26.0, 42.0 ] ] ] ] ] ] ]\n*/\nfunction blockedunary7d( fcn, arrays, views, strides, strategy, opts ) { // eslint-disable-line max-statements\n\tvar bsize;\n\tvar ybuf;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar ov4;\n\tvar ov5;\n\tvar ov6;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar v;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tov4 = zeros( N );\n\tov5 = zeros( N );\n\tov6 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tdv4 = zeros( N );\n\tdv5 = zeros( N );\n\tdv6 = zeros( N );\n\tiv = zeros( N );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Iterate over blocks...\n\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\tif ( j6 < bsize ) {\n\t\t\ts6 = j6;\n\t\t\tj6 = 0;\n\t\t} else {\n\t\t\ts6 = bsize;\n\t\t\tj6 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov6[ k ] = ov[k] + ( j6*sv[k][6] );\n\t\t}\n\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\tif ( j5 < bsize ) {\n\t\t\t\ts5 = j5;\n\t\t\t\tj5 = 0;\n\t\t\t} else {\n\t\t\t\ts5 = bsize;\n\t\t\t\tj5 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tdv6 = sv[k][6] - ( s5*sv[k][5] );\n\t\t\t\tov5[ k ] = ov6[k] + ( j5*sv[k][5] );\n\t\t\t}\n\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\ts4 = j4;\n\t\t\t\t\tj4 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts4 = bsize;\n\t\t\t\t\tj4 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tdv5 = sv[k][5] - ( s4*sv[k][4] );\n\t\t\t\t\tov4[ k ] = ov5[k] + ( j4*sv[k][4] );\n\t\t\t\t}\n\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tdv4[ k ] = sv[k][4] - ( s3*sv[k][3] );\n\t\t\t\t\t\tov3[ k ] = ov4[k] + ( j3*sv[k][3] );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tset( ybuf, iv[ 1 ], fcn( v, opts ) );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv6 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary7d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-unary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-unary-tiling-block-size';\nimport takeIndexed from '@stdlib/array-base-take-indexed';\nimport copyIndexed from '@stdlib/array-base-copy-indexed';\nimport zeros from '@stdlib/array-base-zeros';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import Float64Array from '@stdlib/array-float64';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import getStride from '@stdlib/ndarray-base-stride';\n* import getOffset from '@stdlib/ndarray-base-offset';\n* import getData from '@stdlib/ndarray-base-data-buffer';\n* import numelDimension from '@stdlib/ndarray-base-numel-dimension';\n* import { ndarray as gsum } from '@stdlib/blas-ext-base-gsum';\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( new Float64Array( [ 0.0, 0.0, 0.0 ] ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* blockedunary8d( wrapper, [ x, y ], views, [ 12, 12, 12, 12, 12, 12, 12, 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ 10.0, 26.0, 42.0 ] ] ] ] ] ] ] ]\n*/\nfunction blockedunary8d( fcn, arrays, views, strides, strategy, opts ) { // eslint-disable-line max-statements, max-lines-per-function\n\tvar bsize;\n\tvar ybuf;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar dv7;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar ov4;\n\tvar ov5;\n\tvar ov6;\n\tvar ov7;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar v;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tov4 = zeros( N );\n\tov5 = zeros( N );\n\tov6 = zeros( N );\n\tov7 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tdv4 = zeros( N );\n\tdv5 = zeros( N );\n\tdv6 = zeros( N );\n\tdv7 = zeros( N );\n\tiv = zeros( N );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Iterate over blocks...\n\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\tif ( j7 < bsize ) {\n\t\t\ts7 = j7;\n\t\t\tj7 = 0;\n\t\t} else {\n\t\t\ts7 = bsize;\n\t\t\tj7 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov7[ k ] = ov[k] + ( j7*sv[k][7] );\n\t\t}\n\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\tif ( j6 < bsize ) {\n\t\t\t\ts6 = j6;\n\t\t\t\tj6 = 0;\n\t\t\t} else {\n\t\t\t\ts6 = bsize;\n\t\t\t\tj6 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tdv7 = sv[k][7] - ( s6*sv[k][6] );\n\t\t\t\tov6[ k ] = ov7[k] + ( j6*sv[k][6] );\n\t\t\t}\n\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\ts5 = j5;\n\t\t\t\t\tj5 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts5 = bsize;\n\t\t\t\t\tj5 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tdv6 = sv[k][6] - ( s5*sv[k][5] );\n\t\t\t\t\tov5[ k ] = ov6[k] + ( j5*sv[k][5] );\n\t\t\t\t}\n\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tdv5 = sv[k][5] - ( s4*sv[k][4] );\n\t\t\t\t\t\tov4[ k ] = ov5[k] + ( j4*sv[k][4] );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\tdv4[ k ] = sv[k][4] - ( s3*sv[k][3] );\n\t\t\t\t\t\t\tov3[ k ] = ov4[k] + ( j3*sv[k][3] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t\t\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tset( ybuf, iv[ 1 ], fcn( v, opts ) );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv6 );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv7 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary8d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-unary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-unary-tiling-block-size';\nimport takeIndexed from '@stdlib/array-base-take-indexed';\nimport copyIndexed from '@stdlib/array-base-copy-indexed';\nimport zeros from '@stdlib/array-base-zeros';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import Float64Array from '@stdlib/array-float64';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import getStride from '@stdlib/ndarray-base-stride';\n* import getOffset from '@stdlib/ndarray-base-offset';\n* import getData from '@stdlib/ndarray-base-data-buffer';\n* import numelDimension from '@stdlib/ndarray-base-numel-dimension';\n* import { ndarray as gsum } from '@stdlib/blas-ext-base-gsum';\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( new Float64Array( [ 0.0, 0.0, 0.0 ] ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* blockedunary9d( wrapper, [ x, y ], views, [ 12, 12, 12, 12, 12, 12, 12, 12, 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ [ 10.0, 26.0, 42.0 ] ] ] ] ] ] ] ] ]\n*/\nfunction blockedunary9d( fcn, arrays, views, strides, strategy, opts ) { // eslint-disable-line max-statements, max-lines-per-function\n\tvar bsize;\n\tvar ybuf;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar dv7;\n\tvar dv8;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar ov4;\n\tvar ov5;\n\tvar ov6;\n\tvar ov7;\n\tvar ov8;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar s8;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar j8;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar v;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tov4 = zeros( N );\n\tov5 = zeros( N );\n\tov6 = zeros( N );\n\tov7 = zeros( N );\n\tov8 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tdv4 = zeros( N );\n\tdv5 = zeros( N );\n\tdv6 = zeros( N );\n\tdv7 = zeros( N );\n\tdv8 = zeros( N );\n\tiv = zeros( N );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Iterate over blocks...\n\tfor ( j8 = sh[8]; j8 > 0; ) {\n\t\tif ( j8 < bsize ) {\n\t\t\ts8 = j8;\n\t\t\tj8 = 0;\n\t\t} else {\n\t\t\ts8 = bsize;\n\t\t\tj8 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov8[ k ] = ov[k] + ( j8*sv[k][8] );\n\t\t}\n\t\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\t\tif ( j7 < bsize ) {\n\t\t\t\ts7 = j7;\n\t\t\t\tj7 = 0;\n\t\t\t} else {\n\t\t\t\ts7 = bsize;\n\t\t\t\tj7 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tdv8 = sv[k][8] - ( s7*sv[k][7] );\n\t\t\t\tov7[ k ] = ov8[k] + ( j7*sv[k][7] );\n\t\t\t}\n\t\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\t\tif ( j6 < bsize ) {\n\t\t\t\t\ts6 = j6;\n\t\t\t\t\tj6 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts6 = bsize;\n\t\t\t\t\tj6 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tdv7 = sv[k][7] - ( s6*sv[k][6] );\n\t\t\t\t\tov6[ k ] = ov7[k] + ( j6*sv[k][6] );\n\t\t\t\t}\n\t\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\t\ts5 = j5;\n\t\t\t\t\t\tj5 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts5 = bsize;\n\t\t\t\t\t\tj5 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tdv6 = sv[k][6] - ( s5*sv[k][5] );\n\t\t\t\t\t\tov5[ k ] = ov6[k] + ( j5*sv[k][5] );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\tdv5 = sv[k][5] - ( s4*sv[k][4] );\n\t\t\t\t\t\t\tov4[ k ] = ov5[k] + ( j4*sv[k][4] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\tdv4[ k ] = sv[k][4] - ( s3*sv[k][3] );\n\t\t\t\t\t\t\t\tov3[ k ] = ov4[k] + ( j3*sv[k][3] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t\t\t\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t\t\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\t\t\t\t\t\tfor ( i8 = 0; i8 < s8; i8++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tset( ybuf, iv[ 1 ], fcn( v, opts ) );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv6 );\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv7 );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv8 );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary9d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-unary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-unary-tiling-block-size';\nimport takeIndexed from '@stdlib/array-base-take-indexed';\nimport copyIndexed from '@stdlib/array-base-copy-indexed';\nimport zeros from '@stdlib/array-base-zeros';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import Float64Array from '@stdlib/array-float64';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import getStride from '@stdlib/ndarray-base-stride';\n* import getOffset from '@stdlib/ndarray-base-offset';\n* import getData from '@stdlib/ndarray-base-data-buffer';\n* import numelDimension from '@stdlib/ndarray-base-numel-dimension';\n* import { ndarray as gsum } from '@stdlib/blas-ext-base-gsum';\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( new Float64Array( [ 0.0, 0.0, 0.0 ] ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* blockedunary10d( wrapper, [ x, y ], views, [ 12, 12, 12, 12, 12, 12, 12, 12, 12, 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ [ [ 10.0, 26.0, 42.0 ] ] ] ] ] ] ] ] ] ]\n*/\nfunction blockedunary10d( fcn, arrays, views, strides, strategy, opts ) { // eslint-disable-line max-statements, max-lines-per-function\n\tvar bsize;\n\tvar ybuf;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar dv7;\n\tvar dv8;\n\tvar dv9;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar ov4;\n\tvar ov5;\n\tvar ov6;\n\tvar ov7;\n\tvar ov8;\n\tvar ov9;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar s8;\n\tvar s9;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar i9;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar j8;\n\tvar j9;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar v;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tov4 = zeros( N );\n\tov5 = zeros( N );\n\tov6 = zeros( N );\n\tov7 = zeros( N );\n\tov8 = zeros( N );\n\tov9 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tdv4 = zeros( N );\n\tdv5 = zeros( N );\n\tdv6 = zeros( N );\n\tdv7 = zeros( N );\n\tdv8 = zeros( N );\n\tdv9 = zeros( N );\n\tiv = zeros( N );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Iterate over blocks...\n\tfor ( j9 = sh[9]; j9 > 0; ) {\n\t\tif ( j9 < bsize ) {\n\t\t\ts9 = j9;\n\t\t\tj9 = 0;\n\t\t} else {\n\t\t\ts9 = bsize;\n\t\t\tj9 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov9[ k ] = ov[k] + ( j9*sv[k][9] );\n\t\t}\n\t\tfor ( j8 = sh[8]; j8 > 0; ) {\n\t\t\tif ( j8 < bsize ) {\n\t\t\t\ts8 = j8;\n\t\t\t\tj8 = 0;\n\t\t\t} else {\n\t\t\t\ts8 = bsize;\n\t\t\t\tj8 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tdv9 = sv[k][9] - ( s8*sv[k][8] );\n\t\t\t\tov8[ k ] = ov9[k] + ( j8*sv[k][8] );\n\t\t\t}\n\t\t\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\t\t\tif ( j7 < bsize ) {\n\t\t\t\t\ts7 = j7;\n\t\t\t\t\tj7 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts7 = bsize;\n\t\t\t\t\tj7 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tdv8 = sv[k][8] - ( s7*sv[k][7] );\n\t\t\t\t\tov7[ k ] = ov8[k] + ( j7*sv[k][7] );\n\t\t\t\t}\n\t\t\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\t\t\tif ( j6 < bsize ) {\n\t\t\t\t\t\ts6 = j6;\n\t\t\t\t\t\tj6 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts6 = bsize;\n\t\t\t\t\t\tj6 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tdv7 = sv[k][7] - ( s6*sv[k][6] );\n\t\t\t\t\t\tov6[ k ] = ov7[k] + ( j6*sv[k][6] );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\t\t\ts5 = j5;\n\t\t\t\t\t\t\tj5 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts5 = bsize;\n\t\t\t\t\t\t\tj5 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\tdv6 = sv[k][6] - ( s5*sv[k][5] );\n\t\t\t\t\t\t\tov5[ k ] = ov6[k] + ( j5*sv[k][5] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\tdv5 = sv[k][5] - ( s4*sv[k][4] );\n\t\t\t\t\t\t\t\tov4[ k ] = ov5[k] + ( j4*sv[k][4] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\tdv4[ k ] = sv[k][4] - ( s3*sv[k][3] );\n\t\t\t\t\t\t\t\t\tov3[ k ] = ov4[k] + ( j3*sv[k][3] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t\t\t\t\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t\t\t\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\t\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\t\t\t\t\t\t\tfor ( i9 = 0; i9 < s9; i9++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i8 = 0; i8 < s8; i8++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tset( ybuf, iv[ 1 ], fcn( v, opts ) );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv6 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv7 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv8 );\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv9 );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary10d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Initialize ndarray-like objects for representing zero-dimensional sub-array views of ancillary ndarray arguments.\n*\n* ## Notes\n*\n* -   This function ignores the first two ndarray-like objects, which are assumed to be the input and output ndarray, respectively.\n* -   This function mutates the provided output array.\n*\n* @private\n* @param {ArrayLikeObject<Object>} arrays - list of ndarray-like objects\n* @param {Array<Object>} out - output array\n* @returns {Array<Object>} output array\n*/\nfunction initializeViews( arrays, out ) {\n\tvar v;\n\tvar i;\n\n\tfor ( i = 2; i < arrays.length; i++ ) {\n\t\tv = arrays[ i ];\n\t\tout.push({\n\t\t\t'dtype': v.dtype,\n\t\t\t'data': v.data,\n\t\t\t'shape': [],\n\t\t\t'strides': [ 0 ],\n\t\t\t'offset': v.offset,\n\t\t\t'order': v.order\n\t\t});\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default initializeViews;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isFunction from '@stdlib/assert-is-function';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport reduce from './main.js';\n\n\n// MAIN //\n\n/**\n* Return a function for performing a reduction over a list of specified dimensions in an input ndarray via a one-dimensional strided array reduction function and assigning results to a provided output ndarray.\n*\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @throws {TypeError} first argument must be a function\n* @returns {Function} function for performing a reduction\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import getStride from '@stdlib/ndarray-base-stride';\n* import getOffset from '@stdlib/ndarray-base-offset';\n* import getData from '@stdlib/ndarray-base-data-buffer';\n* import numelDimension from '@stdlib/ndarray-base-numel-dimension';\n* import { ndarray as gsum } from '@stdlib/blas-ext-base-gsum';\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 3, 2, 2 ];\n* var ysh = [ 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Create a function for performing a reduction over subarrays:\n* var sum = factory( wrapper );\n* // returns <Function>\n*\n* // Perform a reduction:\n* sum( [ x, y ], [ 2, 3 ] );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ 10.0, 26.0, 42.0 ] ]\n*/\nfunction factory( fcn ) {\n\tif ( !isFunction( fcn ) ) {\n\t\tthrow new TypeError( format( 'null3c', fcn ) );\n\t}\n\treturn reducer;\n\n\t/**\n\t* Performs a reduction over a list of specified dimensions in an input ndarray via a one-dimensional strided array reduction function and assigns results to a provided output ndarray.\n\t*\n\t* @private\n\t* @param {ArrayLikeObject<Object>} arrays - array-like object containing ndarrays\n\t* @param {IntegerArray} dims - list of dimensions over which to perform a reduction\n\t* @param {Options} [options] - function options\n\t* @returns {void}\n\t*/\n\tfunction reducer( arrays, dims, options ) {\n\t\tvar opts;\n\t\tif ( arguments.length > 2 ) {\n\t\t\topts = options;\n\t\t} else {\n\t\t\topts = {};\n\t\t}\n\t\treturn reduce( fcn, arrays, dims, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Perform a reduction over a list of specified dimensions in an input ndarray via a one-dimensional strided array reduction function and assign results to a provided output ndarray.\n*\n* @module @stdlib/ndarray-base-unary-reduce-strided1d\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import getStride from '@stdlib/ndarray-base-stride';\n* import getOffset from '@stdlib/ndarray-base-offset';\n* import getData from '@stdlib/ndarray-base-data-buffer';\n* import numelDimension from '@stdlib/ndarray-base-numel-dimension';\n* import { ndarray as gsum } from '@stdlib/blas-ext-base-gsum';\n* import unaryReduceStrided1d from '@stdlib/ndarray-base-unary-reduce-strided1d';\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 3, 2, 2 ];\n* var ysh = [ 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Perform a reduction:\n* unaryReduceStrided1d( wrapper, [ x, y ], [ 2, 3 ] );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ 10.0, 26.0, 42.0 ] ]\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import getStride from '@stdlib/ndarray-base-stride';\n* import getOffset from '@stdlib/ndarray-base-offset';\n* import getData from '@stdlib/ndarray-base-data-buffer';\n* import numelDimension from '@stdlib/ndarray-base-numel-dimension';\n* import { ndarray as gsum } from '@stdlib/blas-ext-base-gsum';\n* import unaryReduceStrided1d from '@stdlib/ndarray-base-unary-reduce-strided1d';\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     return gsum( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 3, 2, 2 ];\n* var ysh = [ 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Create a function for performing a reduction over subarrays:\n* var sum = unaryReduceStrided1d.factory( wrapper );\n* // returns <Function>\n*\n* // Perform a reduction:\n* sum( [ x, y ], [ 2, 3 ] );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ 10.0, 26.0, 42.0 ] ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default main;\n\n// exports: { \"factory\": \"main.factory\" }\n"],"names":["identity","x","broadcast","dtype","data","shape","strides","offset","order","strategy","ndims","xmmv","len","iox","sh","ns","i","length","arr","index","sx","squeeze","iterationOrder","minmaxViewBufferIndex","ind","contiguous","workspace","view","assign","copy","ndarraylike2object","emptyLike","ndarraylike2ndarray","incrementOffsets","offsets","inc","setViewOffsets","views","j","arrays","out","push","MODE","UNARY","fcn","opts","without","ybuf","dv0","S0","iv","i0","y","v","copyIndexed","dv1","S1","sv","i1","isRowMajor","dv2","S2","i2","dv3","S3","i3","dv4","S4","i4","dv5","S5","i5","dv6","S6","i6","dv7","S7","i7","dv8","S8","i8","dv9","S9","i9","ACCESSOR_UNARY","accessors","set","BLOCKED_UNARY","bsize","ov1","s0","s1","ov","j0","j1","N","o","k","loopOrder","sy","takeIndexed","idx","blockSize","zeros","ov2","s2","j2","ov3","s3","j3","ov4","s4","j4","ov5","s5","j5","ov6","s6","j6","ov7","s7","j7","ov8","s8","j8","ov9","s9","j9","BLOCKED_ACCESSOR_UNARY","MAX_DIMS","unaryReduceStrided1d","dims","options","ldims","tmp","shx","shc","shl","ioy","sc","sl","d","s","M","K","arguments","ndarray2object","normalizeIndices","RangeError","format","join","sort","Error","indicesComplement","takeIndexed2","numel","initializeViews","reshapeStrategy","accessorProtocol","io","vind2bind","accessorunarynd","unarynd","factory","isFunction","TypeError","reduce","setReadOnly","main"],"mappings":"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"}